version: 2.1

orbs:
  go: circleci/go@1.7.0
  slack: circleci/slack@4.7.1
  codecov: codecov/codecov@3.1.1

parameters:
  ubuntu_image:
    type: string
    default: "ubuntu-2004:202107-02"

workflows:
  version: 2
  circleci_build_and_test:
    jobs:
      - test:
          name: test_with_go_<< matrix.go_version >>
          matrix: &go-version-matrix
            parameters:
              go_version: ["1.17.9"]

  circleci_build_and_test_nightly:
    triggers:
      - schedule:
          cron: "37 3 * * *"
          filters:
            branches:
              only: develop
    jobs:
      - test_nightly:
          name: nightly_test_with_go_<< matrix.go_version >>
          context: slack-secrets
          matrix: &go-version-matrix
            parameters:
              go_version: ["1.17.9"]
      - indexer_vs_algod_nightly:
          name: nightly_test_indexer_vs_algod
          context: slack-secrets

jobs:
  test:
    machine:
      image: << pipeline.parameters.ubuntu_image >>
    parameters:
      go_version:
        type: string
    environment:
      CI_E2E_FILENAME: "fad05790/rel-nightly"
    steps:
      - go/install:
          version: << parameters.go_version >>
      - install_dependencies
      - run_tests
      - codecov/upload
  test_nightly:
    machine:
      image: << pipeline.parameters.ubuntu_image >>
    parameters:
      go_version:
        type: string
    environment:
      CI_E2E_FILENAME: "rel-nightly"
    steps:
      - go/install:
          version: << parameters.go_version >>
      - install_dependencies
      - run_tests
      - codecov/upload
      - slack/notify: &slack-fail-event
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Failed: <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n(<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- <$CIRCLE_BUILD_URL|$CIRCLE_JOB> failed\n\n"
                  }
                }
              ]
            }
  indexer_vs_algod_nightly:
    machine:
      image: << pipeline.parameters.ubuntu_image >>
    steps:
      - install_dependencies
      - run_indexer_vs_algod
      - slack/notify: &slack-fail-event
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Failed: <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n(<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- <$CIRCLE_BUILD_URL|$CIRCLE_JOB> failed\n\nThis is probably a result of `make indexer-v-algod`\nSee <https://algorand.atlassian.net/wiki/spaces/LAMPREY/pages/2339536905/Nightly+Indexer+Tests#Q%3A-What-does-it-mean-that-the-nightly-test-failed-because-of-make-indexer-v-algod%3F|this wiki page> for more details"
                  }
                }
              ]
            }

commands:
  install_dependencies:
    description: prepare machine for next steps
    steps:
      - checkout

      - run:
          name: Install python and other python dependencies
          command: |
            sudo apt update
            sudo apt -y install python3 python3-pip python3-setuptools python3-wheel libboost-math-dev libffi-dev
            pip3 install -r misc/requirements.txt

      - run:
          name: sync submodules (go-algorand)
          command: |
            git submodule sync
            git submodule update --init

      - run: echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV

      - run:
          name: Install golint
          command: go install golang.org/x/lint/golint@latest

  run_tests:
    steps:
      - run: test -z `go fmt ./...`
      - run: make lint
      - run: make check
      - run: make integration
      # Start a docker container and set TEST_PG to optimize running tests.
      - run: docker run -d --name some-postgres -p 5555:5432 -e POSTGRES_PASSWORD=pgpass -e POSTGRES_USER=pguser -e POSTGRES_DB=mydb postgres
      - run: echo 'export TEST_PG="host=localhost user=pguser password=pgpass dbname=mydb port=5555 sslmode=disable"' >> $BASH_ENV
      - run: echo 'export TEST_FLAG="-p 1"' >> $BASH_ENV
      - run:
          command: make test
          no_output_timeout: 15m
      - run: make test-generate
      - run: make fakepackage
      - run: make e2e

  run_indexer_vs_algod:
    steps:
      - run: make indexer-v-algod
