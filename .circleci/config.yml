version: 2.1

orbs:
  go: circleci/go@1.7.0

parameters:
  ubuntu_image:
    type: string
    default: "ubuntu-2004:202107-02"

workflows:
  version: 2
  "circleci_build_and_test":
    jobs:
      - test:
          name: test_with_go_<< matrix.go_version >>
          matrix: &go-version-matrix
            parameters:
              go_version: ["1.14.7", "1.15.15"]

jobs:
  test:
    machine:
      image: << pipeline.parameters.ubuntu_image >> 
    parameters:
      go_version:
        type: string
    steps:
      - go/install:
          version: << parameters.go_version >>
      - install_dependencies
      - run_tests
      - upload_coverage

commands:
  install_dependencies:
    description: prepare machine for next steps
    steps:
      - checkout

      - run:
          name: Install python and other python dependencies
          command: |
            sudo apt update
            sudo apt -y install python3 python3-pip python3-setuptools python3-wheel libboost-all-dev libffi-dev
            pip3 install -r misc/requirements.txt
      
      - run: 
          name: Install golint
          command: |
            export PATH=$PATH:/usr/local/go/bin
            go get -u golang.org/x/lint/golint

      - run:
          name: Install Docker
          command: |
            sudo apt -y remove docker docker-engine docker.io containerd runc
            sudo apt -y install apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt -y install docker-ce docker-ce-cli containerd.io
            if [ -n "$DOCKER_PASSWORD" ]; then echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin ; fi

  run_tests:
    steps:
      - run: test -z `go fmt ./...`
      - run: make lint
      - run: make check
      - run: make integration
      - run: make test
      - run: make fakepackage
      - run: make e2e

  upload_coverage:
    description: Collect coverage reports and upload them
    steps:
      - run:
          name: Upload Coverage Reports
          no_output_timeout: 10m
          command: |
            scripts/upload_coverage.sh || true
