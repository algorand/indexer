// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//8Lt6caF6AAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
