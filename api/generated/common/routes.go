// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZUqLlZCOqrd8tQKd9fjO/w8AAP//62VeisflAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
