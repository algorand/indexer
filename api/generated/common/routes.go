// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
