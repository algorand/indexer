// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
