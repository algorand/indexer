// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
