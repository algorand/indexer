// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
