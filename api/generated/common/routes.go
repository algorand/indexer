// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
