// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
