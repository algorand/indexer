// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
