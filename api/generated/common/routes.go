// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3h5S6o2xAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
