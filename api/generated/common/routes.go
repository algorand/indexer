// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA//8Hn5akGaQAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
