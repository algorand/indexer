// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
