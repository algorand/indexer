// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
