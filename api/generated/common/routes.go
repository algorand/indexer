// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
	// Gets the OpenAPI specification file.
	// (GET /openapi)
	GetOpenAPISpec(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)
	router.GET("/openapi", wrapper.GetOpenAPISpec, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
