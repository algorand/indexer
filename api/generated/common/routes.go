// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/sUA1/lycv3u+v8HAAD//z+81UKJxAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
