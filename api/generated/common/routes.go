// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fW/cttIo/lWI/T3ASfpb2Wl6WjwnwMGDnKRBgyZtELs9wI17b7nS7C5rLamSlO1t",
	"r7/7BWdIiZIo7YsdJwfoX4lXfBvOcGY4b/xzlqtNpSRIa2bP/pxVXPMNWND4F89zVUubicL9VYDJtais",
	"UHL2LHxjxmohV7P5TLhfK27Xs/lM8g20bVz/+UzD77XQUMyeWV3DfGbyNWy4G9huK9faj3R7O5/xotBg",
	"zHDWH2W5ZULmZV0As5pLw3P3ybBrYdfMroVhvjMTkikJTC2ZXXcas6WAsjAnYdG/16C30ar95ONLnM9u",
	"Ml6ulOayyJZKb7idPZs99/1ud372M2RalTCE8YXaLISEABE0ADXIYVaxApbYaM0tc6tzcIaGVjEDXOdr",
	"tlR6B5i0iBhWkPVm9uzDzIAsQCPmchBX+N+lBvgDMsv1Cuzsl3kKd0sLOrNikwDttcecBlOX1jBsizCu",
	"xBVI5nqdsLe1sWwBjEv2/tUL9tVXX/2D0TZaKDzBjULVzh7D1GCh4BbC532Q+v7VC5z/zAO4byteVaXI",
	"uYM7eXyet9/Z65djwHQHSRCkkBZWoGnjjYH0WX3uvkxMEzrumqC268yRzThi/Yk3LFdyKVa1hsJRY22A",
	"zqapQBZCrtglbEdR2Ezz8U7gApZKw55USo3vlUzj+T8pnea11iDzbbbSwPHorLkcbsl7vxVmreqyYGt+",
	"hXDzDcoA35e5voTnK17WbotErtXzcqUM434HC1jyurQsTMxqWTqe5UbzdMiEYZVWV6KAYu7Y+PVa5GuW",
	"c0NDYDt2LcrSbX9toBjb5jR0O8i86eTWddR+IECf72a0cO3YCbjBgzAE/9sbf9yLQrifeMmEhY1hps7X",
	"jBu/qrUq3WE3cxZxMlaqnJes4JYzY5XjEEulvegm9jH3/VtthOWIwIIttv2WsuiMvruP2x+4qUrlIFvy",
	"0kB6vwL08SYhlLGQ5GU586zXaQx+yqz5gVeVyRDizFhuIW5TVa6FVBISkrT5gWvNt+5vY7dOXUAeMWux",
	"k+WlMpBZtUOTCMoBblgk++MdO0ivYOdrYDi5+0A6FVK2dOymLLfMegQ4gmBBi5gzsWRbVbNrPDqluMT+",
	"HhpH0xvmkI8o66g8Tm8cI+7BZiRIe6FUCVwiaXsdMnP4G5dmZaBrau4EF05QNIJuzgooAYFsiRB/NVar",
	"LQLvSGHOVOWQrmo7PByy8MPS5/5ZQcIZVVdjSHYAXYqNsENw3/Ibsak3TNabBWiH8CD5rGIabK0lIlsD",
	"yxFni87Jr/gKDAMnGAXp2jiPY1xSWaaB5+txrkRr2sGINvwm06qWxR4qpWVKxyLbVJCLpYCCNaOMraWd",
	"Ztd6hDxsPa2iGy0nDDK6nGaWHcuRcJNAqzue7gsiKMLqCfvJyw78atUlyEbEELMEVmm4Eqo2TaeRNeLU",
	"05c5qSxklYaluBku8sxvh+MQ1MYLuI3XrnIlLRcSCif7cNHKAnGb0TVFEx6qQi64gW/+PqY/tV81XMI2",
	"yXT7BEDgNHfWtftCfaehaGbYcaj3pEOSsTH9TdLeXnSHjTJiGwkdyX31TCVtH+j038NCEM9Nt9PsTpYC",
	"GiOIt7Gt6M308S4lRqwyGnFwSsTq3MnipShRTv/mDkfAbG2cXOriNkhuI1aS21rDswv5hfuLZezMcllw",
	"XbhfNvTT27q04kys3E8l/fRGrUR+JlZjmxLWmrQcYLcN/ePGS1sK7E0DbmqK8Dk1Q8Vdw0vYanBz8HyJ",
	"/9wskZD4Uv9BuheKRFstxxaQui2/UeqyruINzTvWo8WWvX45Riw45BQ/RN5hKiUNINU+J0Xivf/N/eRY",
	"Hkjk6JEucPqbUXgTaceutKpAWwGxtc799780LGfPZv/faWvdO6Vu5tRP2F7+7JgoowPMrWdhxLo8UyNl",
	"YFPVlkR7ijs0x/lDs7b+nC1a1OI3yC1tUHcZj2BT2e1jt2C/dnN/u2U6Wv2e+9bXzD/iPpJwz1BID0f+",
	"yfjbU8VXQiLgc3a9Bsk2/NJxBS6VXYNmDhdgbBDzxP5I8jdmRq8reIX7ZJY6MQmcmjsjtcXaG6funqG6",
	"ex8o7t29DsB1akl/Yb7B/GBj75MEVveE+0n768XFB15Vori5uPilc+MSsoCbND4+KrJLtcoKbvlxNLp6",
	"6bomCPRzpqGubfu+COh+iecALDysRL2v7brnw3YUj/2LsyZOxd2ZqjFg/8VLLvN7EacLP9TeGH4rpMBF",
	"fEemrr/QHNDcbOV9oNjv7r0cZDJb732E/0Ju6gw3zoA7o/a+ULoXIh/4RohT3scmfSrC/4vi75fi/1Wq",
	"/PIoXE6hCkfdMfO3Wit9D1QU9Pce1PPZBozhK0jbx+OdDA332bqwYEQ7OBDQivgd8NKuX6zhI2xmNPaO",
	"LT1vDWb3sLEf9VhFtr1d8EdQ7VDIu8MeeBKiacznvnufD1PqbPn+vLyD0z5H3x/H5jAk3wYbcWwETkRu",
	"+ShLIclhIJR0mOI+EIlcOBfyQr6EpZDokX12IR0fOl1wI3JzWhvQ/hJwslLsGfNDvuSWX8jZvC8Ix/wp",
	"GGviV1PVi1Lk7BK2KSxQEEza5FKu1MXFL8wqy8vI3xyFxngvX2swHpIcTZA5ylC1zXxIWabhmusisXTT",
	"+BhxZIrRmZp1zvzY5Ar1IWt+/PQxGMR5jFicyp69ySTCYYTsxqs4/P6grHce8mtG9MVqA4b9uuHVByHt",
	"Lyy7qJ88+QrY86pqjZa/tsE1btHotrhXCygCjvjM4MZqnmE4QBJ8C7xC7K+BmXqDkSVlybBbN4ZHq5Xm",
	"Gx9Z0I8OmkAArWM/WRZBiMCdUa/beaQMDjHoPiEKsQ1bQzmMLzoUX9Et6mh07biJTYRuXlx8wKjMgJkm",
	"TmjFhTRBKhixku4Q+IC3BbDcaQFQnLDXS4Zcbd7p7sOuPcdsWIcwFKPGzh2M6ABnOZcYu1YVGC0kJONy",
	"23e5GbA2+DnfwyVszyP/+YF+WB9sw3eIxKJ2wzViscUwu+aGbRT6YHOQttz6+J0EaaYXUwtpKZCgEw02",
	"wjTw1ERhWu7gxCxkJNAtilriVcVWpVp4TtOQ6LOGRkOfcabyzi3A3ANDSV6cuoFz6Y3gOrERdBDHYv0O",
	"B9SNd6djOAne0SS3FNpgbBhwLyN4fESOoDwfuDZcyr/XgFqZ0hjA1SUpE450iuibuJT5rOLailxU+1nR",
	"afR3nT5ukF2iPSnM1bIvswciNSlCqHG24CYtvsF9cRRYGwpqdDAGRhdmIm0ZIThhGITij+qixDjHJkKe",
	"cMw1BmAGsClifGxp6XMBWrY6VVhGd0di5W3NTYjFxIDiwCL2UnNGiPfcbQASsDs3EfXGeqtw85Zwxcf2",
	"fzz+5bUsHO8A041LbaJbglgZhgeHMDLKBApRMCH0JcS7uH8dtddlycSS1fJSqmunHB8S0TKfOc2vTiNJ",
	"SdT83Jlb0XZQ40A+fsF/MxHa3Kp+XC5LIYFlTDR7YHEPKPZb5YJCbNvz6ecAdzH4gjkadAPsPUKKuKNl",
	"V0qVNDD7QcUnVq4OWaQEgTyGh7GR2UR/Q/qGhwoe6noUTytkmhrzwBechtkRlrgwDNhfAEgKy2VCzpm7",
	"513x0mkrVpHy0gySDl9/1FG1vZpnHo/p8WnrA0GEUuwgmEjuHQNNrCyGRac12YkVT+stKRQY3C/SItq9",
	"mgjS3zn1iK4wtlePEPA7LKBv9mwiAv2Vd+fVdCjRWtY+b2MuiY2kqX2MYpJ4GdmxoaWiCa161xfbSXtE",
	"pxWjJgt/v47UsxRLdqciV9KANDVmtliVq/JkYIgwUAJqNllHk8guYZu+wwAy2LPQLTJSsEdi6a4UjyPV",
	"RcNKGAud7JMmILaN991ixkbFrQXtJvrfj/7n2Yfn2f/i2R9Psn/8/6e//Pn328dfDH58evvPf/7f7k9f",
	"3f7z8f/812xEakBWaaWW49DZSi8dfO+VargydmTYsQPmg0NwpSxkqKBmV7wcCbdxjV4ZvDy/Ql02qTB0",
	"kM0oeUqMmB5x2kvYZoUo6zS9+nm/f+mm/aGxN5l6cQlbVAuB52u24DZfo97Ymd61mZi65DsBfkMAv+H3",
	"Bu9+p8E1dRNrRy7dOf5DzkWP106xgwQBpohjiLXRLZ1gkCjqX0JJnp7xpF46nIVreDJlZR0cpiKMPXVh",
	"ilYxLpVopCQs3QCncSgwGg4TlISNsrHMAKJ9L7ho/Sd5EE1zzZsb/Ee/yMbQxZdZP0r6Nus/3gG84fD7",
	"gndf4YuIvUPsNKQpDQgMD44fbAdxRabjYU6DU5KD+ZtOS3RVoJRFGcM2PEZt0tx+iAkqiM/hU3UjSnvT",
	"fDQChMRVgmBP0SJbarXBkzdUSiPiFCM38g4JtiKnN6svETGkF8c8MXV5pwcNePk9bH92bRGrrndQTPc9",
	"Mq2BItxh/LXlbqi5my8gRfl+xJ2UTyG5Y2SPxQTIINvx7R14Akq1StsbyhXqHWrVZn7F5LAAd/eDG8hr",
	"2yb99eyJjcnzYbXJvu00naUTuW2pssW0/oAb5cfagbp3DZ/8mJjjVaXVFS8z7+wa4/FaXXkej82Db+yB",
	"1bH0MTv/9vmbd3756FYBrrPmOjMKFbar/mOgcnqJ0iMsNmTGr7ltLAl9+e+dXcJ0HGTXmFDduzE7TcsT",
	"FzHo1vkZnV7vMFsGvfxA95f30xKIE/5aqBp3bWtnJ29t10PLr7gog4E7rDYtVAi41kd+sFyJB7izpzdy",
	"2Gf3KikGpzt9OnZwoniGiczpDeXvG6Z8hnRzz8XLLVrLkUA3fOvohsyTQ5Yk603mDl1mSpGnXSByYRxJ",
	"SPLeu8YMG49ck92IThanx6pFNJZrZvYwuvUWGc2R3MwQ/Tq2dwvlw4tqKX6vgYkCpHWfNJ7F3vF0pzHU",
	"Zjn6CpTw8VENlwe8BOGEh1x/fDWLOwHXjHLMJcjda4aTeqx5eBrc3eX+09qIh/ofLmL68hMHYgyW+7Kx",
	"lAYqauzuXHZ81gfEc8UzDrSMiVgsf/g8q6il8F6AI7Czu/RYuGj5qidpdnHQPSouonKn25PJllr9AWnr",
	"IRpdr4fTRxNT7/Tge9+Ceudm5DYkepWVjkBVU4bmrktqbs93XlRfdjbOlLYuXYuk0UM3prbHTp9uJOAI",
	"Y8fzF8Wb4AU1eEO5pAP3AuvbdW5M6WMbh4ie0vjtsfVrHto1+PWC55dp7dmt6XkbZdXx21rFQuemwFAX",
	"SycsCthq2vpaPRXojbBdMdBezI7VhGnavXXgVuVFqoqVXV/uqzQqMUwtr7m0oeKSZ2i+twHyPLle10ob",
	"iwXUklAWkIsNL9MqcYG7f95RsgqxElQrqTYQVfrxA7FKCWmJigphqpJvKY6t3ZrXS/ZkHnE1j41CXAkj",
	"FiVgiy+pxYIbVFZa01Xo4sADadcGmz/do/m6loWGwq59ESqjWHNbQctPEz6xAHsNINkTbPflP9gjDBwx",
	"4goeu130Kujs2Zf/wOpI9MeTNJPHmndTTLdArhuYfpqOMXKGxnDi04+a5sJUtXScv0+cJuq6z1nCll4k",
	"7D5LGy75CtLhmJsda6K+iE30YvX2RRZUxw2VLSZsen6w3PGnbM3NOq0f0DJYrjYbYTc+kMCojaOnttIM",
	"TRqGo6JwxOGbdYWPGKVTsbRd72FtTFStJQU1xlL9wDfQ3dY544aZ2q25tZd5hnjCfLGlgilZbiOLJu6N",
	"mwsVFKdsot15ySotpMUbc22X2X+zfM01zx37Oxlbbrb45u/DJf8LK1IxkLly88vDFv7g+67BgL5Kb70e",
	"Ifugavm+7JFUMts4jlI89ly+eypHA4fSUemBo/eTEqaH3lffcqNko+RWd8iNR5z6ToQnJwa8Iyk28BxE",
	"jwdD9uCUWes0efDaYein92+8lrFRGrqG30VIFOnoKxqsFnCFAfJpJLkx74gLXe6Fhbus/tO6/YPKGall",
	"4SynLgKU7DncDvdzDPbYFVupy0uASsjV6cL1IVWdRu0r6SuQYIQZF6CrtaMc99mJvMgigkOzBZRKrszD",
	"U3pY+IhfeQXIk16/3LXqwcChZmSGTcc3xrVzU7wLNSZpaNf+U0ikJrJ6Zxrxe992PBDaiTFKpXnhE18o",
	"6qfrgSV4rznayUEWpNYh+1tzIUeiowGKkcg3wBnPlLaCYk8APnEcm9U8v0yawM7dF9PEr1EEdBTJZvZO",
	"tkDr+DvX5zzMlvIeig0YyzdVWvijOZv4A/Iat31NF3dHMpArWRhmhMyBQaXMelcW8Uj2243EyUphSBDG",
	"NSlzpakqIGo6VvUyPPfdkslc1u4aM62UHVsoqkRxErJSlvHarkHaJr4bsExzHxLKUMF7EIk5YqTsrZM8",
	"oZ4iL8vtnAn7NxpH+6BGzjagL0tgVgOw67UywErgV9BWTMfR/mbY+Y0oDNZDL+FG5GqlebUWOVO6AH3C",
	"XnmfN97NqJOf78kJ87l5Pj79/EYieIUCurjFcBKYIc2g8bDEEM9JrPd/xkLWBsorMCfs/FrRIkybz2yc",
	"atTpsagt5fUUYrkE5B4IDl7psF/7IVoT1n7HEPBmWA/Tw/OAAYVlZs2ffv3NGKE9/fqbFK2dfff86dff",
	"OO2IS8brG1EKrrdxM9dqzha1KK0vgMrZFeRW6fjCKqSxwIsBbZG5w8+CEnpZy9wHUDVd4gr9Z989//rL",
	"p//n6dffePtINEvIX0QlTjKQV0Ir6T4F01RDIX7KZja4EcZ+Ah3A3sgMb1cjJghLdq4b+YIaMZ+01HUv",
	"9ljYhuwd4eCXUKxAz8kMj8dDbKCtM+A0f6Vta+5bAuXyOLkopNWqqHOg7PazDt+IliUGS2rKWkfxIXjW",
	"wxMJ7TqDqS5I5BPGXuP16Akp6VJ1IcQzBlegKdeiHegRCYdoXcZyjYE1GGfjQYXicVq019VK8wL284qj",
	"sPqJejRZ2WGEK3XYAD+79n2lu6PZdvTFtI4XZS44HSWWuSmZM8ElRnX692P5b6/o2QENJaUgYcV6bDsf",
	"aOxLgMwImTarLwFQPPM8h8pRevxeFICTNXTS8SxjxnRQ2hzypRVXQMlRE1pmlvMyr0sKNJ5QIa9zXuqu",
	"f66EpVWO9uJnRFpbs3BzLTDQmUq903zaybCoB5aKuQK99S3oWh4qq7tzo3tBJcMkxKyEK0hfloFTLuJ3",
	"6pptuNw2uHBTtMuYRxlLzcpJCcaIBcL2T95iEC2fzpknyOlFOlSMbG4R47kCLVQhcibkb+APesOxAsXQ",
	"Ew1KWiFrfNlCQ7tuEvUM0yr7qZNDCtBjxSHch26WgoTrDraL6KLQjek3ll8CLTskgHrtZl+cajCiqEds",
	"5Jrn3ZUdRoz+8L7nFk51g1pzT3TZY17NIZ86dH1a7pFND1vDXRrlUx2+vA+z4k0KFPM8PBHm7KvOhJYj",
	"l2plVTBlhqoLzdhXoE03gDYyLsPNjrFdi874VItHKzJcHT5LFuKjzOh8W2LHLc0F/ZnSprE/+ACdxA6O",
	"FCpqFmCuhc3X2UjOkGtLLSjnqneFH05J2gWeQlguIbf7rAGTT+ilktFV0Ge3ipfAC8zkbfOIKIOov5RH",
	"PyjmhjaRyiONwItEq/HgKI8PKDTbUMgu4v9Z7Un7Vwr/h773PY5B0HE87tP2dGrjiadNG+dsCwZ3pQmH",
	"js5IpQwv067DMGkBJd9OTYkNupM2Om/wnpLM4U6GOYFC4dfpuPZoan/OpiZ3TfoAN8dzeCriJxD6mPz2",
	"ipcj6U3vodJg8FrD2fm3z994J/FYklM+mpPHrU+Gt5yN1q+4neNdKM0iKA4Rv/v31ZIG8rHYQwo9dJ8H",
	"vY+LWRmr8xZtaAhlHS7o+5BpwSoufAREm+E13Fmf9TfMw9wnW6NFcB8In0uHg6Qg+Y6b9Svu7tjbYZE5",
	"dxMYqd7gnWyHbPGX36Sp0y0hPQl68HxdiO6NvgmMwaCUwL7VclAcgmF1iDX3F/3wp7uYRJUgmu/uvtO/",
	"trS4iEslDmOS2Bo/UxElFh4EGWJ6tKJksciaqOvUw0Dzma8IGZfB25lqIUy2ESuNHDo96ngly8gmnkhd",
	"Jc0g8USd58LjqkOPSDuA91bcLq+9koaZUwT9Fi1Czx30aEceoeplS/OTxTGj44HhpnbE/WHXdBo+l/wa",
	"DU6+VSPLtcWBZ/e/00d3UA08cSqM2FQlxZV4vA3qVRyUS9uGv378aOr7DkX96MGkcHRMw/3HkB67lt0V",
	"OaYjR3+UL9SmKmFcU6koIoiexSSdDmsQRQ8gBvugyvNatwb+fmzoz7wU9DKXwTpEUqkKCw9VVkj3H0xL",
	"VbWl/wPX7j9UFa/7P6KqSCi5oWaIF6wEEgYKWSczp0wWdJX1fVMi68jU9r08U0MtKMGJWo/eSJlCLGkQ",
	"a6GR43Do08/1trLqFNtgk1NjdZ1bQ279aLY+T6m4tuTJ3P3IQV+GONavjCDjplWZhivgY3d2Klnyew3u",
	"ToB2O9eYNQN09vfAU9rfXRrbjMdexX4xitXluSV7l69ohA+5bnj1gWb5hWXsPa24KaDqOrCNWVWHu3Fp",
	"qOTTt7y02agOcXHxAeMJznhpY7nhFuSdPo27bLzyGJnzR0OuH96dLlZ3IEEHMBTZNYjVOg3U9YFi3bPb",
	"AQtt8fe21Q17L4eQrwB4AdpkrecsfbP7FJtNtUPcFMaJtnHT/PKIXZvPSncn32v88rjxZYY2ETmF8HdH",
	"DX2l7B5Iu3p4pE3TYlOhihbcpccr0JQmtjdr+jn0uJ3PHvRMvW+kx1BCRfDtB0W8KZGYSl+mw9fA2tti",
	"i1wWLJrfMOTTiSAWFCMgrd4eU7lBrDJTqgPAOxOrM9dhx5aGZoM9LdU16MzNO4HishsuTC07xSibauI0",
	"HrnwoGAOGHPcRtDAB+2E77J7L9qxe95SXuZKZp3ZH5Ypk+zOkLqyJgF0x+7xTXf3qqBOHipBkUlshVyN",
	"F9m6hO3nxvfOo8C7XnY33NgJwUOB6I2nLapTdu29G2S97irdO0oQu7silh/1ldknztVoGP5G5Fpx9BK2",
	"NSoxpEZIaMvp+psmBtk0uzHl+Rx5aRlho87n2wqaaLFhJfcNr6K3pLlhl3AMn9tfwDbF/1KhTv6ddCzp",
	"2duaNvxlDWWFjKq1gp58VuT7cySZe07Q6f3JN0hAkYsiDix0/x9umdUADx96dQnbrBRLsGIkJ6TEnLTv",
	"YctCs5N70ynGikl0XDto9igpWLUtkMGUpi8r/BLX4WDERzH5y4S/DCvAgt44Ulyra7ap8zXeI/kKQiUK",
	"NM1jyGNvos7oITm3W1HFJzOYiuc0ECU8llyvQDOfg8j8S3uNqX/DBZ6TNkytn2aEEQw85XbZVR/jLSVB",
	"RrwLnWRRlYxEGY6wjEvYnpIPCH8/gpGMF9sYWRiW3PiIS7pT5Y64+MsOer3suM/o/YhOvZxm+ffoRnPr",
	"84asA91ow7I2+4KHcOBxqA0M4dw/TDze24S5pYVtXx/wcHPHXbd2sY/rdtyViIyeNgQfZ2C4VPbrl78y",
	"DUvQmIr9xRc4wRdfzH3TX592PzvC++KLtOP9obzGtEd+DD9vkmK6L5T1PGgk+A1Wul5SlIUTckpifFFZ",
	"9uLzZcEwjxJVFo7hylCqCpKtaYMjpGO9HA2ruuQUly6kBN3ptE8hBDJP2RvpTbH45/mNTLWNVUxsHW1H",
	"6gWr6GHp45526z1VQmUociz4cOyIbcmIdkRKLb/LiK8or70ZEYdagr7LmOd+jD1eDVpJTfXByFgsQpoj",
	"KsWE4S41NamP4TWhUMChyb2A32te+twSiZkc51jEIL8ESQ8FOc7nn4djIE2tvcnarRXHc0vxw6hYwJu2",
	"ybFPBmVTz3DonLwTPvzSp7ViQQ7q6lSPwiFHTRe5d+3dtXOidk+OxXt8w1CcDQObdl3HkIz1ZtwG2SvK",
	"GYdBY4Gq0H9k+Lb6fPu6e7p0U1uDqyetqebwo9cvHzOsTz1WKTi6fO0GOy6Av9+KKFd6sJZ+qa5DVrEE",
	"GIs972XBsCWMuCp2lVlfXrUV1rFVP15w5yr3TGz9jhssme6b+xSKzzSbtbNI9vplUuXolBY8uAz3fLbS",
	"qk6nGa6o3GUvLRsvBqh00aWeQotOn379DSvECow9Yf/G2kMkfIePq3SxyUT7aEvnbSiGC2vq2ZE+5DNn",
	"ojnXHqGDTDbhM2hwmIfH8DHVX+cz1Esye5PKxnw90FlY5dONsBRbxG86MZr3kYMppNWcmG+mlstkecIf",
	"8fc2TkMHnqxhiPU9uPIlbDUcq7t8j53JizXJecqr5qmD4xhPCWMvb5U3iePz1dOsPUEn7I3rzUAulXY3",
	"7U2Nnmi4wTJF3iEca6lYu8e2rxBi2R75B2iFhgTJlMxhIANFtNmYEsRz1OeNT3lza2jqEDbGykdnqM3M",
	"aZGP6Z46PGqsllaQ+uO28edoFysneNyi/70WZYIKKuW+m3gdcyYVo/d145aUg9vWoKI1+xzGDiE97DGP",
	"a7EW6SAURwkF1bVuS5i3Vop8zWX7YOjugtdDmtzvkb/BQxCJY36fhbkn1vlpIwelGsllkv75EXdBwWpQ",
	"jUXtYRdc8e0GpD2S872j3hQ7gw/m6ekbgB65AYTeu54fvIRtZlV6bCBnE2nmzVULbafEbSMY5yP3niYh",
	"JDy12uqudIKcirCs0ckbuTOD7dRf6ZoAt0vYttFY8UtPdG064pZFYjFtGT8XG2jvJaTIpVQgsZdIpOtl",
	"+l5LBTyIZf9tApxmmGmqMCNUQX2naWJv329EtpHzd1CU44hTEIXJYeL4RJD/toJuFkrntcZuRjbaDE7Y",
	"y6aiAQZGUmJoW+aA7Fn98ElK32+KRwod7F5cBxs2RlheXHyoKCknwQh8A9KNXJuhluSb8Hy5at58ThiC",
	"QrObJei2XcoYE1ou9R9tw6EdKDQbPheeaGVshQ6jMUy3UaIV386CMjibzxxY7h+3bPfvUv8xw3e0S3yD",
	"rloOg0TTB9jTRIbzJPIxZ91ba0eRbE5iS1o7LKCTbxf5LDP0GEVS9VDzZGxUp2qt7Q8veFme30iaKZH0",
	"REx3LJiYngPzJWAaDu3YuI8nDlYrzx1i7wzPc6fiFW1+crTOvxnWLzpPWcvDsvOpoNJ9OXTi+feGNrle",
	"jcKNBquhGipyxvWqploZDwDfDghGn1oSha+JNXwvyKtsxBZqDQVT2tedEUtfVGis4PWej4DQs/lv1Erk",
	"rWrYpkyPUPrcXX6g8qVnlczyJtTdyUl3w7SKXVCI+MXshL2mAgcaeEEMVgsLqecoOvBjGb9rwGc2A0Vn",
	"DXajx4ZO3CnqPPdhkLI1YExF4gGa/9QHTnhl6hGMjXEl0qq6SPoEGHrhZmoDfAhJOZdS2f8gPB34wEm3",
	"Knic2FFVzUsnJbh9/73GAF7HsHHYERut0iBWcupN/yUPgsD00ZUUB10u5WtjxYg3AynRqOPHMVH0vNBg",
	"9HQ3LzIly+1USkKCvTZ7Mfmwf1MZzbTJQMZDGZUG3w/EwGbeRRAiYQdV9j7hO+I9mjs/QtMboMM1dvXt",
	"ZDwlnq2JZWF/6F2aWeTlnNTMqE516QAn/qQhC/IzcCxZUAnruk2gupDP2R+glb+sNkO5A9Haxn0dU1/M",
	"7yTRqak3bwbd+lMeWM+fgJ/QDkffybi4+HDDB1oGrukO+sVxT57sxPGrkXrqMY6Dq8wXUL/jQwk048TG",
	"tkmgQ48YL4peaek47ouYTFMamXbbF5ZHYuHXIzXcJ7G5nMTmxPidciHX4Xbo3wRPsk9/m6TCLNdhx6lH",
	"KtF0PGmyfXBjOPU+h78JHtiLNMIN+a7EEWadII+JZ3A4RY4+b14484tTzfpOmGch3tEeftfBjlMuAzcL",
	"vrngPY4pzUkmkmsbXt3rIzs7mUe04vGYAxiNOGiL8HjBHMaLCtfiAG1og1M1gzMyoTEeCHoYPY1B/Nov",
	"vcLjqtZmreqyoMLWG6wb1F4xE8jxr2E0amH7TAlFcWDQRZz0baIZ4r1m7LUbmZfXfGuCnbYlrPHhwq5S",
	"+euEjTAuLEbG5fTe6JwixyEXlQBpm5CbGC+Oxsetm+mBvZXUMR2qeCSuGqOFj8Xn7fsyXc9bcLz5lzJ4",
	"JKDnfpt52bUW0MDBEu3avAhjB4galEbybHc9idRrQ82W7uB53jU6yey8WfFQHke9iMnRNOPcTfZfRR/x",
	"yUjXyCHtLdeXHRnIOw/RyxWVN+iM2lExoqIEUw+zp6tVl96T8a59iB7jwBu/gk8CKNh7Lgu1Ya9CJZdH",
	"P79/9ZhpMHVpA5GFKpyO+PxKPm3p61HAK730kJ9FCTQN+EJ6h8pKGKsTdssHh2rwqn4yMUVZWBrbBh2R",
	"v5pKk3WKFDrohOeCaSk0fLN/bMbLolscztQLfApHSKogueA2x2CWwRLMxNQ7Ahxcm5JAxSiHu0K634FB",
	"cP2J6cxS9c7P50ZAO24Swbs6zT294+ZQ9um7Ef/0Mx2nHpJ22GZOREUrHT5D8f6e4L+TkhVNQalbTvsw",
	"/gGmVtnqRpS2T6HJJjA08iPsjDjtjjfybrPXs3ASfMFFDDUuNyFKfy9bWs3IP7tPT7iVkfKzrGVhelvY",
	"PiU84X6d1H286hPaTHpyx5SCfTWBTh5tdyXot/R5KG0Kde+1cHxWix7Q+lGWW1+RrF99vt3KSqsrUaQe",
	"8S3VSuSGLDCHOozfhL6389mmLq04cpy3oS95sNPiUKy8KJQF1wWD4unXX3/5j26ljs+IXQ03KRnd48Hy",
	"RkZuRd7VYxvo9mBiAZUnKzVkWaO+Nr1qXQ+Nb22ODwG2wXOHuchwIePZ8MHO6uNDFlvGI1JXTm0vrWh/",
	"mrvf1tysW9YZPeaIj2xy5vlVP+gPU44+zWvx0aHI7hSX0TseY4yjPSSfw9mI2SPRw74s8W3ESYZvHXoQ",
	"yezq6CXkYeJeVyU43a7lgaNVngJqSOSHOc/E8E3keLz0rmMDfLxJOU2EinI6ZbLVuNBA0K7qiODgwf6c",
	"xetK1elbazBuRengm7VOFh+ZKr7YFm5J1AA+CLdnvT3tFSvBfRvVcKvLT1RfaYoGPo/CDuk4rGmVeaw8",
	"A9snL6+pldavkTauPUclQferThLqRHUvzvv3H8S1jQWkmSqEpJ2HGDT/7FQofsBeE8W3cYyoukqqWuOr",
	"/pG719en7m7R3RPzbzEnYKmoxoG0PMe7Ab0YOXvuR5r5Bwpna2sr8+z09Pr6+iRMc5KrzekK85oyq+p8",
	"fRoGoqf74zJ+vot/nMVJ2nJrRW7Y83evUS8WtgRMkSjgBsFpuMfs6ckTqv4Ikldi9mz21cmTky/pVKyR",
	"FE6prC09j4dwOEJB5fd1gYnolxAXxsUHQbH0LXZ/+uRJ2AZ/M4wckqe/GeJh+/lI42lwk7sb8Qg9aI+j",
	"B4mHFPSTvJTqWrJvtVbEE0292XC9xTxoW2tp2NMnT5hY+nK+VP6DO83sw4xycGe/uH6nV09Po8iw3i+n",
	"f4agDFHc7vh8yqvKZJHLeGf74HefbJXI29u/z14z9N5HC23T80W/nv7ZdUrf7tns1Efgh7b9ReLfp38G",
	"q+/txKdTX0RiqvsIfPRowemfFNhMVoRoqnSnDkf+09741aGxVbvjOHv24c8eP4AbvqlKQFYwu/2lIcOG",
	"k3hyvJ03v5RKXdZV/IsBrvP17PaX2/8XAAD//8PSm4sY0gAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
