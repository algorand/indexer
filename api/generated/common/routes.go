// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1PEvBrjOt4vbn27/JwAA//92Y59X1LEAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
