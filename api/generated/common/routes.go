// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QsLK8AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
