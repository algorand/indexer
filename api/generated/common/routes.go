// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	HealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.HealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
