// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//vtQxPLewAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
