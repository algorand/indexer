// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wcAAP//8MmPm3npAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
