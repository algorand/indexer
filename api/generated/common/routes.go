// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
	// Gets the OpenAPI specification file.
	// (GET /openapi)
	GetOpenAPISpec(ctx echo.Context, params GetOpenAPISpecParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"spec":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOpenAPISpecParams
	// ------------- Required query parameter "spec" -------------
	if paramValue := ctx.QueryParam("spec"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument spec is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "spec", ctx.QueryParams(), &params.Spec)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spec: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenAPISpec(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)
	router.GET("/openapi", wrapper.GetOpenAPISpec, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
