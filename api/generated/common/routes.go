// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//mxkAc+swAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
