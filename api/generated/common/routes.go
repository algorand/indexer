// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/2KA62y7uP14+/8DAAD///HUzzcioQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
