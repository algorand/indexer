// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
