// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
