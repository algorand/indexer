// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pVKXTR3/YoDrbLu4/Xj7/wMAAP//GbtSA7OZAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
