// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VfyLAa7z1ezmt5v/FwAA//9sOg1tFtAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
