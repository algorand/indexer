// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
