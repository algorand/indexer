// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
