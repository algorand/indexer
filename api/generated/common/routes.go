// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2dTxLwa4zraL24+3/z8AAP//tfyLkHWaAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
