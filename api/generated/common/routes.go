// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"75avVqCzHoP5/wEAAP//Z01abaXfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
