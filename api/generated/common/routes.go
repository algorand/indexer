// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
