// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//Ltl59z6zAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
