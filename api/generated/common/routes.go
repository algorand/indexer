// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
	// Gets the OpenAPI specification file.
	// (GET /openapi/{spec})
	GetOpenAPISpec(ctx echo.Context, spec string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "spec" -------------
	var spec string

	err = runtime.BindStyledParameter("simple", false, "spec", ctx.Param("spec"), &spec)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spec: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenAPISpec(ctx, spec)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)
	router.GET("/openapi/:spec", wrapper.GetOpenAPISpec, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
