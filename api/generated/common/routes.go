// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/Y/cNrLgv0L0PWDtXGvGcV6CtwYWD147vhixE8N2ssB5che2VN3NjJpUSKpnOrn5",
	"3w+sIiVKotQfMx57gfxkT4sfVaxisVhf/HOWq02lJEhrZk/+nFVc8w1Y0PgXz3NVS5uJwv1VgMm1qKxQ",
	"cvYkfGPGaiFXs/lMuF8rbtez+UzyDbRtXP/5TMPvtdBQzJ5YXcN8ZvI1bLgb2O4q19qPdHMzn/Gi0GDM",
	"cNYfZbljQuZlXQCzmkvDc/fJsCth18yuhWG+MxOSKQlMLZlddxqzpYCyMGcB6N9r0LsIaj/5OIjz2XXG",
	"y5XSXBbZUukNt7Mns6e+383ez36GTKsShjg+U5uFkBAwggahhjjMKlbAEhutuWUOOodnaGgVM8B1vmZL",
	"pfegSUDEuIKsN7MnH2YGZAEaKZeD2OJ/lxrgD8gs1yuws1/mKdotLejMik0CtZeechpMXVrDsC3iuBJb",
	"kMz1OmOva2PZAhiX7O2LZ+yrr776O6NltFB4hhvFqp09xqmhQsEthM+HEPXti2c4/zuP4KGteFWVIucO",
	"7+T2edp+Zy+fjyHTHSTBkEJaWIGmhTcG0nv1qfsyMU3ouG+C2q4zxzbjhPU73rBcyaVY1RoKx421Adqb",
	"pgJZCLlil7AbJWEzzcfbgQtYKg0Hcik1vlM2jef/pHya11qDzHfZSgPHrbPmcrgkb/1SmLWqy4Kt+Rbx",
	"5hs8A3xf5voSnbe8rN0SiVyrp+VKGcb9Chaw5HVpWZiY1bJ0MsuN5vmQCcMqrbaigGLuxPjVWuRrlnND",
	"Q2A7diXK0i1/baAYW+Y0dnvYvOnk4DppPRChz3cxWrz2rARc40YYov/ttd/uRSHcT7xkwsLGMFPna8aN",
	"h2qtSrfZzZxFkoyVKuclK7jlzFjlJMRSaX90k/iY+/6tNsJyJGDBFrt+S1l0Rt/fx60PXFelcpgteWkg",
	"vV4B+3iREMv4kORlOfOi12kMfsqs+YFXlckQ48xYbiFuU1WuhVQSEidp8wPXmu/c38bunLqAMmLWUifL",
	"S2Ugs2qPJhGUA1yw6OyPV+wovYK9XwPDyd0H0qmQs6UTN2W5Y9YTwDEEC1rEnIkl26maXeHWKcUl9vfY",
	"OJ7eMEd8JFlH5XF64xhzDxYjwdoLpUrgElnb65CZo9/4aVYGvqbm7uDCCYrmoJuzAkpAJFsmxF+N1WqH",
	"yDtWmDNVOaKr2g43hyz8sPS5v1eQcUbV1RiTPUiXYiPsEN3X/Fps6g2T9WYB2hE8nHxWMQ221hKJrYHl",
	"SLNFZ+dXfAWGgTsYBenaOI8TXFJZpoHn63GpRDDtEUQbfp1pVcviAJXSMqXjI9tUkIulgII1o4zB0k6z",
	"Dx4hj4OnVXQjcMIgo+A0s+wBR8J1gqxue7ovSKCIqmfsJ3924FerLkE2RwwJS2CVhq1QtWk6jcCIU09f",
	"5qSykFUaluJ6COQ7vxxOQlAbf8BtvHaVK2m5kFC4sw+BVhZI2ozCFE14rAq54Aa++c8x/an9quESdkmh",
	"22cAQqe5s67dF+o7jUUzw55NfSAf0hkb898k7x3Ed9goI7GR0JHcVy9U0vaBTv8DLATx3HQ7zW5lKaAx",
	"wvE2thS9mT7epcSIVUYjDnaJWL13Z/FSlHhO/+Y2R6Bsbdy51KVtOLmNWEluaw1PLuQX7i+WsXeWy4Lr",
	"wv2yoZ9e16UV78TK/VTST6/USuTvxGpsUQKsScsBdtvQP268tKXAXjfopqYIn1MzVNw1vISdBjcHz5f4",
	"z/USGYkv9R+ke+GRaKvlGACp2/IrpS7rKl7QvGM9WuzYy+djzIJDTslDlB2mUtIAcu1TUiTe+t/cT07k",
	"gUSJHukC578ZhTeRduxKqwq0FRBb69x//0PDcvZk9j/OW+veOXUz537C9vJnx44y2sDcehFGossLNVIG",
	"NlVt6WhPSYdmO39oYOvP2ZJFLX6D3NICdcF4AJvK7h46gD3s5u5Wy3S0+gPXra+Zf8R1pMM9w0N6OPJP",
	"xt+eKr4SEhGfs6s1SLbhl04qcKnsGjRztABjwzFP4o9O/sbM6HUFr3CfzVI7JkFTc2uitlR75dTdd6ju",
	"3gWJe3evI2idAukvyjeUHyzsXbLA6o5oP2l/vbj4wKtKFNcXF790blxCFnCdpsdHJXapVlnBLT+NR1fP",
	"XdcEg37OPNS1bd8VA90t8xxBhfs9Ue9que54s50kY/+SrIldcXuhagzYf/KSy/xOjtOFH+pgCr8WUiAQ",
	"35Gp6y8yBzI3S3kXJPareycbmczWB2/hv4ib2sONM+DWpL0rkh5EyHu+EeKUd7FIn4rx/+L4u+X4f5Yq",
	"vzyJllOkwlH3zPyt1krfARcF/b2H9Xy2AWP4CtL28XglQ8NDli4AjGQHhwJaEb8DXtr1szV8hMWMxt6z",
	"pO9bg9kdLOxH3VaRbW8f/hFWexTy7rBH7oRoGvO5r97nI5Q6S364LO/QtC/RD6exOY7IN8FGHBuBE5Fb",
	"PspSSHIYCCUdpbgPRCIXzoW8kM9hKSR6ZJ9cSCeHzhfciNyc1wa0vwScrRR7wvyQz7nlF3I27x+EY/4U",
	"jDXx0FT1ohQ5u4RdigoUBJM2uZQrdXHxC7PK8jLyN0ehMd7L1xqMhyxHE2SOM1RtMx9Slmm44rpIgG4a",
	"HyOOTDE6U7POmR+bXKE+ZM2Pn94GgziPEYtT2bM3mUQ4jJDdeBVH3x+U9c5DfsWIv1htwLBfN7z6IKT9",
	"hWUX9aNHXwF7WlWt0fLXNrjGAY1uizu1gCLiSM8Mrq3mGYYDJNG3wCuk/hqYqTcYWVKWDLt1Y3i0Wmm+",
	"8ZEF/eigCQIQHIedZRGGiNw76nUzj5TBIQXdJyQhtmFrKIfxRcfSK7pFnUyuPTexidDNi4sPGJUZKNPE",
	"Ca24kCacCkaspNsEPuBtASx3WgAUZ+zlkqFUm3e6+7BrLzEb0SEMxaix9w5HdICznEuMXasKjBYSknG5",
	"67vcDFgb/Jxv4RJ27yP/+ZF+WB9sw/cciUXthmuOxZbC7IobtlHog81B2nLn43cSrJkGphbSUiBBJxps",
	"RGjgronCtNzGiUXISKBbFLXEq4qtSrXwkqZh0ScNj4Y+40LljQPA3IFASV6cuoFz6YXgOrEQtBHHYv2O",
	"R9SNd6ttOIneySy3FNpgbBhwf0bweIucwHk+cG0Iyr/WgFqZ0hjA1WUpE7Z0iumbuJT5rOLailxUh1nR",
	"afQ3nT5ukH1He/IwV8v+mT04UpNHCDXOFtykj29wXxwH1oaCGh2OQdCFmUhbRgzOGAah+K26KDHOsYmQ",
	"JxpzjQGYAW2KGB8DLb0vQMtWpwpgdFckVt7W3IRYTAwoDiLiIDVnhHnfuwVABnb7JuLeWG8Vbt4Stnxs",
	"/cfjX17KwskOMN241Ca6JRwrw/DgEEZGmUAhCiaEvoR4F/ev4/a6LJlYslpeSnXllONjIlrmM6f51Wki",
	"KYman9tzK1oOahzYxwP8NxORzUH143JZCgksY6JZA4trQLHfKhcUYtvuTz8HuIvBF8zxoBvg4BFSzB2B",
	"XSlV0sDsBxXvWLk6BkgJAmUMD2OjsIn+hvQNDxU81PUonlbINDfmQS44DbNzWCJgGLC/AJAUlsuEnDN3",
	"z9vy0mkrVpHy0gySDl9/0FG1vZpnHo7p8WnrA2GEp9hRONG5dwo2sbIYgE5rshMQT+stKRIYXC/SItq1",
	"mgjS3zv1iK4wtlYPEPFbANA3ezYRgf7Ku/dqOjzRWtE+b2MuSYykuX2MY5J0GVmxoaWiCa160z+2k/aI",
	"TitGTRb+fh2pZymR7HZFrqQBaWrMbLEqV+XZwBBhoATUbLKOJpFdwi59hwEUsO9Ct8hIwR6IpbtSPIxU",
	"Fw0rYSx0sk+agNg23neHGRsVtxa0m+j/PPjvJx+eZv+bZ388yv7+P89/+fM/bx5+Mfjx8c0//vH/uj99",
	"dfOPh//9H7ORUwOySiu1HMfOVnrp8HurVCOVsSPDjh007x2DrbKQoYKabXk5Em7jGr0weHl+gbpsUmHo",
	"EJtR8pQYMT3itJewywpR1ml+9fN+/9xN+0NjbzL14hJ2qBYCz9dswW2+Rr2xM71rMzF1yfci/IoQfsXv",
	"DN/DdoNr6ibWjl26c/yb7IuerJ0SBwkGTDHHkGqjSzohIPGofw4leXrGk3ppcxau4dmUlXWwmYow9tSF",
	"KYJi/FSikZK4dAOcxrHAaDhMUBI2ysYyA4wOveCi9Z/Og2iaK97c4D/6RTbGLr7M+lHSt1n/8RboDYc/",
	"FL27Cl9E6h1jpyFNacBguHH8YHuYKzIdD3ManJIczN+0W6KrAqUsyhi34TZqk+YOI0xQQXwOn6qbo7Q3",
	"zUdjQEhcJQj3FC+ypVYb3HlDpTRiTjFyI++wYHvk9Gb1JSKG/OKEJ6Yu7/WgAS+/h93Pri1S1fUOiumh",
	"W6Y1UIQ7jL+23I40t/MFpDjfj7iX8ykkd4ztsZgAGWQ7vr0jd0CpVml7Q7lCvUOt2syvmB0W4O5+cA15",
	"bdukv549sTF53q822bedprN0IrctVbaY1h9wofxYe0j3ppGTH5NyvKq02vIy886uMRmv1dbLeGwefGP3",
	"rI6lt9n7b5++euPBR7cKcJ0115lRrLBd9W+DldNLlB4RsSEzfs1tY0non//e2SVMx0F2hQnVvRuz07Q8",
	"c5GAbp2f0e71DrNl0MuPdH95Py2hOOGvhapx17Z2dvLWdj20fMtFGQzcAdr0oULItT7yo8+VeIBbe3oj",
	"h312pyfFYHend8ceSRTPMJE5vaH8fcOUz5Bu7rl4uUVrOTLohu8c35B5ciiSZL3J3KbLTCnytAtELoxj",
	"CUnee9eYYeORa7Ib0Z3F6bFqEY3lmpkDjG49IKM5kosZol/H1m6hfHhRLcXvNTBRgLTuk8a92NuebjeG",
	"2iwnX4ESPj6q4XKPlyCc8Jjrj69mcSvkmlFOuQS5e81wUk81j09Du9vcf1ob8VD/QyCmLz9xIMYA3OeN",
	"pTRwUWN357Ljsz4iniuecaBlTMRi+c3nRUUthfcCnECd/aXHwkXLVz1Ji4uj7lFxEZVb3Z5MttTqD0hb",
	"D9HoejWcPpqYeqcHP/gW1Ns3I7ch0ausdAKpmjI0twWpuT3fGqj+2dk4U9q6dC2RRjfdmNoeO326kYAj",
	"gh33XxRvghfU4A3lkjbcM6xv17kxpbdtHCJ6TuO329bDPLRr8KsFzy/T2rOD6WkbZdXx21rFQuemwFCX",
	"SmcsCthq2vpaPRXojbDdY6C9mJ2qCdO0B+vArcqLXBUru77cV2lUYphaXnFpQ8UlL9B8bwPkeXK9rpQ2",
	"FguoJbEsIBcbXqZV4gJX/31HySrESlCtpNpAVOnHD8QqJaQlLiqEqUq+ozi2dmleLtmjeSTVPDUKsRVG",
	"LErAFl9SiwU3qKy0pqvQxaEH0q4NNn98QPN1LQsNhV37IlRGsea2gpafJnxiAfYKQLJH2O7Lv7MHGDhi",
	"xBYeulX0KujsyZd/x+pI9MejtJDHmndTQrdAqRuEfpqPMXKGxnDHpx81LYWpaum4fJ/YTdT1kL2ELf2R",
	"sH8vbbjkK0iHY272wER9kZroxeqtiyyojhsqW0zY9PxguZNP2ZqbdVo/IDBYrjYbYTc+kMCojeOnttIM",
	"TRqGo6JwJOEbuMJHjNKpWNqud782JqrWksIaY6l+4BvoLuucccNM7WBu7WVeIJ4xX2ypYEqWu8iiiWvj",
	"5kIFxSmbaHdeskoLafHGXNtl9l8sX3PNcyf+zsbAzRbf/OcQ5H9iRSoGMldufnkc4Pe+7hoM6G166fUI",
	"2wdVy/dlD6SS2cZJlOKhl/LdXTkaOJSOSg8SvZ+UMD30ofqWGyUbZbe6w248ktS3Yjw5MeAtWbHB5yh+",
	"PBqze+fMWqfZg9eOQj+9feW1jI3S0DX8LkKiSEdf0WC1gC0GyKeJ5Ma8JS10eRAVbgP9p3X7B5UzUsvC",
	"Xk5dBCjZc7gc7ucY7bErtlKXlwCVkKvzhetDqjqN2lfSVyDBCDN+gK7WjnPcZ3fkRRYRHJotoFRyZe6f",
	"0wPgI37lFaBMevl8H9SDgUPNyAybji+Ma+emeBNqTNLQrv2nOJGayOq9acRvfdvxQGh3jFEqzTOf+EJR",
	"P10PLOF7xdFODrIgtQ7F35oLORIdDVCMRL4BzvhOaSso9gTgE8SxWbEBY/mmSh+zaDimnYi72gHadHG3",
	"EQO5koVhRsgcGFTKrPfl647kmV1LnKwUho6cuPpjrjTV30OdwqpeLuWhmR6TWaNdGDOtlB0DFJWPON1X",
	"Kct4bdcgbRNJDVgQuY8J5YLgjYMOFBJZ7LWT8aFyIS/L3ZwJ+zcaR/vwQc42oC9LYFYDsKu1MsBK4Fto",
	"a5PjaH8z7P21KAxWHi/hWuRqpXm1FjlTugB9xl547zLegqiTn+/RGfNZcD4S/P21RPQKBXRFivEkNENA",
	"f+PLiDGe0wHa/xlLRhsot2DO2PsrRUCYNnPYOCWk02NRW8qgKcRyCbhPER28PGG/9kMEE1ZZx2DrZliP",
	"0yfYbdcyQ/145BJpyVJxLZ9RI+bTTroOot7W2NCNNTBUCcUK9JwMqbjsYgNtprjT3ZS2rcFmCZSN4SSb",
	"kFaros6B8pPfdfgxAksMQGoKE0cefuShUOS+hTMYW4JMdRdyVHAfkZolVRdDpB1sQVO0fDvQAxI6EVzG",
	"co2hERgp4VGF4mFaONfVSvMCDvNrohD8iXo0ebVhhK06boCfXfu+2tTRTTonfvqUjmLP3SkTy/KULBtV",
	"vd6OpSm9oOrwGkrKFMHC4th2PlCslgCZETJt/VwCoGzneQ6VY+f4WR8AJ6hIiUVRgYmt4Wx1FJZWbIFy",
	"WCaUgSznZV6XFA86cdJf5bzUXTdKCUurHIPFrz20JkHh5lpgPCpV5Kb5tBOAUQ+s6LEFvfMt6PYUCmC7",
	"zaF7vv9hrlhWwhbSdxrglDL2nbpiGy53DS3cFC0Y8yixpIGcdBV0LBO1f/IXuwh82kye66aBdKQYWdwi",
	"pnMFWqhC5EzI38Dv5kYsBY6hSvpKWiFrfIBAQws3nRMMs9/6GW5DDtBjOfzuQzeYXMJVh9pFpM91Q6+N",
	"5ZdAYIc8PX80HkpTDUYU9YgpU/O8C9lxzOg371tu4Vw3pDV3xJc9CdVs8qlN1+flHtv0qDVcpVE51RG+",
	"hwgr3mSqMC+oE9GovjhIaDly91FWBYtTSI5vxt6CNt04x8gGCNd7xnYtOuNTyRStyL5w/CxZCGMxo/Pt",
	"SBy3PBeUL8puxf7g4ygSKzhST6YBwFwJm6+zkdQO15ZaUGpM76Y1nJJUCNyFsFxCbg+BAXME6EGJUSjo",
	"s4PiOfACEy7bdA9K9OiD8uAHxdzQJtJrpBGohbZqDY7y8Ih6oA2H7GP+n9WBvL9V+D90kR6wDYIi42mf",
	"NntSG888bXYvZzswuCpN1Gq0RypleJn28IRJCyj5bmpKbNCdtFFsg5OLzhzuzjB3oFCUbDr8OJra77Op",
	"yV2TPsLN9hzuirhSfZ+S3255OZKF8hYqDcYpjIyz998+feV9eWO5KPlo6hS3PmfZcjZaZuBmjheetIig",
	"cDH87p/BStoxx0LEKELMfR70Pi20YKwcV7SgIeJwCND3ISCeVVx4R3WbiDNcWZ+cNUyXOySoviVwHwmf",
	"8oSDpDD5XyBBi/y5WIGxqfDtAUDfcbN+wXOr9G5YPcxdEEbS8r335BiifPlNmp8dCOlJ0DXjE/7RmLqs",
	"Jen7TcQDRhsEga+Wg6x/hmn/a/71l4//7+Ovvwl/Pv76mzjFv/nurkH0NZXkH9fAGwabsDV+puo4LLz0",
	"MOSN0VKBxSJrwmlTL77MZ77UX1zfbG8MvTDZRqw0yvT0qOMlCiNjZyInkXSJxNtjXm6PKxs9tu4g3oO4",
	"Ba+9qYaZU1vgNRq3njrs3ziOGOHqZcvzk1UPo+2BcYR2xK5t17QbDrIgdrdp0oYI7kCrRmazxZFb77/S",
	"O29QpTnB1EZsqpL8/X7ZB3UEjspxbMMSP36U612HCH70ID842dd897F9p8Kyv1LCdETfj/KZ2lQljKsm",
	"FUVq0HOFpMRhbZjoYbpg9VN5XuvWHNyP2fuZl4JeTDJYH0YqVWFBmMoK6f6D6YKqtvR/4Nr9h6qVdf9H",
	"XBWdKW6oGdIFKzSEgUI2wMxpjwXdXX3f1IlzYsrxQVJoqPYkJBEC0AjSRPk4TDWP1c6oNMHQ15rrXWXV",
	"ObbBJufG6jq3htyt0Wx9mVJxbalSwv7i8/0jwEluZQSZMa3KNGyBj13SqZTE7zW4SwAa6lxj1gzQWd8j",
	"d2l/dWlsMx4TE3tRKIaS55YMXL7SDD6wueHVB5rlF5axtwRxU9jSdWAbs6oO5YyWDDRU8klSXtpsVAW4",
	"uPiAft53vLTxueEA8u6nxrkyXhGKjPRHn6au6+mc4uCCIrsCsVqnryZXR56+XioOJF27zK9bDaz38AIZ",
	"6oEXoE3WxuOlb1wE1/06o6j0gpvCuBNo3GS+PGHV5rPS3ZUPGr88bXyZoa1CThH8zUlDb5U9gGjb+yfa",
	"NC82BX4I4C4/bkFTls3BEuTn0ONmPrvXPfW2EfLDgyTC7zAs4kWJTpP0lTV8DRK4rVXHZcGi+Q1DcZqI",
	"TEBpD9Lq3SmJ72KVmVIdgd47sXrnOuxZ0tBssKalugKduXknSHzaBm0W7yhsfJf9+LRj9zyRvMyVzDqz",
	"369gpWMyQw7Jmhy4PavHN93Vq4LmduwpiBt9J+RqvM7QJew+N9n1cySeeh6aaSmcb9DeGdlP45AZ9/8t",
	"5FbpTki8Brj/4I9L2GWlWIIVI3HFJeY1fA87Fpqd3ZlgHUtI7tid8YpWUhhWm2Ttruf4ZYVf4lxuRoyI",
	"CQQm/GVYARb0Rkhga3XFNnW+Rp2XryBkM6MVEIN5ehN1Rg8JXt2sfB8Qayqe00CUNFNyvQLNfB4L8681",
	"NVbFDRe9N6n7oeroXuUpm/C+HOvhW+xowY8yrROp3AGMS9idk4Eafz/h1BhP2B4BDNO2PyJIt8r+jgsI",
	"7OHXy45tn2qQd2ouNODfoY3fwecv3Ufa+IelEQ5FD/HA7VAbGOJ5eABkvLaJq2GL26EOquHijvuV7OIQ",
	"v9K41wIFPS0IFvhmCCr79ctfmYYlaEzn++ILnOCLL+a+6a+Pu58d433xRdoreF8uLVojP4afN8kx3Vdu",
	"esZ6emTfYLXUJbmA3SGnJAY/lGUv8lQWDHNxDFoeJAO5hVJVkGxNCxwRHWsuaFjVJaeISyEl6E6nQ5Jp",
	"6Y5ur6U3G+Gf769lqm1s88PW0XKkXkGJHic97XmgXrl7SmXOMWn41BHbtON2REpPvM2ILyg3shkRh1qC",
	"vs2Y7/0YB7w8sZKaasyQYUuEVBm01hKFe6/3h/SZ8CJFSAJuoorh95qXPmpaYozye0yEzS9B0mMTTvL5",
	"J4YYSFNrb15zsOJ4DhQ/jIoPeNM2OfXZiWyqlLvOyZLqY8N8ahQmdVNXp3oUjjhqulCya+/09on6DzkW",
	"gPANQ4EfjLqYfFXADe6YUG/GDTG9wm5xjCYWOQn9R4ZvKxi3LwSny3+0dVx6pzXVrXzw8vlDhjVOx6pN",
	"Bq+AMAegHRdRPgwiyrcbwNIv93IMFEuAscDYXi4BW8KIWXVfqd7ltq3Si636wUx7oTwwOeo7brDsrm/u",
	"g7g/04yoDpDs5fOkytEpT3V0Kdf5bKVVnU6gWVHJtF5qH14MUOmitA6KYjh//PU3rEBb+Bn7F9avoMN3",
	"WKC/S00m2sL/nfdFGALW1EQifcjH7kdzrj1BBzkawsfw4zD3T+FTKgjOZ6iXZPY6lWf0cqCzsMonPGA5",
	"n0jedALI7iK7SEirOQnfTC2XyRJXP+LvrU9ZB5msYUj1A6TyJew0nKq7fI+dyZQ/KXnKbVMu+zTBU8LY",
	"6y3ldWL7fPU4a3fQGXvlejOQS6XdTXtTo9cMrrHUhXdexVoq1n+w7UtWWPpB/gFaoSFBMiVzGJyBIlps",
	"zFfgOerzxifdOBiaWlZNZvSDd6jNzAnIh3RPHW41VksrSP1xy/hztIqVO3gc0P9aizLBBZVy300Mx5xJ",
	"xeiNxrglZZe1dUwIZp873GGk+93mcT2/Iu0wd5xQUG3Utgxua6XI11y2j87tL5o65MnDHooaFBNPbPO7",
	"LO46Aeenre4q1UiihfQl7N0FBSuKNBa1+wW44rsNSHui5HtDvcnPj48u6ekbgB65AYTe+56wuoRdZlV6",
	"bCBrPWnmzVULbackbSMc5yP3niZaPTzX1+qutIOcirCs0dMVpU4G26m/0jXBOJewayNH4tdC6Np0wi2L",
	"jsW0Zfy92EB7LyFFLqUCiYOORLpepu+1lAROIvtvE+g0w0xzhRnhCuo7zRMHO88ito28Z90HSk7bBVFI",
	"D6auTsQT7yrohsh3Xvzq5oSizeCMPW9ydTGIi7LW2gResmf1Q72o4lVTgEzoYPfiOtiwMRrs4uJDRRkD",
	"CUHgG5Bu5NoMtSTfhOfLVfNuaMIQFJpdL0G37VLGmNByqf9oGw7tQKHZ8MnZRCtjK3QYjVG6jWir+G4W",
	"lMHZfObQcv84sN2/S/3HDN9iLfEdo2o5DGhLb2DPExnOk0gWm3VvrR1FstmJLWvtsYBOvn/hU2DQYxSd",
	"qseaJ2OjOlX8a394xsvy/bWkmRIZGSR0xwIf6UkZX9ygkdBOjPvYx2C18tIh9s7wPHcqXtEmT0Zw/s2w",
	"fuFiSqkcli5OBcAdKqETTwg3vMn1ahRvNFgN1VCRM65X9YYcCh8fvz0YjD7XIQpfV2X45oRX2Ugs1BoK",
	"prSvqCCWvlzGWNHUAwvJ09PLr9RK5K1q2OZzjnD63F1+oPLlC5XM8iYs152T7oZpFbugcNaL2Rl7SdnX",
	"GnhBAlYLC6mS5h38sRTUFeBTbYGjs4a60YMVZ24XdUrGG+RsDfjCcuIRg3/XIvm8MvUIxcakEmlVXSJ9",
	"Ago9czO1EcBEpJxLqey/EZ2OLJLfe2M+CkKvqqZafglu3X+vMYrRCWwcdsRGqzSIlZx6F3rJw0Fg+uRK",
	"HgddKeWrvsSEN4NTolHHTxOi6Hmhwej5V15kSpa7qfDphHht1mLyceim5o9pExeMxzIqL3sYikHMvIkw",
	"RMYOquxd4nfCmwa3fsigN0BHauzr28nOSDx9EJ+F/aH3aWaRl3NSM6Nap6VDnOSThiycn0FiyYLKoNZt",
	"sseFfMr+AK38ZbUZym2I1jbua+H5MlVniU5NzWIz6Naf8sia0IT8hHY4Wmv94uLDNR9oGQjTLfSL08rm",
	"76Xxi5GavDGNg6vMF+G9ZbFtmnFiYduEtaFHjBdFrzxpHPdFQqYpr0mr7YsTI7Pwq5E6wJPUXE5Sc2L8",
	"Ti2Dq3A7nHieOtwmqWrEVVhx6pFKihtP8GqLtg+nPmTzN8EDB7FGuCHfljnCrBPsMfGUAqfI0afNKzke",
	"ONXAd8a8CPGO9vC7DnacchmkWfDNBe9x733wp3SubXh1pw817BUeEcTjMQcwGnHQVggJL1f78aLihzhA",
	"G9rQf4V82vmzD/UwepqC+LVfF4LHlVHNWtVlQcVRN1jUpL1iJojjK6o3amFb6p6iODDoIk5QNdEM8Voz",
	"9tKNzMsrvjPBTtsy1vhwYVWphGrCRhhXPSLjcnptdL6luOhcVAKkbUJuYro4Hh+3bqYH9lZSJ3SoHIvY",
	"NkYLn6HK2zcKup634Hjz1dZ5dEDP/TLzsmstoIGDJdq1eRbGDhg1JI3Os/2p66kXK5ol3SPzvGt0Uth5",
	"s+KxMo56kZCjacalm+y/rDvik5GukSPaa64vO2cg7zxmLFeUit0ZtaNiRAnUJ7z17T0Zb9rHjDEOvPEr",
	"+CSAgr3lslAb9iIUjXjw89sXD5kGU5c2MFmoA+iYz0PymT4DXumlx/xd7/HvEAZPDpWVMFYn7Jaf79Pg",
	"y+HT4IkHsh12d/Uo+GXxiR4FLwePgp+O6eHPgYcdM/YY+GfJQHtuEsG7Oi09vePmWPHpu5H89DOdph6S",
	"dthmTkQV9Rw9QwHo3sF/KyUrmoJqpzrtw/hHPFplqxtR2j6nI5vA0MiPsDfitDveyNufXs/CSfAVADHU",
	"uNyEePr7s6XVjPzTzfQMUBkpP8taFqa3hO1zlBPu10ndx6s+oc2kJ3dMKThUE+gkInYhQb+lz0Np80h7",
	"L87i0yz0CMuPstz54kf9usrtUlZabUWRegiyVCuRG7LAHOswfhX63sxnm7q04sRxXoe+5MFOH4di5Y9C",
	"WXBdMCgef/31l3/vVhX4jMTVcJGS0T0eLW9k5FbkXT22we4AIRZIebZSQ5E16mvTq9b10PjW5viYVBs8",
	"d5yLDAEZTQkOyIb4kMWO8YjVlVPbSyvan+butzU361Z0Rg+C4UNtnHl51Q/6w5SjT/PicLQpslvFZfS2",
	"x5jgaDfJ57A3eg9yi/xgkfg6kiTD97I8imR2dfwS8jBxrasSnG7XysDRijSBNHTkhznfieG7mvF46VXH",
	"BvgAiHKaCFUMdMpkq3GhgaCF6oTg4MH6vIvhStUUW2swDqJ08M1aJ9Pzp+q8tdUrEgVKj6Ltu96a9io2",
	"4LqNarjV5aeoe7KHBz6PzPh0HNa0yhzVb+qozeyQvLymrlO/ntO49hxVHzysvEMoltO9OB/efxDXNhaQ",
	"ZqoQkvY+xKCtoVPfir0kjm/jGFF1lVS6w1coI3evL57bXaLbJ+bfYE7AUlGNA2l5jncDenVs9tSPNPOP",
	"XM3W1lbmyfn51dXVWZjmLFeb8xXmNWVW1fn6PAxEzz/HJcd8F/88hDtpy50VuWFP37xEvVjYEjBFooBr",
	"RKeRHrPHZ4+oUh1IXonZk9lXZ4/OvqRdsUZWOKcKmvTEEuLhGAWV35cFJqJfQlyDEx+Vwyqb2P3xo0dh",
	"GfzNMHJInv9mSIYd5iONp8FF7i7EA/SgPYwetRxy0E/yUqoryb7VWpFMNPVmw/UO86BtraVhjx89YmLp",
	"K4dSrRfuNLMPM8rBnf3i+p1vH59HkWG9X87/DEEZorjZ8/mcV5XJIpfx3vbB7z7ZKpG3d3ifg2bovfwT",
	"2qbni349/7PrlL45sNm5j8APbftA4t/nfwar783Ep3NfRGKq+wh+VFH9/E8KbCYrQjRVulNHIv9prz10",
	"aGzVbjvOnnz4sycP4JpvqhJQFMxufmnYsJEknh1v5s0vpVKXdRX/YoDrfD27+eXm/wcAAP//8u6dPVzM",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
