// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6ZFAV/qxAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
