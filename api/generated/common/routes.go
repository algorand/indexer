// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/P8AAAD//+g1BUr15wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
