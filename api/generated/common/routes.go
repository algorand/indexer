// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	HealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.HealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pt79dwAAAP//+5a0HsFwAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
