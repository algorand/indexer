// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/Y8ct7Hgv0LMPcCSb3pXlmPjRUDwIEsRLERKBGnt3D3Jd+F018ww20O2SfbujH36",
	"3w+sIrvZ3eR87K5WCpCfpJ3mR5FVLBbr8/dZqTaNkiCtmT35fdZwzTdgQeNfvCxVK20hKvdXBabUorFC",
	"ydmT8I0Zq4VczeYz4X5tuF3P5jPJN9C3cf3nMw2/tkJDNXtidQvzmSnXsOFuYLtrXGs/0seP8xmvKg3G",
	"TGf9m6x3TMiybitgVnNpeOk+GXYt7JrZtTDMd2ZCMiWBqSWz60FjthRQV+YsAP1rC3oXQe0nz4M4n20L",
	"Xq+U5rIqlkpvuJ09mT31/T4e/OxnKLSqYbrGZ2qzEBLCiqBbUIccZhWrYImN1twyB51bZ2hoFTPAdblm",
	"S6UPLJOAiNcKst3MnryfGZAVaMRcCeIK/7vUAL9BYblegZ39Mk/hbmlBF1ZsEkt76TGnwbS1NQzb4hpX",
	"4gokc73O2OvWWLYAxiV7++IZ+/bbb//IaBstVJ7gsqvqZ4/X1GGh4hbC52OQ+vbFM5z/nV/gsa1409Si",
	"5G7dyePztP/OXj7PLWY4SIIghbSwAk0bbwykz+pT92XPNKHjoQlauy4c2eQR60+8YaWSS7FqNVSOGlsD",
	"dDZNA7IScsUuYZdFYTfNpzuBC1gqDUdSKTW+UzKN5/+sdLpQ24JgmhANW6gtc98cJ10pXhdcr3CF7CuQ",
	"pXJ4fHLF6xa+OmMvlGZCWjP3uAbfUEj75JvH3/7BN9H8mi12FibtFt//4cnTP/3JN2u0kJYvavDbOGlu",
	"rH6yhrpWvoNnZtNx3Ycn/+t///fZ2dlXOWTgP6ddUGWrNchyV6w0cOQ4ay6ne/jWU5BZq7au2JpfIbnw",
	"DV6dvi9zfel44G6esdei1OppvVKGcU94FSx5W1sWJmatrB2rd6P548uEYY1WV6KCau5wdr0W5ZqV3G8I",
	"tmPXoq4d1bYGqtyGpFd3gDt0nRxcN9oPXNCXuxn9ug7sBGyRf0yX/+et55JVJdxPvGbCwsYw05Zrxo2H",
	"aq3qiog+ugBYrUpes4pbzoxVjrEulfYSD3Hdue/fC3GsRARWbLEbt5TVYPTDfdz+wLaplVvZktcG0vsV",
	"Vh9vEq4yli14Xc/8jeUELT9l0f3Am8YUuOLCWG4hbtM0roVUEhICSPcD15rv3N/G7pyUhax11mOnKGtl",
	"oLDqgAAWZCrcsEhkinfsJHGMXayB4eTuA4miSNnScem63jHrEeAIggXha87Eku1Uy67x6NTiEvv71Tia",
	"3jCHfETZQFJ03CxH3JPNSJD2QqkauETSXgOvQBdK1rvpvv2IH5n7yJY1X52xv6/BH2Z39zvoCJw502Bb",
	"LR2V1aq8ZJUCw6SyTm6wXMixyG4y8MfwHADdvxoKR3p5+aUOR5KaO1EF96bqRJs5q6AGxE9/fvBXY7Xa",
	"Id4cFc+Zahy9qtZOz7Ws/LD0eXzMkeazD5R4JQcWXYuNsNPlvuZbsWk3TLabhcPYspN1rPKoQTrVwEok",
	"t8WAaTV8BYaBE4UEva5wHodkh0MNvFznGSrBdICHbvi20KqV1RGPCMuUjoU000AplgIq1o2Sg6Wf5hA8",
	"Qp4GT/+0icAJg2TB6WY5AI6EbQKtjrO4L4igCKtn7Cd/7eFXqy5Bdrcj8XlgjYYroVrTdcpJS27q/dKR",
	"VBaKRsNSbKdAvvPb4ZgbtfF388bL054FQMU8H3DDEaPMwhRNeOqjYcENfP+HnMTcf9VwCbvkfTEmAFpO",
	"p6VYuy/Ud/8quhkOHOoj6ZDEg5j+9tLeUXSHjQpiGwnxzn31TCWtERr0P0LkjucmfURxK90QjRFu5txW",
	"jGb6dM9QI1YFjTg5JWJ14cSIpahRxPinOxwBs61x99IQt0HoMGIluW01PPkgv3Z/sYK9s1xWXFfulw39",
	"9LqtrXgnVu6nmn56pVaifCdWuU0JsCZ1RdhtQ/+48dK6IbvtlpuaInxOzdBw1/ASdhrcHLxc4j/bJRIS",
	"X+rfSGzEK9E2yxwAKf3IK6Uu2ybe0HKgL1zs2MvnOWLBIffxQ+QdplHSAFLtUxIk3vrf3E+O5YFEjh7J",
	"Auf/NAofUf3YjVYNaCsg1s+6//6HhuXsyex/nPf63HPqZs79hLPukWZzVxkdYG49CyPW5ZkaCQObprV0",
	"tae4Q3ec33ewjefs0aIW/4TS0gYNwXgAm8buHjqAPezm7nbLDB4kR+7b+FHxCfeRLvcCL+npyD8Z//Br",
	"+EpIXPicXTsxe8MvHVfgUtk1aOZwAcaGa57YH938nWLZywr+rXA2S52YBE7NrZHaY+2VE3ffobh7Fyge",
	"PRtPwHUKpH9jvsP8ZGPvkgRWd4T7vRr3Dx/e86YR1fbDh18GLy4hK9im8fFJkV2rVVFxy29Go6vnrmuC",
	"QL9kGhpaM+6KgO6WeE7Awv3eqHe1XXd82G7EY//NWROn4vZM1RiwP/Cay/JOrtOFH+poDL8WUiAQP5Kq",
	"699oDmjutvIuUOx3904OMmncjz7C/0Zu6gx3doxbo/auUHoUIu/5RYhT3sUmfS7C/zfF3y3F/1Cr8vJG",
	"uNyHKhz10Mxqe/fzqm1q1h/UlglJ2j8v+fygtvClPnkWDrajj8UPavvcT6n0v/ZrhBZ+DAX/4P1iDBp5",
	"Zbyzbsl/1lrpO8BueBuO4JnPNmAMX0Ha9hKvMTQ8ZlEBYEQIuCWghvpH4LVdP1vDJzio0dgHjutFr4y9",
	"g439pCw70hsfWn+0qgOPveGwJ3LZaBrzpe/el8MuBlt+PEMc4HTMDo/HsTkNyR+D/SE2MCRc+rzPdnQd",
	"OUxx79ZI5sEP8oN8Dksh0dr/5IN0fOh8wY0ozXlrQPsH5tlKsSfMD/mcW/5BzubjCypnq0MXLA9N0y5q",
	"UbJL2KWwQL5h6butXil3s1lleR35MkQeY96C3BsjpiRHExSOMlRrC++gWmi45rpKgG46+zWOTK5r+2ad",
	"Mz82mdm9A6wfP30MJu5Pmau9Hl3sJuElJuTQjcvh96/KesM0v2ZEX6w1YNg/Nrx5L6T9hRUf2kePvgX2",
	"tGl6hfg/ep8zBzSaxO5Uu44LR3wWsLWaF+hqkly+Bd4g9tfATLvBu7iuGXYburZptdJ8471Wxk5zexBA",
	"cBx3l0UrxMW9o14f59FDY4pB9wlRiG3YGuqp292p+Ipe6DdG14FX/h5H8A8f3qOPd8BM5z634kKacCsY",
	"sZLuEHg/0AWw0kkBUJ2xl0uGXG0+6O6DODzH7FiHMOS6yS7cGtG5gpVcoktnU6ETnZCMy93YnGvA2mBD",
	"fwuXsLuIfDNOtPF7Ry5+4EqsWjdcdy32GGbX3LCNQvt+CdLWO+8bliDNNDCtkJacVAZOkhmmgacm8l50",
	"BydmIRn/z8gjjjcNW9Vq4TlNR6JPOhoNffJM5Y0DwNwBQ0k+yof+pOmN4DqxEXQQcy6wpy/UjXerY7h3",
	"eTcmuaXQBv0Ogfs7gsdH5AaU550ip6D8fQ0olSmNzoFDkjLhSKeIvvN5ms8arq0oRXOchYZGfzPo4wY5",
	"dLUnL3O1HN/Zkys1eYVQ42LBTfr6BvfFUWBryNfXrTEwujATScu4gjOGDk7+qC5qdP/t4m0Ix1yjX3JY",
	"NsWf5EBLnwvQspepAhjDHYmFtzU3wUUZ/ewDizhKzMkQ74XbACRgd24i6o3lVuHmreGK5/Y/71v1UlaO",
	"d4AZumt3nlPhWpl6zQcXRYorDB5Wwa0q+FK5fx21t3XNxJK18lKqayccn+ItNZ85ya9NI0lJlPzcmVvR",
	"dlDjQD4e4K9MhDYH1d+Wy1pIYAUT3R5Y3AMKiVClIM/z/nz6OcA9DL5mjgbdAEePkCLuCOxGqZoGZn9V",
	"8YmVq1OAlCCQx/AwNjKb6G9Iv/BQwENZj3y1hUxTYxn4gpMwB5clAoZxLAsASS7fTMg5c++8K147acUq",
	"El66QdJRHQ8GorYX88zDnByf1j7QivAWO2lNdO/dZDWxsBiATkuyeyBeqG2BcWFTWDG8q2mKjtUpWe8o",
	"imL88MMR3HpUiRQSPGAvYUcBHBhShKcEtX2etyygVk4WVBMK6xF1APjbAn6H0OwXAVPUbJD0SCDryW5P",
	"GNDBqTNiV47sHiAN3QKAsW63c9z12oODr/ypcNDfkvPeNZo4cppx5A7flMSHdJPEW2ZHp0qhzkPyzVhC",
	"Sqp+Bq0YNVl4VUYkCaduP8eASiUNSNNibJ1VparPJjofAzWgEFkMhLbiEnbp5yLgXfYudIv0QeyBWLrX",
	"28NIStSwEsbCIP6t82vv3fZ3GDPWcGtBu4n+z4P/evL+afHfvPjtUfHH/3n+y+9/+Pjw68mPjz/+6U//",
	"b/jTtx//9PC//mOWuaChaLRSy/zqbKOXbn1vleouQOzIsONgmfe+gitlocC3QHHF64wJyTV6YVBP8QKf",
	"DUnZbIBsRuGbIqPlxWkvYVdUom7T9Orn/ctzN+1fO0Zp2gUycyEZcMcsuS3XKKIPpndt9kxd84MLfkUL",
	"fsXvbL3HnQbX1E2sHbkM5/gXORcjXryPHSQIMEUcU6xlt3QPg0Sp6jnUZFTLZ2Ogw1m5hmf7FNqTw1SF",
	"sfe9TSMo8rcWjZRcy9BPMb8KtPCizCNsFA9qJis6Vpdw3YVyxuLrNe+UJZ9cZxCvLtYb+FHSigP/8RbL",
	"mw5/7PLuyiSP2DtFJUaS1ITA8OD4wQ4QV6Sln4YmufdIsDTQaYmkVAqalmNpdUR0XezrcYgJIogPxVVt",
	"d5XuF4rvjgAh8WqjtadokS212uDJmwqtEXGKjPJjQIL9lTOa1ef2mdKLY5740jlorARe/wV2P7u2iFXX",
	"Owiuxx6ZXhcUnovh6XIr1NzO7JKifD/iQconz/oc2WMWGNJ9D8yoJ56AWq3Sqp16hXKHWvUBnDE5LMA9",
	"s2ELZWv72N2R6rbTLt+vNDlWU6eD7SILOaUk2i8/4Eb5sQ6g7k3HJz8l5njTaHXF68LbFXM8Xqsrz+Ox",
	"eTBD3rM4lj5mF39++uqNBx8tWMB10T1nsqvCds2/zKqcXKJ0hsWG3BxrbjtNw/j+93ZFYQa2yGvMizB6",
	"MTtJyxMXMejezhydXm+bXAa5/ERLozeJ0xL3mMah6SzjvUmDDONDYzi/4qIOtoQAbfpSocX17ggn3yvx",
	"ALc2qke+EcWd3hST050+HQc4UTzDngQIG0rDYZjyiQ66dy4+btEwgQS64TtHN6QJnrIk2W5QtVSYWpRp",
	"a5NcGEcSkhwlXGOGjTPPZDeiu4vTY7UiGss1M0co5UZARnMkNzM4sef2bqG8J1crxa8tMFGBtO6TxrM4",
	"Op7uNIbsUDd+AiXMqZRF6h4fQTjhKc8fn5TmVovrRrnJI8i9a6aTeqz59XS4u837p9chT+U/BGL/4yf2",
	"eZmA+7zTlAYq6kwcXA7cA05wnYtnnEgZe9ze/OHzrKKVwhtcboCdwzkjw0PLJy9Ks4uT3lFxLqRbvZ5M",
	"sdTqN0hrD1Hpej2dPpqYeqcHP/oVNDo3mdeQGOV2uwGqumxStwWpez3fGqjx3dkZW/qEoj2SsocuJ7bH",
	"RqGh02WGseP5i1x78IEaDM9c0oF7holJBy+m9LGNvXHPafz+2HqYp3oNfr3g5WVaenYwPe0d2gYmcqtY",
	"6NzlCRti6YxFvnFdW59yqwG9EXZ4DfQPs5tKwjTt0TJwL/IiVcXCrk84WBuVGKaV11zakDjNMzTf2wBZ",
	"nlyva6WNxRSOyVVWUIoNr9MicYW7fzEQsiqxEpTyrDUQJezyA7FGCWmJiiphmprvyGWw35qXS/ZoHnE1",
	"j41KXAkjFjVgi2+oxYIbFFZ61VXo4pYH0q4NNn98RPN1KysNlV37XHJGse61gpqfzlNlAfYaQLJH2O6b",
	"P7IH6KNjxBU8dLvoRdDZk2/+iEnO6I9HaSaPWTf3Md0KuW5g+mk6RiclGsNdn37UNBemdNN5/r7nNFHX",
	"Y84StvRXwuGztOGSryDt+bo5ABP17V0SRvsiK8okicIWEzY9P1ju+FOx5madlg8IDFaqzUbYjffZMGrj",
	"6KlPGEWThuHIL4E4fAdX+IgOUQ1L6/XuV8eUzlXsVo1ua3/lGxhu65xxw0zrYO71ZZ4hnjGfM62ipJW9",
	"RhP3hnIfkxMe6Z2XUWbi1i6L/2TlmmteOvZ3lgO3WHz/hynIP2BiOYaJlKGiuY4H/N73XYMBfZXeep0h",
	"+yBq+b7sgVSy2DiOUj30XH54KrM+WukAgMDRx940+4c+Vt5yoxRZcmsH5MYjTn0rwpN7BrwlKXbrOYke",
	"T17ZvVNmq9PkwVuHoZ/evvJSxkZpGCp+FyEmZyCvaLBawBXGIqSR5Ma8JS50fRQWbgP95zX7B5EzEsvC",
	"WU49BChme7odmBw4Wnbuia3U5SVAI+TqHBMKk6hOo46F9BVIMMLkL9DV2lGO++yuvEgjQrmKyUHP3D+l",
	"B8AzduUVIE96+fwQ1JOBh34UFDlzUN8ycCX7yfdxg/k8sgXOm99l187B+ybknSU4XfvPcb11HvEHUwu8",
	"9W3zDuzuTqQQqGc+YIlciIbmXFrvNUelO8iKZETkpWsuMj6eBqDKuNEBzvhOaSvIkQXgMzvFWc3Ly6Q+",
	"7cJ9MZ0zHHmuR25x5uggGVS1v3F9LsJsKVOk2ICxfNOkJQnUjROzQcbltq/r4h5cBkolK8OMkCUwaJRZ",
	"H4r+zkQtbiVOVgtDt2qcp7ZUmjKFothk1Sgy99gt2RuDPISx0ErZHKAoX8XB40pZxlu7Bmk7v3zAvO7j",
	"lVBkET6q6M4krsxeu2ss5Fjldb2bM2G/onG095DkbAP6sgZmNQC7XisDrAZ+BX0BCBztK8MutqIyWN6h",
	"hq0o1UrzZi1KpnQFmiqDuOb40KNOfr5HZ8zHVPq4goutxOV1iejjddIyQ3hIZ66JVzwnGWH8M+blN1Bf",
	"gTljF9eKgDB9HLpxctagx6K1FI9VieUSkHvgcvB9iP36DxFMWMoCXfe7Yf2a7p8HTCisMGv++Lvvc4T2",
	"+LvvU7T27senj7/73olaXDLebkUtuN7FzVyrOVu0orY+KTJnV1BapePXr5DGAq8mtEW6Ez8LXvfLVpbe",
	"G6vrEhcceffj0+++efx/H3/3vVe2RLOEuFOUCCUDeSW0ku5T0HN1FOKn7GaDrTD2MwgUdisLfKpl9BmW",
	"lGZb+YwaMR/IMLRVjljYhpQn4eDXUK1Az0mnj8dDbKDPD+GeEUrbXne4BIrBcveikFarqi2BshK8G/CN",
	"CCwxAalLdR85m+BZDxVfejiD3i/cyGeMvcS31iOS+KUarhDPGFyBphiZfqAHdDlEcBnLNXrpoNOOXypU",
	"D9NXe9usNK/gOBM7XlY/UY8umj6McKVOG+Bn134swQ/E5IHwmZbxojAJJ6PEd27qztnDJbIPhLe5uMUX",
	"VEVFQ02hY1jFAtvOJ+L/EqAwQqZ19EsAvJ55WULjKD2uGgjg7ho66XiWMdI9CG0O+dKKK6Cgtj1SZlHy",
	"umxrkrb3iJDXJa/10NhXw9IqR3txVaRecS3cXAv0mqbyDzSfdndY1ANT/FyB3vkW9MYP1RbcudEjD5Vp",
	"8GhRwxWkX97AKYb0R3XNNlzuOly4KXow5lGkWQc5CcHo/kDY/smrHyLw6Zx5gtwPpENFZnOrGM8NaKEq",
	"UTIh/wn+oHccK1AMlW1R0grZYqEeDT3cdNUzDIcdh7xOKUDnknq4D8OQBwnXA2xX0UNhGCBgLL8EAjsE",
	"7nrp5licajCiajMKd83LIWSnEaM/vG+5hXPdodbcEV2OmFd3yPcdujEtj8hmhK3pLmX51IAvH8OseBdP",
	"xTwPT/hM+2xBoWXmUa2sCnrRkC2jG/sKtBl640aaatgeGNu1GIxPOZS0Ii3Y6bMUwdnKZOfbETvuaS7I",
	"zxTujv3Be/skdjCTYKoDwFwLW66LTACSa0stKIBr9ISfTknSBZ5CWC6htMfAgJEsVL0oCwV9dlA8B15h",
	"BHYflEThSGNQHvxVMTe0iUQeaQQ+JHqJB0d5eELy6Y5CDhH/z+pI2r9S+D805B9xDIKM43GfVs5TG088",
	"fbg/ZzswuCudb3V0RhpleJ22Q4ZJK6j5bt+U2GA4aSfzBlMs3Tnc3WHuQiFf7mxQb5jan7N9k7sm4wV3",
	"x3N6KuKyKBNMqoTPVsh72IUV+QxyCYfEnNnEfXAghtKic7YYaLzvPwIyxElMI/HclwAr/jEG9jOr2H3Z",
	"UlrBL2kkRsk5k+isuu9RMDB5wOO6Q+Yy7qtxHonpkRkjYPsL2K/UPv35iteZwMC30Ggw+Ibn7OLPT195",
	"94pceGCZjWbl1mfssJxlk+x8nM8yWRA+fHhPHryU46DDxtS0lPPaJadd93nS+2beXrlklNGGBifwKUB/",
	"CTFKrOHC+w71sZHTnfXxsvnzu++t2yN4vAgfhZo9Qj9ys37BS6v0bpoJ0z17MylmvHn6lC3+5vs0K3Yg",
	"pCdB27dPXjNUX3UuZejOFWQVtZxksGGYwmbNvVYr/Ole4VG6mu67e9yP3+g9LuJ8roly0mv8TJneWKiI",
	"NcV0Nu1ttSi6eIVUZbz5zKetjXN1HgxSEqbYiJVGcSQ9aj7dbmQASgR9kxicKC/rRY68nDwi0sHCRxD3",
	"4PX6lzBziqBfygq2oHuryet+daPiD6TawQKrpugVnWneRMR+v3c3xY27KYyFao8mZXniUSQHkNqJUEeN",
	"X99sfFmgCCuLaxCrdXpj39xoaCfiHkba1f0jLcXgXqNG/qk7kEiRGUa77Nnw3qTSEcdG07bNmJ/tmpb/",
	"pQRLanDviyYDrq1OJIT/zGz2uEJLglEbsWlqchL0rGSS5+mkxAh9LMOnD42567iCTx4ZADd2ULv7gICb",
	"wnI4/dL+MIC/yWdq09SQF54bcu+kKuv0psbcfVFR6mCfUWXZ6t7AOnb0/5nXgqqlGszfJ5VqMGFfY4V0",
	"/8EcA6q19H/g2v2HfGKG/yOqiuQkN9QM8YJpn8JAIYRw5h7zFakSfd+UFJX0q5lsyjCRU8AnOuuinUsC",
	"VOja3ufWPeelJdukd9mTYK+VvpyKYLBtHC5H+VXi+plTdsq1bZtKbyjoufNvUJQvsMuBNgVOySvQXu+v",
	"fH5C0vDbNQg9zezDPHgDf4gD/DXFCm+YEOYoF4zpCyjB8nshjNRimWzKmA4ofodGfjJTf7hS7xqrzrEN",
	"Njk3VrelNeQS1885wbrbaHLcOVzna3xlu5tWGUG2PKsKDVfAcypqSvf1awsOyWimco1ZN0AKsccyxfEe",
	"09gm77ccu4FQnAsvLZl3fOJF7vZ8w5v3NMsvrGBvCeIuz7vrwDZm1ZzutURDpUA3vLZF9hXh5Tf2jtc2",
	"vqYdQN7HofMOySdIJQkxG650/95jYnULEnQLhmqfOH19A3E6yztw3o4Rk4QzPFJXoCms9Why+Dn0+Dif",
	"3es63nYndsoVovUdt4p4UyLWkFZhhK/hOPV5eLmsWDS/YXg2En5yeHRBWr27SaYZsSpMrU5Y3juxeuc6",
	"HNjS0Gyyp7W6Bl24efeguB6GN1DLQZ7irtAEjUdeAlAxtxhzs42ggU/aCd/l8F70Y48cMnhdKlkMZr9f",
	"rkP8skDqKrqA9QO7xzfD3WvC2/VUroVMYifkKp8U8BJ2X8ZbPeFtO8EnmjfzyhIKnOmM+VFexWtvQCUD",
	"2VDQOZCd3j2HUNL0RTv2nKts2NBGlFpxdETo0xfDRIL1jyn04+t2Y59zRVp5S0meqfPFroHOIXVa5GPD",
	"m/CewXeuE4LPPqVSqEtWmvKmLJW0XGD5jqRwT46oUDfIqHrd89kXRb4/RzfzyM9i//6UGySgyDAU+y67",
	"/0+3zGqA+/fuvIRdUYslWJExxtYYQ/sX2LHQ7OzOZIpc8puBQQ1f9jX5w/cJfZjS9GWFX+K8QYz4KAar",
	"mvCXYRVY0BtHimt1zTZtuUbZna8gZM5Bgwh6VY8mGowekgkMM0D54CvT8JIGogDtmusVaOZjppkv8NsZ",
	"WDZc4DnpPWHHYZHoJMVTxq5D+XxeU9B2xLvQNBll9UmkDQpgXMLunCxv+PsNGEk+OVAGMEwR9AlBulWm",
	"oThZ1QF6vRwYLam00CC/Vwf+HRovHXxehXCi8XKahuvY5eE68Di0BqbrPD4SJd7bxBO3X9uxlvfp5uYN",
	"5nZxjME8b8BFRk8bgnV7GILK/vHNP5iGJWhUYX39NU7w9ddz3/Qfj4efHeF9/XXat+e+bPVd3nk3hp83",
	"STHD4pUjuyVd/FhggYplkbu/kujCWNejECBZMYz7RpGFY0QE1KqBZGva4AjpmN9Lw6qtOYW+CClBDzod",
	"k7iFVAJ2K736C/+82MpU21jExNbRdqSKG0YVZG9W9XNUxYrS5pSYoOamI/YpbvoRKRXGbUZ8QXk4uhFx",
	"qCXo24x54cc4oqDcSmrKZ0gKOhHCslEoJgwPqakL1Q6F5kLCmS68C35tee3D1yQGi11g0pXyEiTVkHOc",
	"z1cOZSBNq72a0MGK4zlQ/DAqvuBN3+Sm1eSKfRWadEkaYe/h7cPwMYEQdXWiR+WQo/YX7XDt3bNzT66x",
	"EpON+YYhmST6Th56jiEZ603ebj5KIhxHWmBCvdA/M3xfLaMv45xONdfnDBzd1pQj/cHL5w+ZGBdyjpP6",
	"RY+vw8uOC3YcBxHldpjAMk4teAoUS4BceMso0I4tIaMePlQWYnnVV4TAVmOX5INQHhmI/yM3WOLBN/dR",
	"Wl9o9P0ASPbyeVLkGKRCPblswHy20qpNRzKvKD3v2P/SPQxQ6KJHPTl0nT/+7ntWiRUYe8b+jrnS6PKd",
	"1t0aYpOJvp7XoGwgQ8C6/JskD/ngvGjOtUfoJFhW+CA9HOb+MXyTbNXzGcolhd2mAr5fTmQW1viIRkwd",
	"GfGbgRv4XYR5C2k1J+ZbqOUymU71b/h774qgA0/WMMX6EVz5EnYabiq7/AU7k+fVXs5TX3WlWW7GeGrI",
	"FWWst4nj8+3joj9BZ+yV681ALpV2L+1Ni9Y/2GJaNW+Ei6VUzDVm+wK1mGZM/gZaoSJBMuWN3eMz1m02",
	"Rh3yEuV546NqHQxd3tROWfngHUozcwLyIb1Tp0eNtdIKEn/cNv4c7WLjLh4H9N/Xok5QQaPcdxPDMWdS",
	"MSq9HrekMP8+Zx7B7MOkB4R0v8c8zh1dpc3/jhIqysPfl1zotRTlmsu+lvThBP1Tmjyu/uukcE3imN9l",
	"IYE9cH5e5zipMuGS0pdLcg8UzF7XadTuF+CG7zYg7Q053xvqTf4KWEtV738B6MwLIPQ+VJn2EnaFVemx",
	"gYxNJJl3Ty3UnRK3jdY4z7x7upizUIW7l13pBDkRYdmikTcyZwbdqX/SdT5cl7DrPWDiynT0bLrBK4uu",
	"xbRm/EJsoH+XkCCXEoHEUVciPS/T71rKEUQs+6s9y+mG2U8VJkMV1Hc/TRxt+43INjL+TvL+3OAURK5J",
	"mJtiT2jFroFhoNugkO8w6QPqDM7Y8y5pCvr+Uex5n0mF9FljD0HKENIluxU66L24DjpsdCJEB7gdlROf",
	"MALfgGQj12YqJfkmvFxig5wiKDTbLkH37VLKmNByqX/rG071QKFZ09SjelSJVsY2aDDKYbp3hGz4bhaE",
	"wdl85pbl/nFgu3+X+jf3T9PUWFOzWU79INMH2NNEgfMkQr5nw1frQJDsTmJPWgc0oHtrrflA1iXVeO1u",
	"1VPVk7FSnbJL9z8843V9sZXeN3AaarbHG5M3FG72ynthdhzasXHvMhu0Vp47xNYZXpZOxKv6FAgRnF8Z",
	"Ni6SQYkRpmUy9nhoHuTQYxEgpk2uV9l1o8JqKoaKknG9aikdzz2s78AKsqXhROVz+E3rm3mRjdhCq6Fi",
	"SvvUVmLp85blEvQfWbSIN15mFGUvGvZZGTKUPnePH2h8qmwli7Lz5nb3pHthWsU+kBf0h9kZe0k5VDTw",
	"ihisFhZS5XMG68e0o9eAZYMDRRcddqPiaGfuFA3KExmkbA3oU5EomPWvWpCJN6bNYCzHlUiqGiLpM2Do",
	"mZupd/AhJJVcSmX/hfB0YkGmYRWDOHahabrKTDW4ff+1xaAzx7Bx2IyOVmkQK5mp9Y0EsuThIjBjdCWv",
	"gyGX8un3YsSbyS3RieM3Y6JoeaHBHLtwNFdgqfQ9buAJ9trtRab4ODG4Lvmi6eNdjF9lVMrguCUGNvMm",
	"WiESdhBl73J9N6ifdeuiWaMBBlzjUN9BUE+izFZ8F46HPiSZRVbOvZIZ5dWv3cKJP2kowv0ZOJasKOV+",
	"28cIfZBP2W+glX+sdkO5A9Hrxn3eZZ8v9CzRqauPYSbdxlOeWH+EFr9HOszW9fnw4f2WT6QMhOkW8sXN",
	"SjQdxPGLTP2HGMfBVOYLPtyysAvNuGdj+zjHqUWMV9UoFX7s90VMpkvlTrvtC2EgsfDrTM2Jvdhc7sXm",
	"nvEHGYmuw+uQ0vGm2ad/TVLup+uw49QjFUuZjwvsCwRNpz7m8HfOA0eRRngh35Y4wqx7yGNP2S5OnqNP",
	"u4qMHjjVwXfGPAvxhvbwuw56nHoZuFmwzQXrcUxp7maie23DmzstCnaQeUQQ530OIOtx0Of58hdzGC/K",
	"jY0D9K4NTtQMxsiExHji0sPoaQzi13F2Jx5n4Tdr1dYVJeLfYGqy/omZQI6v3tOJhX1ZJfLiQKeLOK7Z",
	"RDPEe83YSzcyr6/5zgQ9bU9Y+eHCrlK6/oSOMM5dSMrl9N7okjzHoRSNAGk7l5sYL47G89rN9MBeS+qY",
	"DiVVE1ed0sL74vO+HtbQ8hYMb76yD48u6LnfZl4PtQU0cNBEuzbPwthhRR1Ko/vscBaPVHW0bksP8Dxv",
	"Gt3L7Lxa8VQeR72IydE0ee4mlRzGBGdsMtI1ckh7zfXl4A70h9UPIFcUwT8YdSBiRHH3BmrKzDkKS84F",
	"zRiovSXjTbuoRYlWBPQD7+wKPgigYm+5rNSGvQj5cx78/PbFQ6bBtLUNRBYS/Tri85B83uz62YU3eulX",
	"/i4KoOmWL6Q3qKyEsTqht7z/JGzKQnHI38g1WhrbOx2RvZqyH05ixIXngulbCCe8hF1RibrNErJrdVkN",
	"80+adoGlu4SkJLULbkt0ZpmAYPZMfcDBwbWpaano5XDblR53YHC5/sQMZmlG5+dLI6ADL4lgXd3PPb3h",
	"5lT26bsR//Qz3Uw8JOmwj5yI8uI6fIb6IKOL/1ZCVjQFhW456cP4gnG9sDX0KO1LN8rOMTSyIxz0OB2O",
	"l6kz7+UsnAQrTompxOUmxNvf3y29ZIT9K19yso6En2UrKzPawr70+R7z617Zx4s+oc1eS25OKDhWEhjE",
	"0Q4hQbulj0PpQ6iNUaXobfBYBpAK/v1N1jufB25c4KLfykarK1Glio7XaiVKQxqYUw3Gr0Lfj/PZpq2t",
	"uOE4r0NfsmCnr0Ox8lehrLiuGFSPv/vumz8OsyN8QexquklJ7x6/LK9k5FaUQzm2W90RTCyg8mylpiwr",
	"a2vTq9700NnWUjlSjzeRISD5aPigZ/X+IYsd4xGpKye211b0P83db2tu1j3rjIrPYlFgzjy/Gjv9YchR",
	"ZOe754h0T9jFrfwyRscjxzj6Q/IlnI2YPRI9HMsSX0ecZFqb1S+R1K6OXkIcJu51U4OT7XoemM2sE1BD",
	"V36Y852Y1nCPx0vvOjbAYnPKSSKUCtUJk73EhQqCHqobOAdP9uddDFcqFd1ag3EQpZ1v1jqZfGRfyss+",
	"2WAizfhJuH032tNRshLct6yE21x+ppw2+2jgy0jskPbD2i8y59IzsGPi8rr8VOO8VHnpOUrEuo/0sylO",
	"h+/n45OceHDGTm457zTTBP+0i+CQ5svchUwI7CWRf+/UiHKspBQ2Pssd2X59Pvzhft0+Sv8jBggsFSU8",
	"kJaXts/mPXvqR5r56qqztbWNeXJ+fn19fRamOSvV5nyFQU6FVW25Pg8DYebGQTY138UXg3LXbr2zojTs",
	"6ZuXKCQLWwPGSyDqohy2T2aPzx5RtkOQvBGzJ7Nvzx6dfUNHZI10cU6Zham2J67DUQ1Kwi8rjEq/hDg3",
	"MVYzxuzD2P3xo0dhG/wzMbJOnv/TEEM7zmAaT4ObPNyIB2hOexhVU59S0E/yUqpryf6stSIGadrNhusd",
	"BkXbVkvDHj96xMTSZ1SmXCDciWnvZxSQO/vF9Tu/enweuYmNfjn/PXhoiOrjgc/nvGlMEdmPD7YPRvi9",
	"rRJBfMf3OWqGUT3G0DY9X/Tr+e9DC/XHI5udL7BwwrFN4djpz72bf2g7Xjz+ff57UC1/3PPp3Geq2Nc9",
	"s29UfOX8d/KeJlVFNFW604Dt/263HjrU6Gp3zGdP3v8+4jOw5ZumBmQxs4+/dOTdcShP5h/n3S+1Updt",
	"E/9igOtyPfv4y8f/HwAA///zL8OU5twAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
