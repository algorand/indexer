// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
