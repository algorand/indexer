// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
