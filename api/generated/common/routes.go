// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8KySAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
