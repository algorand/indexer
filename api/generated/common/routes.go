// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
