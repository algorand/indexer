// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//3pfEvXJsQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
