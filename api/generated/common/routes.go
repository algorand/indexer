// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
