// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VyvQWY/v/L8AAAD///1tp7zd8AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
