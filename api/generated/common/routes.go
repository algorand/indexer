// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
