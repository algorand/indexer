// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"iuoDl5GYsG5kYQZb2L3JMeMrnJUSvJAQ2sy6Haeuz0PvzLPYqdiHBJ12PmmifVx2+OwO1myl6qz4wC+9",
	"LTssuNRtZa3VlShSr2GUaiNyQ7aKY72bb0Pf2+Wiakor7jjO96EvuVvTN6ZAh+KZ5bLgumBQPPvzn7/+",
	"tlvu74xdjTcpGYril+XNcdyKvC/xtas7gIkFVJ5s1JhlTXql9KYz0rdeqCVWme4ivY5zJiEg6fVGiw3B",
	"DKsd4xGpKyfgllZ0Py3db1tuth3rjCqFYwV3zjy/GkaoYX7Ml3l2KToU2b2CCAbHY4pxdIfk93A2Bq+S",
	"ifxglvh9xEnGhbT9EslA6eglJA3iXtclONmu44Hjc5PrXW3VaUANXflhzjMxflwkHi+969gAK4MqJ4lQ",
	"KQEnTHYSF6rSHVR3iGQd7c9ZDFeqYOFWg3EQpSNPtvri4ue0sDmVX++ky3Sn2yNxezbY0/6O075NSrj1",
	"JQHxec/yHhr4/CCN9/wWg5vXKI3lSlqeo9xIpaoXL7xpaeErIy+21tbm+enp9fX1SbA7neSqOt1ggkZm",
	"VZNvT8NA9D5SnDLtu/iago4LlzsrcsNevHuDMpOwJdDT+XCD9q2WshbPTp5Spj1IXovF88U3J09PvqYd",
	"2yIRnFJVC6rLi+twJIKC0ZsCM2ovIa6LgZXIsfIFdn/29GnYBq81RG6d018N0fdhnqZ4Gtzk/kY8Qj/E",
	"4+glhDGJ/Ejv+bPvtFZ0XkxTVVzvMKHTNloa9uzpUybWvpoHeuAsd7f2hwUlEy5+dv1Or56dRvE1g19O",
	"PwbXtihu93w+HZRdDW0jJ2z619OPfRfZ7YHNTn1IbmgbnKG9v08/BhvU7cynU59VPtd9Yn1Uzur0I0U6",
	"kqYWTZXu1BO0PtobDx2afrQj68XzDx8H5wpueFWXgEdqcftzi872RHq03i7bX0qlLps6/sUA1/l2cfvz",
	"7f8EAAD//8QPeOVBsgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
