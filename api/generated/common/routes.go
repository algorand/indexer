// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a4/ctrLgXyF6LxA725pxnJvgxsDBhY8db4zjJIY9yQHWk92wpepuZtSkDklNT8c7",
	"/33BKlKiJEr9mPHjAPlkT4uPIqtYrDffz3K1qZQEac3syftZxTXfgAWNf/E8V7W0mSjcXwWYXIvKCiVn",
	"T8I3ZqwWcjWbz4T7teJ2PZvPJN9A28b1n880/KsWGorZE6trmM9MvoYNdwPbXeVa+5Fub+czXhQajBnO",
	"+rMsd0zIvKwLYFZzaXjuPhm2FXbN7FoY5jszIZmSwNSS2XWnMVsKKAtzFoD+Vw16F0HtJx8HcT67yXi5",
	"UprLIlsqveF29mT21Pe73fvZz5BpVcJwjc/UZiEkhBVBs6AGOcwqVsASG625ZQ46t87Q0CpmgOt8zZZK",
	"71kmARGvFWS9mT15NzMgC9CIuRzENf53qQH+hMxyvQI7+22ewt3Sgs6s2CSW9tJjToOpS2sYtsU1rsQ1",
	"SOZ6nbEfa2PZAhiX7M2LZ+zrr7/+jtE2Wig8wY2uqp09XlODhYJbCJ8PQeqbF89w/rd+gYe24lVVipy7",
	"dSePz9P2O3v5fGwx3UESBCmkhRVo2nhjIH1Wn7ovE9OEjvsmqO06c2Qzjlh/4g3LlVyKVa2hcNRYG6Cz",
	"aSqQhZArdgW7URQ203y4E7iApdJwIJVS43sl03j+T0qnea01yHyXrTRwPDprLodb8sZvhVmruizYml/j",
	"uvkG7wDfl7m+hOdrXtZui0Su1dNypQzjfgcLWPK6tCxMzGpZOp7lRvN0yIRhlVbXooBi7tj4di3yNcu5",
	"oSGwHduKsnTbXxsoxrY5vbo9ZN50cnCdtB+4oM93M9p17dkJuMGDMFz+9zf+uBeFcD/xkgkLG8NMna8Z",
	"Nx6qtSrdYTdzFnEyVqqcl6zgljNjleMQS6X91U3sY+77t9IIyxGBBVvs+i1l0Rl9fx+3P3BTlcqtbMlL",
	"A+n9CquPNwlXGV+SvCxnnvU6icFPmTU/8KoyGa44M5ZbiNtUlWshlYTETdr8wLXmO/e3sTsnLiCPmLXY",
	"yfJSGcis2iNJBOEANyy6++MdO0quYBdrYDi5+0AyFVK2dOymLHfMegQ4gmBBipgzsWQ7VbMtHp1SXGF/",
	"vxpH0xvmkI8o64g8Tm4cI+7BZiRIe6FUCVwiaXsZMnP4G7/NykDX1NxdXDhB0Vx0c1ZACbjIlgjxV2O1",
	"2uHiHSnMmaoc0lVth4dDFn5Y+tw/K0g4o+JqvJI9iy7FRtjhcn/kN2JTb5isNwvQDuHh5rOKabC1lohs",
	"DSxHnC06J7/iKzAM3MUoSNbGeRzjksoyDTxfj3MlgmkPI9rwm0yrWhYHiJSWKR1f2aaCXCwFFKwZZQyW",
	"dpp98Ah5HDytoBuBEwYZBaeZZQ84Em4SaHXH031BBEVYPWO/+LsDv1p1BbK5YohZAqs0XAtVm6bTCIw4",
	"9bQyJ5WFrNKwFDdDIN/67XAcgtr4C27jpatcScuFhMLdfQi0skDcZhSmaMJjRcgFN/Dtf47JT+1XDVew",
	"SzLdPgHQchqdde2+UN/pVTQz7DnUB9Ih3bEx/U3S3kF0h40yYhsJGcl99UwlbR/o9D/AQhDPTdppdidL",
	"AY0RrrexrejN9OGUEiNWGY04OCVideHu4qUo8Z7+wx2OgNnauHupi9twcxuxktzWGp5cyi/dXyxjby2X",
	"BdeF+2VDP/1Yl1a8FSv3U0k/vVIrkb8Vq7FNCbAmLQfYbUP/uPHSlgJ70yw3NUX4nJqh4q7hFew0uDl4",
	"vsR/bpZISHyp/yTZy12JOWg7BkBKW36l1FVdxRuad6xHix17+XyMWHDIKX6IvMNUShpAqn1KgsQb/5v7",
	"ybE8kMjRI1ng/A+jUBNpx660qkBbAbG1zv33PzQsZ09m/+O8te6dUzdz7idslT87dpXRAebWszBiXZ6p",
	"kTCwqWpLV3uKOzTH+V0DW3/OFi1q8QfkljaoC8YD2FR299AB7GE397dbpiPVH7hvfcn8A+4jXe4ZXtLD",
	"kX8xXnuq+EpIXPicbdcg2YZfOa7ApbJr0MzhAowN1zyxP7r5GzOjlxW8wH02S52YBE7NnZHaYu2VE3ff",
	"orh7Hyju6V5H4DoF0l+YbzA/2Nj7JIHVPeF+0v56efmOV5Uobi4vf+toXEIWcJPGxwdFdqlWWcEtP41G",
	"V89d1wSBfs401LVt3xcB3S/xHIGFj3uj3td23fNhO4nH/sVZE6fi7kzVGLB/5yWX+b1cpws/1MEY/lFI",
	"gUD8QKauv9Ac0Nxs5X2g2O/uvRxkMlsffIT/Qm7qDDfOgDuj9r5QehAiP7JGiFPexyZ9KsL/i+Lvl+L/",
	"Xqr86iRcTqEKR90z8/daK30PVBTk996q57MNGMNXkLaPxzsZGh6ydQFgRDu4JaAV8QfgpV0/W8MH2Mxo",
	"7D1betEazO5hYz/osYpse/vWH61qj0DeHfbIkxBNYz733ft8mFJnyw/n5R2c9jn64Tg2xyH5NtiIYyNw",
	"InLLR1kKSQ4DoaTDFPeBSOTCuZSX8jkshUSP7JNL6fjQ+YIbkZvz2oD2SsDZSrEnzA/5nFt+KWfz/kU4",
	"5k/BWBMPTVUvSpGzK9ilsEBBMGmTS7lSl5e/MassLyN/cxQa4718rcF4SHI0QeYoQ9U28yFlmYYt10UC",
	"dNP4GHFkitGZmnXO/NjkCvUha3789DEYxHmMWJzKnr3JJMJhhOzGqzj8/qSsdx7yLSP6YrUBw37f8Oqd",
	"kPY3ll3Wjx59DexpVbVGy9/b4BoHNLot7tUCigtHfGZwYzXPMBwguXwLvELsr4GZeoORJWXJsFs3hker",
	"leYbH1nQjw6aQADBcdhdFq0QF/eWet3OI2FwiEH3CVGIbdgaymF80bH4irSok9G1RxObCN28vHyHUZkB",
	"M02c0IoLacKtYMRKukPgA94WwHInBUBxxl4uGXK1eae7D7v2HLNhHcJQjBq7cGtEBzjLucTYtarAaCEh",
	"GZe7vsvNgLXBz/kGrmB3EfnPj/TD+mAbvudKLGo3XHMtthhmW27YRqEPNgdpy52P30mQZhqYWkhLgQSd",
	"aLARpoGnJgrTcgcnZiEjgW5R1BKvKrYq1cJzmoZEnzQ0GvqMM5XXDgBzDwwlqTh1A+fSG8F1YiPoII7F",
	"+h2/UDfenY7h5PJOJrml0AZjw4D7O4LHR+QEyvOBa0NQ/rkGlMqUxgCuLkmZcKRTRN/EpcxnFddW5KI6",
	"zIpOo7/u9HGD7Lvak5e5Wvbv7MGVmrxCqHG24CZ9fYP74iiwNhTU6NYYGF2YiaRlXMEZwyAUf1QXJcY5",
	"NhHyhGOuMQAzLJsixsdAS58L0LKVqQIY3R2Jhbc1NyEWEwOKA4s4SMwZId4LtwFIwO7cRNQby63CzVvC",
	"NR/b//H4l5eycLwDTDcutYluCdfKMDw4hJFRJlCIggmhLyHexf3rqL0uSyaWrJZXUm2dcHxMRMt85iS/",
	"Oo0kJVHyc2duRdtBjQP5eIC/MBHaHFQ/L5elkMAyJpo9sLgHFPutckEhtu359HOAUwy+ZI4G3QAHj5Ai",
	"7gjsSqmSBmY/qfjEytUxQEoQyGN4GBuZTfQ3pDU8FPBQ1qN4WiHT1JgHvuAkzM5liYBhwP4CQFJYLhNy",
	"zpyed81LJ61YRcJLM0g6fP1BR9T2Yp55OCbHp60PtCK8xY5aE917p6wmFhYD0GlJdgLiabklhQKD+0VS",
	"RLtXE0H6e6cekRXG9uoBLvwOAPTNnk1EoFd596qmwxutZe3zNuaS2Eia2scoJomXkR0bWiqa0KrX/Ws7",
	"aY/otGLUZOH160g8S7FkdypyJQ1IU2Nmi1W5Ks8GhggDJaBkk3UkiewKdmkdBpDBvg3dIiMFeyCWTqV4",
	"GIkuGlbCWOhknzQBsW287w4zNipuLWg30f958N9P3j3N/jfP/nyUffc/z397/5+3D78c/Pj49m9/+3/d",
	"n76+/dvD//6P2citAVmllVqOr85WeunW90aphitjR4YdO8v86Cu4VhYyFFCza16OhNu4Ri8MKs8vUJZN",
	"CgwdZDNKnhIjpkec9gp2WSHKOk2vft5/PHfT/tTYm0y9uIIdioXA8zVbcJuvUW7sTO/aTExd8r0LfkUL",
	"fsXvbb2HnQbX1E2sHbl05/g3ORc9XjvFDhIEmCKOIdZGt3SCQeJV/xxK8vSMJ/XS4Sxcw7MpK+vgMBVh",
	"7CmFKYJi/FaikZJr6QY4ja8Co+EwQUnYKBvLDFZ0qIKL1n+6D6JptrzR4D+4IhuvLlZm/ShpbdZ/vMPy",
	"hsMfurz7Cl9E7B1jpyFJaUBgeHD8YHuIKzIdD3ManJAczN90WiJVgVIWZby24TFqk+YOQ0wQQXwOn6qb",
	"q7Q3zQcjQEioErT2FC2ypVYbPHlDoTQiTjGikXdIsL1yerP6EhFDenHME1OX93rQgJf/gN2vri1i1fUO",
	"gumhR6Y1UAQdxqstd0PN3XwBKcr3I+6lfArJHSN7LCZABtmOb+/IE1CqVdreUK5Q7lCrNvMrJocFON0P",
	"biCvbZv017MnNibPjytN9m2n6SydyG1LlS2m5QfcKD/WHtS9bvjkh8QcryqtrnmZeWfXGI/X6trzeGwe",
	"fGMfWRxLH7OL75++eu3BR7cKcJ016szoqrBd9W+zKieXKD3CYkNm/JrbxpLQv/+9s0uYjoNsiwnVPY3Z",
	"SVqeuIhBt87P6PR6h9kyyOVHur+8n5aWOOGvhapx17Z2dvLWdj20/JqLMhi4A7TpS4UW1/rIj75X4gHu",
	"7OmNHPbZvd4Ug9OdPh17OFE8w0Tm9Iby9w1TPkO60XNRuUVrORLohu8c3ZB5csiSZL3J3KHLTCnytAtE",
	"LowjCUnee9eYYeMRNdmN6O7i9Fi1iMZyzcwBRrcekNEcyc0M0a9je7dQPryoluJfNTBRgLTuk8az2Due",
	"7jSG2iwnq0AJHx/VcPmIShBOeIz646tZ3GlxzSinKEFOrxlO6rHm19Pg7i76T2sjHsp/CMS08hMHYgzA",
	"fd5YSgMVNXZ3Ljs+6yPiueIZB1LGRCyWP3yeVdRSeC/ACdjZX3osKFq+6kmaXRylR8VFVO6kPZlsqdWf",
	"kLYeotF1O5w+mph6pwc/WAvqnZsRbUj0KiudgKqmDM1dQWq05zsD1b87G2dKW5euRdLooRsT22OnTzcS",
	"cISx4/mL4k1QQQ3eUC7pwD3D+nYdjSl9bOMQ0XMavz22HuahXYNvFzy/SkvPDqanbZRVx29rFQudmwJD",
	"XSydsShgq2nra/VUoDfCdq+BVjE7VRKmaQ+WgVuRF6kqFnZ9ua/SqMQwtdxyaUPFJc/QfG8D5HlyvbZK",
	"G4sF1JKrLCAXG16mReICd/+iI2QVYiWoVlJtIKr04wdilRLSEhUVwlQl31EcW7s1L5fs0Tziah4bhbgW",
	"RixKwBZfUYsFNyistKar0MUtD6RdG2z++IDm61oWGgq79kWojGKNtoKWnyZ8YgF2CyDZI2z31XfsAQaO",
	"GHEND90uehF09uSr77A6Ev3xKM3ksebdFNMtkOsGpp+mY4ycoTHc9elHTXNhqlo6zt8nThN1PeQsYUt/",
	"Jew/Sxsu+QrS4ZibPTBRX8QmerF6+yILquOGwhYTNj0/WO74U7bmZp2WDwgMlqvNRtiNDyQwauPoqa00",
	"Q5OG4agoHHH4Bq7wEaN0Kpa2631cGxNVa0mtGmOpfuIb6G7rnHHDTO1gbu1lniGeMV9sqWBKlrvIool7",
	"4+ZCAcUJm2h3XrJKC2lRY67tMvsvlq+55rljf2dj4GaLb/9zCPLfsSIVA5krN788DvCPvu8aDOjr9Nbr",
	"EbIPopbvyx5IJbON4yjFQ8/lu6dyNHAoHZUeOHo/KWF66EPlLTdKNkpudYfceMSp70R4cmLAO5Jis56j",
	"6PHolX10yqx1mjx47TD0y5tXXsrYKA1dw+8iJIp05BUNVgu4xgD5NJLcmHfEhS4PwsJdoP+0bv8gckZi",
	"WTjLKUWAkj2H2+F+jpc9pmIrdXUFUAm5Ol+4PiSq06h9IX0FEoww4xfoau0ox312V15kEcGh2QJKJVfm",
	"41N6AHzEr7wC5Ekvn++DejBwqBmZYdPxjXHt3BSvQ41JGtq1/xQ3UhNZvTeN+I1vOx4I7a4xSqV55hNf",
	"KOqn64Gl9W452slBFiTWIftbcyFHoqMBipHIN8AZ3yptBcWeAHyCODYrNmAs31TpaxYNx3QS8VQ7QJsu",
	"ThsxkCtZGGaEzIFBpcx6X77uSJ7ZjcTJSmHoyomrP+ZKU/09lCms6uVSHprpMZk12oUx00rZMUBR+IjT",
	"fZWyjNd2DdI2kdSABZH7K6FcENQ46EIhlsV+dDw+VC7kZbmbM2G/oHG0Dx/kbAP6qgRmNQDbrpUBVgK/",
	"hrY2OY72hWEXN6IwWHm8hBuRq5Xm1VrkTOkC9Bl74b3LqAVRJz/fozPms+B8JPjFjcTlFQpIRYrXScsM",
	"Af2NLyNe8Zwu0P7PWDLaQHkN5oxdbBUBYdrMYeOEkE6PRW0pg6YQyyXgOcXloPKE/doPEUxYZR2DrZth",
	"/Zo+wWm7kRnKxyNKpCVLxY18Ro2YTzvpOoh6R2NDGmsgqBKKFeg5GVJx28UG2kxxJ7spbVuDzRIoG8Nx",
	"NiGtVkWdA+Unv+3QYwSWGIDUFCaOPPxIQ6HIfQtnMLYEnuoUchRwH5GYJVV3hYg7uAZN0fLtQA+I6URw",
	"Gcs1hkZgpIRfKhQP08y5rlaaF3CYXxOZ4C/Uo8mrDSNcq+MG+NW174tNHdmkc+Onb+ko9tzdMjEvT/Gy",
	"UdHrzVia0guqDq+hpEwRLCyObecDwWoJkBkh09bPJQDydp7nUDlyjp/1AXCMioRYZBWY2BruVodhacU1",
	"UA7LhDCQ5bzM65LiQSdu+m3OS911o5SwtMoRWPzaQ2sSFG6uBcajUkVumk87Bhj1wIoe16B3vgVpT6EA",
	"tjscuuf7H+aKZSVcQ1qnAU4pYz+oLdtwuWtw4aZowZhHiSUN5CSroGOZsP2LV+wi8OkweaqbBtKhYmRz",
	"ixjPFWihCpEzIf8Af5obthQohirpK2mFrPEBAg0t3HRPMMx+62e4DSlAj+Xwuw/dYHIJ2w62i0ie64Ze",
	"G8uvgMAOeXr+ajwUpxqMKOoRU6bmeRey44jRH9433MK5blBr7okuexyqOeRTh65Pyz2y6WFruEujfKrD",
	"fA9hVrzJVGGeUSeiUX1xkNByRPdRVgWLU0iOb8a+Bm26cY6RDRBu9oztWnTGp5IpWpF94fhZshDGYkbn",
	"2xE7bmkuCF+U3Yr9wcdRJHZwpJ5MA4DZCpuvs5HUDteWWlBqTE/TGk5JIgSeQlguIbeHwIA5AvSgxCgU",
	"9NlB8Rx4gQmXbboHJXr0QXnwk2JuaBPJNdIIlEJbsQZHeXhEPdCGQvYR/6/qQNq/Vvg/dJEecAyCIONx",
	"nzZ7UhtPPG12L2c7MLgrTdRqdEYqZXiZ9vCESQso+W5qSmzQnbQRbIOTi+4c7u4wd6FQlGw6/Dia2p+z",
	"qcldk/6Cm+M5PBVxpfo+Jp+pTcVz+wx0WrXMQaNhW0OlwTjpkXE0NfLcMvdxaALL9a6y6tw3cm3MubG6",
	"zm1tyBCGs/Xx7a44yl7bXxAUdc6nTkl+7TrQzXYNnsFMdY3W+wZ7hIRxkuH3df9fIEGL/LlYgbGh6+lA",
	"O50QimwLYrVO7//28vK3E+IgpvDcJF1SQE8XC9egKfIpeekQMB9XQb3r5tgN10fsjqeKwcZU3V07kMbi",
	"vb6dzyplRDpZyl2z4WsQhNqyBI59RAAYhgaihBEKeT1Iq3en5DiIVWbKERuTob3upw1sQWeu3wSWyhNI",
	"mI4GLv6I3X7b9ElgeQ/e38bz9RRJXuZKZh2IPu4ZICNbhljPmhDGPTvKN90dRTZ1CpdCnrATcjWeJnoF",
	"u4/PG1IY/f6alyNZlW/iK+zi+6evfGzKWG5lPpoKzK2vwWE5Gy2bczvHPUiLvBT+jN/9s45Jv9xYyDNF",
	"PLvPg96nhcqNlZeMNjRE0A8B+kdI8GIVFz7wqk0sHe6sp6Jh+vchSWItgvuL8Cm8OEhqJd27O3GGBwD9",
	"wM36Bc+t0rshV1hzsx4pM+OjAY5BylffpunZgZCeBEMNfAEbdA4ua0n2qyaCD6PnggKjloMqNgzL2Kz5",
	"N189/r+Pv/k2/Pn4m2/jkjXN99l85r+mitbENV2HwZNsjZ+p2hsLLxcNaWO09G2xyJr0kNQLZvOZL10b",
	"1+vcmxMmTLYRK406SnrU8ZK7kfMukWNPunHiLU2vh4wrzz2y7iy8B3ELXmt5DTOnjsCAu6epetnS/GQV",
	"3+h4YFy8HfHT2jWdhoM8YgMRe+gTA6egVSOz2eLIo/df6ZM3eHUgQdRGbKqS4tf8tg/q4hyVs9+G2X/4",
	"rI37Dnn/4EHrcHLs1P3Hqp8Ky/7KP9MR6j9LJ7KWMC6aVBR5SM/vklECa51FD60GL5bK81q37s1+DPqv",
	"vBT0AqDBemdSqQoLnFVWSPcfTH9XtaX/A9fuP1R9s/s/oqroTnFDzRAvWHEoDBSy22bzGXWeBcpO3jgn",
	"ltA4iAsNxZ4EJ5rMq+uIm4iZkqIJ2lxBdyrxywq/xCmJjADBOFgT/jKsAAt6IySwtdqyTZ2vMQuPryAk",
	"5eHljz7p3kSd0UOeQje51Md1mYrnNBDFfpdcr0AzH47N/KMjjTCx4aL3tGo/4hK9BDwlCu5LFRw+KYyC",
	"e5QwmMhIDGBcwe6c5FL8/QTGMZ53OAIYZh9+QJDulMQY58HuoderjkhPpXQ7qcMN+Pco2jv4/Fk7UrQf",
	"ZvgeujxcBx6H2sBwnYfH8cR7m2AV7doO1UuHmzuuTtrFIerkuLKC+ixtCNapZQgq+/2r35mGpX/R/csv",
	"cYIvv5z7pr8/7n52hPfll2nj9sfSZGmP/Bh+3iTFdB9r6L93jwzNYNE//yB9rjYbJdGHV5a9ACpZMAwp",
	"N/hCvWQgr6FUFSRb0wZHSMfUYQ2ruuQUOCSkBN3pdEhOGNmS7Y0kG/tb/PPiRqbaxlc9to62I1XMP3pj",
	"77RXLnpVmykjL8fct1NHbLPn2hEpy+YuI76gFJ9mRBxqCfouY174MQ4ooL6SmkolUI6bCBHfKKQRhnuP",
	"UIco8FBYPeSyNcFx8K+alz74T2Ko3QXmc+VXIKlmem2alzIYSFNrH2vnYMXxHCh+GBVf8KZtcmr19Gyq",
	"IrHOyfXkQxx8hD/mJlJXJ3oUDjlqut6nay/kKptIY84xj9k3DHUq0Hk4WRzbDU5G5CwHbU8kk9gLhyPK",
	"pdAbKA6seBQHL2H2f+g/AnBb2rN9OjOdFx89qy+H9cHYg5fPHzIs/jdWhi16JX3/RsbVRQ+DiBJRBrD0",
	"6yAcA8USYCxirBdky5YwEnywr4bl8rotX4mt+l7+vVAemDXwAzdYj9I399GNn2mqQAdI/zb6cKi4bsvR",
	"NQ7ns5VWdTqyfEW1hHo5L6hqoBhH8c5kDj1//M23rEAT1Rn7JyZ203U+rFzdxSYTbUXsTuF9hoA1xUJI",
	"wvJBrdGca4/QQfCy8MGtOMzHx/AppbXmM5R0MnuTCsB/OZCCWOUjgbHORcRvOpEV9xF2L6TVnJhvppbL",
	"ZO2Xn/H31jilA0/WMMT6AVz5CnYaTpWG/oGdsRTRdDHZ8rqpI3sa4ylh7FmD8iZxfL5+nLUn6Iy9cr0Z",
	"yKXSTnff1NZJFXCDOeBkPe3IvZgYbdsnXjAnWv4JWqFpQjIlcxjcgSLabAzk5TlqCMZHozsYmiIvTcrg",
	"g7coH80JyIek+Q6PGqulFSRQuW38NdrFyl08Duh/rkWZoIJKue8mhmPOpGL0eFncktIu2gR/gtkn1XUI",
	"6eMe87jQVZG2vDlKKKhoYFsfsrV75Gsu29eY9lcTHNLkYS+oDKrsJo75fVY9nIDz05Y9lGokAln62s5O",
	"5cFU+8ZG93EBrvhuA/JU0fk19aYQMHyNRE/rFHpEpwi9973tcgW7zKr02EBxECSZN8obWmOJ20ZrnI9o",
	"Uk0YZ3jHqpVd6QQ5EWFZY1xQlFMUrLFeSWys+lewa4P34jL6pIidoLfRtWhFKhX9Qmyg1UtIkEuJQOKg",
	"K5EU1rSmTNmRxLK/mFhOM8w0VZgRqqC+0zRxcKhSRLZRqNJ8Zm8mAgl2FXRjPTtP13STm9BqcMaeN0ln",
	"6L2h9Is2E40sWn0fD5VuaSrpCB0sX1wHKza6gS4v31UU+po4uL4ByTKuzVCq8U14vlw1D+AlTEGh2c0S",
	"dNsuZY4JLZf6z7bh0BIUmg3fTky0CmGvo7p968uq+G4WpLfZfObW5f5xcLt/l/rPGb4qWM7mMzfM0JWV",
	"PnGeKDKcJ5H2MOuqmR3Jrzk6LW3tMYJOVnL3wdzoNIquwWMtlLFdnWpXtT8842V5cSNppkQsFnHJMZcn",
	"PY7g03Qblur4rvd6BsOVP86xg4bnuZPJijYNKILzC8P6JTgpOWhYhLNz5R/JUhOPYTbEyfVqdN1osxrK",
	"jSJnXK/qDfkUPvz69qxgtPC8KHyFgGH1dC9jEV+oNRRMaZ8bLJY+8Xus/N+BJZHpEdFXaiXyVpZrM5NG",
	"KH3utBWofCEuJbO8cci7i82phFaxS3JkX87O2EvKI9TAC+KwWlhIFeftrB+LmmwBHx0KFJ012I1Kr5+5",
	"U9QpfmyQsjXgW6GJctz/ruWeeWXqEYyNcSUSg7pI+gQYeuZmap/ZISTlXEpl/43wdGS5595ryVH4SVU1",
	"dZ9LkOHRbhKUcdgRo6rSIFZy6oXTJQ8XgemjK3kddLmUr18QI94MbolGfj6NiaLzhQajhwx5kSlZ7lLc",
	"Na5V0WOvzV5MPnPaVK8wbciS8auMCiUetsTAZl5HK0TCRh379f2u74Tq3Hcuyd0boMM19vXtxGUlinjH",
	"d2F/6H2SWeTonJTMqGpf6RZO/ElDFu7PwLFkQQX96jbM61I+ZX+CVl67bIZyB6I1ZvuqTr7gylmiU1N9",
	"0wy69ac8sropLX5COhytGnx5+e6GD6QMhOkO8sVpBaD34vjFSHXJGMfBt+XLSd6xbCzNOLGxY4/4X16+",
	"W/Ki6BXai0O/iMk0heJot32ZTSQWvh2paDmJzeUkNifG72TlboN6OPHQalAnKf95G3aceqTCYcdDO9vy",
	"w8OpDzn8TfzAQaQRVOS7EkeYdYI8JoqC8w3qZE+b9x48cKqB74x5FuJ97eF3HQwv5TJws+BMC+7e3ku3",
	"T+le2/DqXkuO72UeEcTjYQcwGnTQ5rqHN1j9eFEZLxygjW7ov6d7t4e7w+hpDOLXfoYzj2v8tW/4a9hg",
	"en6rYiaQ42sDN2JhW7SZAjkw7iIOTTfRDPFeM/bSjczLLd+ZYFhtCWt8uLCrVAwwYdSL63eQNTi9NzpH",
	"N9obyEUlQNom6ibGi6PxcXNkemBv1nRMhwoLiOvGaOFj03lbbbvrKgueMl83mEcX9NxvMy+71gIaOJiO",
	"XZtnYeywogal0X22P2klVXu92dI9PG8yJT3meJ08dPYgesb0YedksAO4X5St7nPUWyjGOWDuYTwwPxUP",
	"HWg7UQvIffaV/0KQj8jXUaJvS8VxEn6a/aDRcsyw7L4G4/JFsCb3x2UvabjWhYAkKCnH2GcZkOLmCzp0",
	"8v7PVuo+kteHju5puiBj7LEXIPUi7NM044iX/QdERzxs0jVyO/wj11cdAYmb7nv9lKHTGbUjf0Z5NSc8",
	"aez9Uq/bN1sxT6DxEv1Kaf8Fe8NloTbsRcglfPDrmxcPmQZTlzZwoFDuzHEmD8ln+tpxpZd+5W97bxyH",
	"NAlyj62EsTph1P58X0BeDl9ATrwD7FZ3X28fXxWf6O3jcvD28ekrPfzV43Bixt48/iwJaA/zDL7yae7p",
	"3XrHsk/fjfinn+k03YFUhzazJioc5vAZ6tz2pMI7SeDRFFQi0ommxr9V0Eri3Yjj9tUQ2QQOR06mvRHJ",
	"3fFGnjj0QjhOgsXOxVAcdxPivezvllZs9i/U0msnZSQZL2snSnS3sH11b8KZPikYe7k4tJn0y49JjIeK",
	"iZ2CHV1I0Kvt85TaGiq9hzXxBQp6a+JnWe58Tny/fGy7lZVW16JIvXdXqpXIDZnnjnX/vwp9b+ezTV1a",
	"ceI4P4a+FI+Qvg7Fyl+FsuC6YFA8/uabr75rl/uZsavhJiVjtfyyvAWaW5F3lZxmdQcwsYBKElx7LGvU",
	"EatXrV+qcbzO8c2cNhTyOP8pAjJaTicsNkT7LHaMR6SunE5XWtH+NHe/rblZt6wzevcI36PizPOrfggn",
	"pqR9modVo0OR3SnKpnc8xhhHe0g+h7PRe3dY5AezxB8jTjJ8Fsgv0ddk0+0jdLjXVQlOtmt54GiFt4Aa",
	"uvLDnG/F8PnAeLz0rmMDfOdAOUmECsk4YbKVuNB61EJ1Qqj3YH/exnClSk2sNRgHUTo0a62TpSamyn84",
	"6TLd6fZI3L7t7WmvXBnu26iEW119ilJue2jgc6ggdYvR/0uUxnIlLc9RbqSHd2ZPvdli5t95ma2trcyT",
	"8/PtdnsWbBpnudqcrzCDKbOqztfnYSB6ATWuUuC7+ArpjguXOytyw56+fokyk7AlYDJEATdoO2koa/b4",
	"7BEVtwDJKzF7Mvv67NHZV7RjaySCcyq6Q6+M4DociaBg9LLAJPYriMv24LtKWJgHuz9+9Chsg9caIk/m",
	"+R+G6Psw52o8DW5ydyMeoOvtYfSu25BEfpFXUm0l+15rRefF1JsN1zvMoba1loY9fvSIiaUvNkQ18Li7",
	"td/NKH939pvrd379+DwKKev9cv4+RHOI4nbP53NeVSaLfM172weH/WSrRIbe4X0OmqH3+EVom54v+vX8",
	"fdebfXtgs3Mfax/a9oHEv8/fB3Px7cSnc1+AYqr7yPqoqPD5ewphJg0zmirdqSMgvrc3Hjo0xGl3HGdP",
	"3r3v8QO44ZuqBGQFs9vfGjJsOIknx9t580up1FVdxb8Y4Dpfz25/u/3/AQAA//8YfmRaX8cAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
