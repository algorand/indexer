// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/x8AAP//wYg3rA7wAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
