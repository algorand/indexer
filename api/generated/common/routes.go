// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
