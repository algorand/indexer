// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tT/1+poAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
