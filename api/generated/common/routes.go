// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
