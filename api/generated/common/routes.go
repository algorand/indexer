// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
