// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
