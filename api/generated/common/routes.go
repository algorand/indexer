// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
