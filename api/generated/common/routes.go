// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
