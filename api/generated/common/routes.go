// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7/9/AAAA//8a+VinDqUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
