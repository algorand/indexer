// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3PctrIg/lVQ87tVsfMbSo7zqHtUdeqWY8cbV+zEZSs5u9fKbjBkzwwiDsAAoDST",
	"rL/7FroBEiTBGY4kyz5V+cvWEI8GutFo9POvWa42lZIgrZmd/TWruOYbsKDxL57nqpY2E4X7qwCTa1FZ",
	"oeTsLHxjxmohV7P5TLhfK27Xs/lM8g20bVz/+UzDH7XQUMzOrK5hPjP5GjbcDWx3lWvtR3r/fj7jRaHB",
	"mOGsP8lyx4TMy7oAZjWXhufuk2HXwq6ZXQvDfGcmJFMSmFoyu+40ZksBZWFOAtB/1KB3EdR+8nEQ57Nt",
	"xsuV0lwW2VLpDbezs9kT3+/9wc9+hkyrEoZrfKo2CyEhrAiaBTXIYVaxApbYaM0tc9C5dYaGVjEDXOdr",
	"tlT6wDIJiHitIOvN7OzdzIAsQCPmchBX+N+lBvgTMsv1Cuzs13kKd0sLOrNik1jaC485DaYurWHYFte4",
	"Elcgmet1wl7VxrIFMC7Zm+dP2ZdffvkPRttoofAEN7qqdvZ4TQ0WCm4hfJ6C1DfPn+L8b/0Cp7biVVWK",
	"nLt1J4/Pk/Y7e/FsbDHdQRIEKaSFFWjaeGMgfVafuC97pgkdD01Q23XmyGYcsf7EG5YruRSrWkPhqLE2",
	"QGfTVCALIVfsEnajKGym+XAncAFLpWEilVLjOyXTeP6PSqcLtc0IpgHRsIXaMvfNcdKV4mXG9QpXyD4D",
	"mSuHx7MrXtbw2Ql7rjQT0pq5xzX4hkLasy8ef/mVb6L5NVvsLAzaLb756uzJP//pm1VaSMsXJfhtHDQ3",
	"Vp+toSyV7+CZ2XBc9+Hsf/6v/z45OflsDBn4z/QLKr21/+OnJy+5Ht356HNeaw0y32UrDRy51ZrL4f6/",
	"8dRn1qouC7bmV0hqfIPXru/LXF86WoiJE/ZK5Fo9KVfKMO6JtoAlr0vLwsSslqW7Jtxo/ugzYVil1ZUo",
	"oJg7fF+vRb5mOfebie3YtShLR/G1gWJsM9OrO8BZmk4OrhvtBy7o092Mdl0HdgK2yHuGy/9u6zlsUQj3",
	"Ey+ZsLAxzNT5mnHjoVqrsqADE10erFQ5L1nBLWfGKseUl0p7aYk49tz3bwVAliMCC7bY9VvKojP64T5u",
	"f2BblcqtbMlLA+n9CquPNwlXGcslvCxn/rZzQpqfMmt+4FVlMlxxZiy3ELepKtdCKgkJ4aX5gWvNd+5v",
	"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",
	"BrjO17P3v77/fwEAAP//MIpTADXZAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
