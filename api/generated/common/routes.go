// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ap31+M7/CwAA//9v3aaM4PAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
