// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
