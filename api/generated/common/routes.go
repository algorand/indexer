// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
