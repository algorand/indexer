// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//8S/wGnwlAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
