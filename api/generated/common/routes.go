// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
