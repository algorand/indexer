// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e4/cNvLgVyH6fsDaudaM42yCi4HFD147Rox1sobHyQLn8V3YUqmbGYnUktTMdHzz",
	"3Q+sIiVKovoxM34skL/safFRxSoWi/Xih0Wu6kZJkNYsnnxYNFzzGixo/IvnuWqlzUTh/irA5Fo0Vii5",
	"eBK+MWO1kOvFciHcrw23m8VyIXkNfRvXf7nQ8O9WaCgWT6xuYbkw+QZq7ga228a19iPd3CwXvCg0GDOd",
	"9Z+y2jIh86otgFnNpeG5+2TYlbAbZjfCMN+ZCcmUBKZKZjeDxqwUUBXmJAD97xb0NoLaTz4P4nJxnfFq",
	"rTSXRVYqXXO7eLJ46vvd7P3sZ8i0qmCK4zNVr4SEgBF0CHXEYVaxAkpstOGWOegcnqGhVcwA1/mGlUrv",
	"QZOAiHEF2daLJ+8WBmQBGimXg7jE/5Ya4A/ILNdrsIv3yxTtSgs6s6JOoPbSU06DaStrGLZFHNfiEiRz",
	"vU7YT62xbAWMS/bmxTP2zTfffM9oGS0UnuFmsepnj3HqqFBwC+HzIUR98+IZzn/mETy0FW+aSuTc4Z3c",
	"Pk/77+zl8zlkhoMkGFJIC2vQtPDGQHqvPnVfdkwTOu6boLWbzLHNPGH9jjcsV7IU61ZD4bixNUB70zQg",
	"CyHX7AK2syTspvl4O3AFpdJwIJdS43tl03j+z8qneas1yHybrTVw3DobLqdL8sYvhdmotirYhl8i3rzG",
	"M8D3Za4v0fmSV61bIpFr9bRaK8O4X8ECSt5WloWJWSsrJ7PcaJ4PmTCs0epSFFAsnRi/2oh8w3JuaAhs",
	"x65EVbnlbw0Uc8ucxm4Pm3edHFy3Wg9E6MtdjB6vPSsB17gRpuj/cO23e1EI9xOvmLBQG2bafMO48VBt",
	"VOU2u1mySJKxSuW8YgW3nBmrnIQolfZHN4mPpe/fayMsRwIWbLUdt5TFYPT9fdz6wHVTKYdZySsD6fUK",
	"2MeLhFjGhySvqoUXvU5j8FNm3Q+8aUyGGGfGcgtxm6ZxLaSSkDhJux+41nzr/jZ269QFlBGLnjpZXikD",
	"mVV7NImgHOCCRWd/vGJH6RXs7QYYTu4+kE6FnC2duKmqLbOeAI4hWNAilkyUbKtadoVbpxIX2N9j43i6",
	"Zo74SLKByuP0xjnmnixGgrVXSlXAJbK21yEzR7/506wKfE3N3cGFExTdQbdkBVSASPZMiL8aq9UWkXes",
	"sGSqcURXrZ1uDln4YenzeK8g48yqqzEme5CuRC3sFN2f+LWo25rJtl6BdgQPJ59VTINttURia2A50mw1",
	"2PkNX4Nh4A5GQbo2zuMEl1SWaeD5Zl4qEUx7BFHNrzOtWlkcoFJapnR8ZJsGclEKKFg3yhws/TT74BHy",
	"OHh6RTcCJwwyC043yx5wJFwnyOq2p/uCBIqoesJ+8WcHfrXqAmR3xJCwBNZouBSqNV2nGRhx6t2XOaks",
	"ZI2GUlxPgTzzy+EkBLXxB1zttatcScuFhMKdfQi0skDSZhamaMJjVcgVN/DdX+f0p/6rhgvYJoXumAEI",
	"ne7OunFfqO9uLLoZ9mzqA/mQztiY/3by3kF8h40yEhsJHcl99UIlbR8Y9D/AQhDPTbfT7E6WAhojHG9z",
	"SzGa6eNdSoxYZzTiZJeI9Vt3FpeiwnP6d7c5AmVb486lIW3DyW3EWnLbanhyLr9yf7GMnVkuC64L90tN",
	"P/3UVlacibX7qaKfXqm1yM/Eem5RAqxJywF2q+kfN17aUmCvO3RTU4TPqRka7hpewFaDm4PnJf5zXSIj",
	"8VL/QbpXNTdz6pr8SqmLtolXMh+YjVZb9vL5HJfgkLsEIQoN0yhpANn1KWkQb/xv7icn60CiKI+UgNPf",
	"jcIrSD92o1UD2gqIzXTuv/+loVw8WfyP096sd0rdzKmfsL/12bkzjHYut152kczy0oy0gLppLZ3pKbHQ",
	"7eN3HWzjOXuyqNXvkFtaoCEYD6Bu7PahA9jDbu5vtcxAnT9w3cYq+UdcRzrVMzydpyP/Yvy1qeFrIRHx",
	"JbvagGQ1v3DigEtlN6CZowUYG853knt05Hf2Ra8keE37ZJHaMQmamjsTtafaK6fnnqGeex8kHl26jqB1",
	"CqQ/Kd9RfrKw98kC63ui/U7D6/n5O940org+P38/uGoJWcB1mh4fldiVWmcFt/x2PLp+7romGPRL5qGh",
	"Ufu+GOh+mecIKnzaE/W+luueN9utZOyfkjWxK+4uVI0B+3decZnfy3G68kMdTOGfhBQIxI9k4/qTzIHM",
	"3VLeB4n96t7LRiZ79cFb+E/ipvZw5wW4M2nvi6QHEfIT3whxyvtYpM/F+H9y/P1y/N8rlV/cipa7SIWj",
	"7pn5B62VvgcuCvr7COvlogZj+BrShvF4JUPDQ5YuAIxkB4cCmg9/BF7ZzbMNfITFjMbes6Rve4PZPSzs",
	"R91WkW1vH/4RVnsU8uGwR+6EaBrzpa/elyOUBkt+uCwf0HQs0Q+nsTmOyDfBRhwbgRMhWz68UkjyFAgl",
	"HaW4j0Ai3825PJfPoRQSXbFPzqWTQ6crbkRuTlsD2l8CTtaKPWF+yOfc8nO5WI4PwjlHCgaZeGiadlWJ",
	"nF3ANkUFin5Jm1yqtTo/f8+ssryKHM1RTIx37/UG4ynL0QSZ4wzV2szHkmUarrguEqCbzrmII1Nwzq5Z",
	"l8yPTT5QH6vmx09vg0mAx4zFqRrZm0wiDkbIYaCKo+/PynqvIb9ixF+sNWDYbzVv3glp37PsvH306Btg",
	"T5umN1r+1kfVOKDRbXGvFlBEHOmZwbXVPMM4gCT6FniD1N8AM22NISVVxbDbMHhHq7XmtQ8pGIcF7SAA",
	"wXHYWRZhiMidUa+bZaQMTinoPiEJsQ3bQDUNLDqWXtEt6tbk2nMT2xGzeX7+DsMxA2W6AKE1F9KEU8GI",
	"tXSbwEe6rYDlTguA4oS9LBlKteWgu4+39hKzEx3CUHAae+twRM83y7nEoLWmwDAhIRmX27HLzYC1wcH5",
	"Bi5g+zZynB/pgPVRNnzPkVi0brjuWOwpzK64YbVC52sO0lZbH7iTYM00MK2QliIIBmFgM0IDd00Un+U2",
	"TixCZiLconAl3jRsXamVlzQdiz7peDT0mRcqrx0A5h4ESvLiNIyYSy8E14mFoI04F+R3PKJuvDttw53o",
	"3ZrlSqENBoUB92cEj7fILTjPR6xNQfnXBlArUxojt4YsZcKWTjF9F5CyXDRcW5GL5jArOo3+etDHDbLv",
	"aE8e5qocn9mTIzV5hFDjbMVN+vgG98VxYGsomtHhGARdmIm0ZcTghGH0id+qqwoDHLvQeKIx1xh5GdCm",
	"UPE50NL7ArTsdaoAxnBFYuVtw00IwsRI4iAiDlJzZpj3rVsAZGC3byLujfVW4eat4JLPrf984MtLWTjZ",
	"AWYYkNqFtYRjZRoXHOLHKAUohL+EmJcQ6OL+ddzeVhUTJWvlhVRXTjk+JpRluXCaX5smkpKo+bk9t6bl",
	"oMaBfTzAfzER2RxU/yzLSkhgGRPdGlhcAwr6Vrmg2Np+f/o5wF0MvmKOB90AB4+QYu4I7EapigZmP6t4",
	"x8r1MUBKEChjeBgbhU30N6RveKjgoa5HgbRCprkxD3LBaZiDwxIBw0j9FYCkeFwm5JK5e94lr5y2YhUp",
	"L90g6bj1BwNV26t55uGcHp+2PhBGeIodhROde7fBJlYWA9BpTXYHxLv1lhQJDK4XaRH9Wu2Izt879Yyu",
	"MLdWDxDxOwAwNnt2oYD+yrv3ajo90XrRvuyDLUmMpLl9jmOSdJlZsamlogutej0+tpP2iEErRk1W/n4d",
	"qWcpkex2Ra6kAWlaTGmxKlfVycQQYaAC1GyygSaRXcA2fYcBFLBnoVtkpGAPROmuFA8j1UXDWhgLg7ST",
	"LhK2D/TdYqpGw60F7Sb6Pw/++8m7p9n/5tkfj7Lv/+fp+w9/vXn41eTHxzd/+9v/G/70zc3fHv73fy1m",
	"Tg3IGq1UOY+dbXTp8HujVCeVsSPDjgM0PzkGl8pChgpqdsmrmXAb1+iFwcvzC9RlkwrDgNiMsqbEjOkR",
	"p72AbVaIqk3zq5/3H8/dtD939ibTri5gi2oh8HzDVtzmG9QbB9O7NjumrvhehF8Rwq/4veF72G5wTd3E",
	"2rHLcI7/kH0xkrW7xEGCAVPMMaXa7JLuEJB41D+Hijw989m8tDkL1/Bkl5V1spmKMPauC1MExfypRCMl",
	"cRkGOM1jgdFwmJkkbJSGZSYYHXrBRes/nQfRNFe8u8F/9ItsjF18mfWjpG+z/uMd0JsOfyh69xW+iNQ7",
	"xk5DmtKEwXDj+MH2MFdkOp4mMzglOZi/abdEVwXKVZQxbtNt1GfLHUaYoIL45D3VdkfpaJqPxoCQuEoQ",
	"7ileZKVWNe68qVIaMaeYuZEPWLA/ckaz+toQU35xwhNzlvd60IBX/4Dtr64tUtX1DorpoVumN1CEO4y/",
	"ttyNNHfzBaQ434+4l/MpJHeO7bGKABlkB769I3dApdZpe0O1Rr1DrfuUr5gdVuDufnANeWv7bL+RPbEz",
	"eX5abXJsO01n6URuWyppsVt/wIXyY+0h3etOTn5MyvGm0eqSV5l3ds3JeK0uvYzH5sE39onVsfQ2e/vD",
	"01evPfjoVgGus+46M4sVtmv+Y7ByeonSMyI2pMRvuO0sCePz3zu7hBk4yK4wk3p0Y3aalmcuEtC98zPa",
	"vd5hVga9/Ej3l/fTEoo7/LXQdO7a3s5O3tqhh5ZfclEFA3eANn2oEHK9j/zocyUe4M6e3shhn93rSTHZ",
	"3endsUcSxTPsSJmuKXHfMOVTo7t7Ll5u0VqODFrzreMbMk9ORZJs68xtusxUIk+7QOTKOJaQ5L13jRk2",
	"nrkmuxHdWZweqxXRWK6ZOcDoNgIymiO5mCH6dW7tVsqHF7VS/LsFJgqQ1n3SuBdH29PtxlCU5dZXoISP",
	"j4q3fMJLEE54zPXHl7G4E3LdKLe5BLl7zXRSTzWPT0e7u9x/ehvxVP9DIHZffuJAjAm4zztLaeCizu7O",
	"5cBnfUQ8VzzjRMvYEYvlN58XFa0U3gtwC+rsrzkWLlq+3ElaXBx1j4qrp9zp9mSyUqs/IG09RKPr1XT6",
	"aGLqnR784FvQaN/M3IbEqKTSLUjV1Z+5K0jd7fnOQI3Pzs6Z0hek64k0u+nm1PbY6TOMBJwR7Lj/ongT",
	"vKAGbyiXtOGeYWG7wY0pvW3jENFTGr/fth7mqV2DX614fpHWnh1MT/soq4Hf1ioWOneVhYZUOmFRwFbX",
	"1hfpaUDXwg6Pgf5idltNmKY9WAfuVV7kqljZ9XW+KqMSw7TyiksbSi15geZ7GyDPk+t1pbSxWDktiWUB",
	"uah5lVaJC1z9twMlqxBrQUWSWgNRiR8/EGuUkJa4qBCmqfiW4tj6pXlZskfLSKp5ahTiUhixqgBbfE0t",
	"VtygstKbrkIXhx5IuzHY/PEBzTetLDQUduOrTxnFutsKWn668IkV2CsAyR5hu6+/Zw8wcMSIS3joVtGr",
	"oIsnX3+PZZHoj0dpIY/F7nYJ3QKlbhD6aT7GyBkawx2fftS0FKZypfPyfcduoq6H7CVs6Y+E/Xup5pKv",
	"IR2OWe+BifoiNdGLNVoXWVABN1S2mLDp+cFyJ5+yDTebtH5AYLBc1bWwtQ8kMKp2/NSXmKFJw3BUDY4k",
	"fAdX+IhROg1L2/U+rY2JqrWksMZYqp95DcNlXTJumGkdzL29zAvEE+arLBVMyWobWTRxbdxcqKA4ZRPt",
	"ziVrtJAWb8ytLbP/xfIN1zx34u9kDtxs9d1fpyD/HUtRMZC5cvPL4wD/5OuuwYC+TC+9nmH7oGr5vuyB",
	"VDKrnUQpHnopP9yVs4FD6aj0INHHSQm7hz5U33KjZLPs1g7YjUeS+k6MJ3cMeEdW7PA5ih+PxuyTc2ar",
	"0+zBW0ehX9688lpGrTQMDb+rkCgy0Fc0WC3gEgPk00RyY96RFro6iAp3gf7zuv2DyhmpZWEvpy4ClOw5",
	"XQ73c4z23BVbqYsLgEbI9enK9SFVnUYdK+lrkGCEmT9A1xvHOe6zO/IiiwgOzVZQKbk2n57TA+AzfuU1",
	"oEx6+Xwf1JOBQ7HIDJvOL4xr56Z4HYpL0tCu/ec4kbrI6r1pxG982/lAaHeMUSrNM5/4QlE/Qw8s4XvF",
	"0U4OsiC1DsXfhgs5Ex0NUMxEvgHOeKa0FRR7AvAZ4tisqMFYXjfpYxYNx7QTcVc7QLsu7jZiIFeyMMwI",
	"mQODRpnNvnzdmTyza4mTVcLQkROXfcyVpvp7qFNYNcqlPDTTY2fW6BDGTCtl5wBF5SNO91XKMt7aDUjb",
	"RVIDVkIeY0K5IHjjoAOFRBb7ycn4ULmQV9V2yYT9C42jffggZzXoiwqY1QDsaqMMsAr4JfRFyXG0vxj2",
	"9loUBkuOV3AtcrXWvNmInCldgD5hL7x3GW9B1MnP9+iE+Sw4Hwn+9loieoUCuiLFeBKaIaC/82XEGC/p",
	"AB3/jLWiDVSXYE7Y2ytFQJg+c9g4JWTQY9VayqApRFkC7lNEBy9P2K//EMGE5dUx2Lob1uP0GXbbtcxQ",
	"P565RFqyVFzLZ9SI+bSToYNotDVqurEGhqqgWINekiEVl13U0GeKO91NadsbbEqgbAwn2YS0WhVtDpSf",
	"fDbgxwgsMQGpq0gcefiRh0J1+x7OYGwJMtVdyFHBfURqllRDDJF2cAmaouX7gR6Q0IngMpZrDI3ASAmP",
	"KhQP08K5bdaaF3CYXxOF4C/Uo8urDSNcquMG+NW1H6tNA91kcOKnT+ko9tydMrEsT8myWdXrzVya0gsq",
	"C6+hokwRrCiObZcTxaoEyIyQaetnCYCynec5NI6d4/d8AJygIiUWRQUmtoaz1VFYWnEJlMOyQxnIcl7l",
	"bUXxoDtO+qucV3roRqmgtMoxWPzMQ28SFG6uFcajUilumk87ARj1wIoel6C3vgXdnkLla7c59Mj3P80V",
	"yyq4hPSdBjiljP2orljN5bajhZuiB2MZJZZ0kJOugo5lovYv/mIXgU+byXPdbiAdKWYWt4jp3IAWqhA5",
	"E/J38Lu5E0uBY6iEvpJWyBZfHtDQw03nBMPst3GG25QD9FwOv/swDCaXcDWgdhHpc8PQa2P5BRDYIU/P",
	"H42H0lSDEUU7Y8rUPB9Cdhwz+s37hls41R1pzT3x5UhCdZt816Yb8/KIbUbUmq7SrJwaCN9DhBXvMlWY",
	"F9SJaFRfHCS0nLn7KKuCxSkkx3djX4I2wzjHyAYI13vGdi0G41PJFK3IvnD8LFkIYzGz821JHPc8F5Qv",
	"ym7F/uDjKBIrOFNPpgPAXAmbb7KZ1A7XllpQaszopjWdklQI3IVQlpDbQ2DAHAF6SWIWCvrsoHgOvMCE",
	"yz7dgxI9xqA8+FkxN7SJ9BppBGqhvVqDozw8oh5oxyH7mP9XdSDvXyr8H7pID9gGQZHxtE+bPamNZ54+",
	"u5ezLRhclS5qNdojjTK8Snt4wqQFVHy7a0psMJy0U2yDk4vOHO7OMHegUJRsOvw4mtrvs12TuyZjhLvt",
	"Od0VcaX6MSV/uOTVTBbKG2g0GKcwMs7e/vD0lfflzeWi5LOpU9z6nGXL2WyZgZslXnjSIoLCxfC7f/8q",
	"acecCxGjCDH3edL7dqEFc+W4ogUNEYdTgP4RAuJZw4V3VPeJONOV9clZ03S5Q4LqewKPkfApTzhICpMf",
	"udmk0+jRy+Fz59EuWbaSVOcueAAd90F2qnKSQM8wg37Dv/368f99/O134c/H334XZ8t3392Ngr6m8uXj",
	"cnLTuA22wc9UaIaFRxOmyzxbda9YZV1kaurVlOXCV82LS4XtDUcXJqvFWqN4TI86X+0vshsm0vvoWE68",
	"3+VF4Py5PeKQAeIjiHvw+ktfmDnFTZMivglCGVE3FbmD/VCTNPOjUuD6qLWPHwR53xFkHz0GDG7tirz/",
	"0K/bwrI/kX53wNc/5TNVNxXMn1wNOfLpGTs647F0SPRgWTAKqTxvdW8tHId0/corQS/pGCwfIpVqsF5I",
	"Y4V0/8FsMtVa+j9w7f5DxayG/yOuiuSkG2qBdMEE/jBQCBZfOOWioKuN75uSorfMSD3IzD09FRMScWeY",
	"+kAbQcpUZJzvQ+/drsQva/wSR/gzAgTDSkz4y7ACLOjaadkbdcXqNt9gUDtfQ4hxxwMNTbyjiQajh7C/",
	"Ya6Gd5Oahuc0EIVSVVyvQTMf3cR8De/ugKy5GD1RNg5gwEs3T2kK+yLvp0/zoV4Xxd8nAvwDGBewPSW1",
	"BX+/heCYD+OfAQyD+T8iSHfKCYjTSvbw68VA46PKdINMnA78e9T8HHx+rx2p+U0TZg5FD/HA7dAamOJ5",
	"uFssXtuEqOhxO/TaMl3c+duGXR1y20jrxq47XndoQbDsG0NQ2W9f/8Y0lP5l1K++wgm++mrpm/72ePjZ",
	"Md5XX6Xvip/qokNr5Mfw8yY5Zlj7ePxuLAo0gzV0/MOuuaprJdEkVlUjf6QsGEZoGXzpVTKQl1CpBpKt",
	"aYEjomMmjoZ1W3HywwkpQQ86HRJibcRaQmGvJcVunOGfb69lqm181GPraDlStXGjJ2tuVzR6VASRAtzp",
	"jfTbjtgHo/cjhuf5bz/iC4qY7UbEoUrQdxnzrR/jgHqka6kp85BCxkUIoEIljSg8eswxBFWFOqUhNLzz",
	"NcO/W155X7pEz/VbDI/OL0BSCdLudXqrGEjTau+6drDieA4UP4yKD3jTN7ltMdJsV4E/jWb9zmPgA+Yw",
	"1J+6OtWjcMRRu8tnufZCrrMdWUE5pgX5hiHtE21xO2tNusEdE+oaigPT/WPPHaa+hf4zw/d1rfp3o9JJ",
	"YdFjsnJaHIM9ePn8IcPKN3M1SKK3QfejHZfWOgwiisKcwDJOAjwGihJgzl06ijBhJcxY3vcVcCov+9pN",
	"2Gps4t4L5YEhcz9yg8WYfHPv2v9C4+QGQPqHQadDxUnLRxf4WS7WWrXpsKo1JdKPAj7xYoBKFwX7kEHu",
	"9PG337FCrMHYE/YvzGqiw3datnFITSb6cpCDqrMMAesyZUkf8hEd0ZwbT9BJ5I7wkR04zKen8G3qSiwX",
	"qJdk9joVffZyorOwxofBYJJnJG8GboX7iDkT0mpOwjdTZZlMfP4n/t6bknSQyRqmVD9AKtPTu7fUCv5B",
	"7/beLBd7KqlVl10RtdsJngrmavpW14nt883jrN9BJ+yV681Alkq7m3bdWqcDwDUmQJGtc6ClYlaQ7eub",
	"Y0KQ/AO0QkOCZErmMDkDRbTYGMXCc9TnjQ/FcjB0Gc5dvPyDM9RmlgTkQ7qnTrcaa6UVpP64Zfw1WsXG",
	"HTwO6H9tRJXggka57yaGY8mkYvRyR9ySYg777DaC2UeUDxjp027zuMpDkbaTOU4oqGJOXxypt1LkGy77",
	"pwj2l9KZ8uQxTwwPZf94m99nyZ8dcH7emj9SzYTfSF/Y0F1QMM+ss6h9WoAbvq1B2ltKvtfUmyJ7sBS3",
	"3n0D0DM3gNB7X2HzC9hmVqXHdh+7POfuqoW2U5K2EY7LmXtPF8MQHnHodVfaQU5FKFuMDo0CaoPt1F/p",
	"Ohv8BWyZDqaBuIZs/0T/kbcsOhatSOVhvRU19PcSUuRSKpA46Eik62X6XkupASSy/7IDnW6Y3VxhZriC",
	"+u7miY4KR7DtWddn+Gz/1JK2bWAY6DCo2z6M7MU7/gl73kVco6+FYg/7MGyyP409MpS33KWRCx3sVFwH",
	"mzM6bc7P3zUU95HYuL4B6TKuzVSr8U14Xq67118ShpvQ7LoE3bdLGU9Cy1L/0Tec2m1Cs+nDQQPJ07uU",
	"Gr5dBLVssVw4gN0/DiD3b6n/WOBbOdXUlZTeQ57MGU6QiOJbDC+OA12u2ww9t+wxQu4sTOpjk9BpEx1s",
	"x1oIY7s2lWLof3jGq+rttaSZEqEy/sX7GZcj1fr1WSedkHSS1Hsdg+HIb9DYQcLz3GlZRR/VGsH5F8PG",
	"FaUo1nVaU2pwiB8pJBNvO3XsxvV6Fm+0GU01QZEzrtdtTTb9j4/fHgxm66iKwie8TYuBeq2JdnqroWBK",
	"+1QXUfo8prlqNgdW+KM3sV6ptch77awPtJ3h9KW7f0Dj60oomeWdQ9wdVe6SZxU7J0fy+eKEvaSweA28",
	"IJmphYVUrbkB/pijewVYQz9wdNZRN6okeuJ20aCWn0HO1oBPXyWqS/6nVi/kjWlnKDYnlUixGRLpM1Do",
	"mZuprxpPRMq5lMr+B9HpyOqFo8f/ovCPpunKGFYgwxuUpPrisDNmUqVBrOWuB7tKHg4CMyZX8jgYSimf",
	"jhcT3kxOiU4jvp0QRecHDUbv8vAiU7LapqRrnHo5Eq/dWux8tatLxjR9yJDxWEZ1fw5DMYiZ1xGGyNh4",
	"a359v/jdotjknStMjgYYSI19fQdxUYmalPFZOB56n2YWORp3amZUhKZyiJN80pCF8zNILFlQfZq2D7M6",
	"l0/ZH6CVvy92Q7kN0ZunfZECnz98kujUFZMyk27jKY8s1kXI79AOZ4vgnZ+/u+YTLQNhuoN+cbt6hntp",
	"/GKmWFJM4+Ct8tWR7lgFjWbcsbBzb9Ken78reVGM6sbEoVckZLq6J7TavmoUMgu/minQtJOa5U5q7hh/",
	"kGRyFS58O94NCxdESue5CitOPVLhqPOhlX01venUh2z+zn9/EGuES+9dmSPMuoM9dtS45DXeyZ525Ys9",
	"cKqD74R5EeJ93eF3HUwpVRmkWXCPBQfu6OG2p3Su1by51wqae4VHBPG82x9mnf596lZ4UsyPF1WlwAH6",
	"6ILx83B3e4cyjJ6mIH4dJ+zwuGRN/ySthhqzzforZoI4vtRdpxb2NQgpkALjHuLQcBPNEK81Yy/dyLy6",
	"4lsTTKU9Y80PF1aVatskzHRxOirZd9Nro3N0jL2BXDQCX9kdSsGOx+cNjDOvHJOh0gkdypMTl53RwseG",
	"87545ND5FXxfvgwejw7opV9mXg2tBTRwMAa7Ns/C2AGjjqTRebY/ESJVSrRb0j0yz3sndwo7byk8VsZR",
	"LxJyNM28dJPjJ49m3CLSNXJE+4nri8EZyM3whVFKghiMOlAxotSFWzzC5p0Jr/tXpjAUuzPt/wqaHJhv",
	"uCxUzV6EFKQHv7558ZBpMG1lA5OFAg2O+TwkX+j7bI0uPeZno1fZQiQ6+TTWwlidsFt+uW+2ldM32xIv",
	"lzns7uu1toviM73WVk1ea7s9poe/0xZ2zNwrbV8kA+25SQQH527p6X0xx4pP343kp5/pduohaYd98kJU",
	"6sDRM1TmGh38d1KyBq8yc8uunPZh4mdaE0GdfZ1j2cVmRn6EvUGfw/FmHmXxehZOguUZE4/5Gv9IdDhb",
	"es3Iv6lF9ZmrSPkpW1mY0RL274Ts8IDu1H286hPa7HSmzikFh2oCZ7GrdAgJuiJ9Kkj3GPX4KSCsmUvV",
	"cfFBcEqlHRe86pey0epSFKkXOiq1FrkhC8yxPttXoe/NclG3lRW3HOen0JecyOnjUKz9USgLrgsGxeNv",
	"v/36+x7dL0xcTRcpGWDj0fJGRm5FPtRjO+wOEGKBlCdrNRVZs742ve5dD51vbYlVvvv4teNcZAhIGt8I",
	"2RCisdoyHrG6cmp7ZUX/09L9tuFm04vOqFI7VtDnzMurcdwdZv18nqegok2R3Sk0YrQ95gRHv0m+hL0x",
	"eilN5AeLxJ8iSTItZO5RJLOr45eQColr3VTgdLteBk73Ta63jVWngTR05Ic5z8T0wZN4vPSqYwOszKqc",
	"JkKlHJwy2WtcaCDoobpFfO5kfc5iuFIFIzcajIMoHU+z0efn79PK5lzVAKddpjvdHEnbs9GaDlec1m1W",
	"w20uCIhPfGfbzQOfHqTpmt9gyHaJ2liupOU56o1UKnzx1BvMFr4y9WJjbWOenJ5eXV2dBGvaSa7q0zWm",
	"nWRWtfnmNAxEbzbFieC+i6/p6KRwtbUiN+zp65eoMwlbAUawF3CNVruOsxaPTx5R/QCQvBGLJ4tvTh6d",
	"fE0rtkEmOKVaHVQXGfFwLIKK0csC84QvIK72gZXgsZ4Hdn/86FFYBn9riJxVp78b4u/D/GfxNLjIw4V4",
	"gN6Vh9FLFFMW+UVeSHUl2Q9aK9ovpq1rrreYpmpbLQ17/OgRE6WvUYJ+Rcvdqf1uQSmSi/eu3+nl49Mo",
	"amj0y+mH4LAXxc2ez6e8aUwWuRP3tg8+2Z2tEmlVh/c5aIZRud7QNj1f9Ovph6HD8ubAZqc+QDq0HQOJ",
	"f59+CBbBmx2fTn2O/67uM/hRGbTTDxR3SjfMaKp0p4GC+MFee+jQEKfddlw8efdhJA/gmtdNBSgKFjfv",
	"OzbsJIlnx5tl90ul1EXbxL8Y4DrfLG7e3/z/AAAA//9kmyqfCrwAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
