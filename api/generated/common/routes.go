// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
