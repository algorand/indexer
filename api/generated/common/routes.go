// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/2/cNvLov0Ls+wBN8lZ2mt4dXgMcPsglDS64tBfEbg94cR/KlWZ3WUukjqRsb/P8",
	"v3/AGVKiJEq7aztJC9xPiVf8MuQMh/OdHxe5qmolQVqzeP5xUXPNK7Cg8S+e56qRNhOF+6sAk2tRW6Hk",
	"4nn4xozVQm4Wy4Vwv9bcbhfLheQVdG1c/+VCw78boaFYPLe6geXC5FuouBvY7mrX2o90e7tc8KLQYMx4",
	"1n/KcseEzMumAGY1l4bn7pNh18Jumd0Kw3xnJiRTEphaM7vtNWZrAWVhTgLQ/25A7yKo/eTTIC4XNxkv",
	"N0pzWWRrpStuF88XL3y/272f/QyZViWM1/hSVSshIawI2gW1yGFWsQLW2GjLLXPQuXWGhlYxA1znW7ZW",
	"es8yCYh4rSCbavH8w8KALEAj5nIQV/jftQb4DTLL9Qbs4udlCndrCzqzokos7Y3HnAbTlNYwbItr3Igr",
	"kMz1OmHfN8ayFTAu2fvXL9k333zzLaNttFB4gptcVTd7vKYWCwW3ED4fgtT3r1/i/Gd+gYe24nVdipy7",
	"dSePz4vuO3vzamox/UESBCmkhQ1o2nhjIH1WX7gvM9OEjvsmaOw2c2QzjVh/4g3LlVyLTaOhcNTYGKCz",
	"aWqQhZAbdgm7SRS203y6E7iCtdJwIJVS4wcl03j+L0qneaM1yHyXbTRwPDpbLsdb8t5vhdmqpizYll/h",
	"unmFd4Dvy1xfwvMVLxu3RSLX6kW5UYZxv4MFrHlTWhYmZo0sHc9yo3k6ZMKwWqsrUUCxdGz8eivyLcu5",
	"oSGwHbsWZem2vzFQTG1zenV7yLzt5OC6037ggn6/m9Gta89OwA0ehCwvlYHMqj13Vbh+uCxYfLt0F5c5",
	"7uZi51tgOLn7QLc27p10BF2WO2YRrwXjhnEW7qklE2u2Uw27RuSU4hL7+9W4XauY2zRETu9SdZLJ1PaN",
	"NiOxeSulSuASN89LKRkvyxl+WZZMWKiMF2oca8QJipaVLlkBJeAiu+sAfzVWqx0u3oBrp2oLRaYa64li",
	"q0o3oFkiRmhY+hxdPqXKeWkstzApEMUr2bPoUlTCjpf7Pb8RVVMx2VQr0A7hgbdaxTTYRktEtgaWI85W",
	"KPUI152XrOYbMAwc6xUkzeE87mhIZZkGnm+n6Z5g2kPqFb/JtGpkcYDQYpnS8aVgasjFWkDB2lGmYOmm",
	"2QePkMfB04lSEThhkElw2ln2gCPhJoFWdzzdF0RQhNUT9qPnTvjVqkuQLRNjqx1+qjVcCdWYttMEjDj1",
	"vLoglYWs1rAWN2Mgz/x2OA5BbTwLrfz9nStpuZBQOO6KQCsLxG0mYYomPFZIWXEDf/nT1A3dfdVwCbsk",
	"0x0SAC2n1Yq27gv1nV9FO8OeQ30gHa7VkP5mae8gusNGGbGNxC3svnqmktZAe/0P0EHjuUn/ye6li9IY",
	"4Xqb2orBTJ9O7DVik9GIo1MiNufuLl6LEu/pX93hCJhtjLuX+rgNN7cRG8lto+H5hXzi/mIZO7NcFlwX",
	"7peKfvq+Ka04Exv3U0k/vVUbkZ+JzdSmBFiTuil2q+gfN15aF7U37XJTU4TPqRlq7hpewk6Dm4Pna/zn",
	"Zo2ExNf6twVpeVMzpxSxt0pdNnW8k3nPMLHasTevpqgEh5xjhMg0TK2kASTXFyRBvPe/uZ8crwOJrDwS",
	"Ak5/NQqF3G7sWqsatBUQG4Lcf/9Lw3rxfPG/TjvD0Sl1M6d+wk6vsFN3GJ1cbj3vIp7luRlJAVXdWLrT",
	"U2yhPccfWtiGc3ZoUatfIbe0QX0wHkFV291jB7CH3TzcbuH/Ubg7Yt88yFxrvvvE+0i3eoa383jkH50M",
	"6lh6zTdC4sKX7HoLklX80rEDLpXdgmYOF2BsuN+J79GV31qwvJDgJe2TRerEJHBq7o3UDmtv1eZBcLvH",
	"rnNx8YHXtShuLi5+7snZQhZwk0bDJ8VxqTZZwS0/nBh7e/bKdU3Q5e+XdIY2s4cioIclniOw8HnZ6UNt",
	"1wMfNnMX+v0PQ02civszVWPA/o2XXObwEFhe+aEOxvD3QgoE4u9k4PgPmgOa2618CBQ/xAF24+w9sNjo",
	"88qMOOVDbJJ5qF06gsGF/foPzbe4vDfF/61U+eWdcDmHKhx1z8zfaa30A1BREPIGq14uKjCGbyBtOot3",
	"MjQ8ZOsCwIh2cEtAA8PfgZd2+3ILn2Azo7H3bOl5p1I/wMZ+0mMVaf/71h+tao/U1h/2yJMQTWN+77v3",
	"+2FKvS0/nJf3cDrk6Ifj2ByH5NtgRYrNRImwAR/iIyTZEp0ayy3j3gtO1t0LeSFfwVpIdNY8v5COD52u",
	"uBG5OW0MaC8pnmwUe878kE6rvJCL5fAinDK1oqPTQ1M3q1Lk7BJ2KSyQBzatl5cb5bRyqywvI1dU5Jf1",
	"DoDOpDQmOZogc5ShGpv5eIZMwzXXRQJ007ofcGRyEM/NumR+bPKS+HgJP376GPC6Nhk68jL05E2ZJcqB",
	"UcKQ9485lDFjlQ4+EGECNIjfH5T1fgV+zYi+WGPAsF8qXn8Q0v7Msovm6dNvgL2o67duzDMHxy/eJ+DO",
	"064mz+rRJogwWEriwYUjPjO4sZpn6ClMLt8CrxH7W2CmqdDpXJYMu/UMNbVWG80r73RsFxD2YxoBBMdh",
	"d1m0QlzcGfUKUTzpJeAnRCG2YVsovTftHviK9Kg7o2uPLjYTN3Rx8QFDggJm2hCCDRfShFvBiI10h8BH",
	"W6yA5U4KgOKEvVkz5GrLXncf8+c5Zss6hKEACXbu1oi+MZZziYETdYGBBEIyLndDo7wBa4ML5D1cwu48",
	"cq0d6aLxfni+50osGjdcey12GGbX3LBKoXsmB2nLnXftJ0gzDUwjpCUfY07hE5mj3ymmgacmiuBwBydm",
	"IX6MISFGAQ28rtmmVCvPaVoSfd7SaOgzzVTeOQDMAzCUpOIUtmHm7NVcJzaCDuLEFtxhoW68ex3D2eXd",
	"meTWQhsMGwHu7wgeH5E7UJ6PaRmD8q8toFSmNMZ29EnKhCOdIvrWZU3RE94WkghGCTcv801YkLJCaEKM",
	"v/Nt+70CjHVT14atuJMulQ/Tooin6A5pnB6Vvipqrq3IRX2YFZgAedfr4wbZJ3Uk5Qy1HooTo9s+CTI1",
	"ztyak2cD3Bd3OBpDoVhujYEHh5lIkMcVnDB0nfsNW5UYndVGjhL5cY1hY2HZFEk5BVr6yIKWnbgXwOjv",
	"SCxXbrkJEWQYaBe410ES2MS5QuLBs+WOdHSwYpFauHlLuOJT+z/ttX8jC0dyYPrRdK1PPtx4Q860bINf",
	"KEI++O6Dwz546d2/7iA2ZcnEmjXyUqprJ7cf44dfLpxQ2qSRpCQKpY4dbGg7qHEgHw/wVyZCm4Pqn+t1",
	"KSSwjIl2DyzuAcVEqlxQYGDHOvwc4HSWJ8zRoBvg4BFSxB2BXStV0sDsBxWfWLk5BkgJAtkfD2MjH4z+",
	"hgMsYm0cideG9motfY455i/dQVt2cTuE1LHi2frS3w1ZXVK97LVi1GTl1aXotk2RsWNfuZIGpGkwStaq",
	"XJUnI73SQAl4UWU97ps5HTIpkgIS5VnoFumc7JFYOwnxcXQTadgIY0F7ewNC2IY+dZFdO4tby60F7Sb6",
	"f4/++/mHF9n/5dlvT7Nv//fpzx//dPv4yejHZ7d//ev/7//0ze1fH//3f6XU3ytlIcPbOrvi5YSD2jV6",
	"bVCTeI0Xe5JF9baKURizmLDD4LSXsMsKUTZpbPt5//HKTftDq3ybZnUJO7yIgOdbtuI23+JN1ZvetZmZ",
	"uuR7F/yWFvyWP9h6D6Ml19RNrJWygzn+IFQ14C5zhylBgCniGGNtcktn2Asqzq+gJLP3dHoNmkQc+7T8",
	"ZM7kNDpMRRh7TkSLoJjmwzRSci39kIDpVWD8CAqawkZR62a0okOlfTSFEjeNpnHKpR/hk0v18epiyd6P",
	"khbt/cd7LG88/KHLe6iAH8TeMUorab8jAsOD4wfbQ1yRHW0c+2mVhmALpNMSCSeU2iHjtY2PUZdccBhi",
	"wgXucx1U04pUg2k+GQHCOAvCrz1Fi2ytVYUnb6wpRcQpJnSAHgl2V85gVp+sOaYXxzwxiWivOwF4+Q/Y",
	"/eTaIlZdb0oLEfLQI9OpRNiTCWnVA6DmfobRFOX7EfdSPgWxTZE9pvWRdarn6DjyBJRqk9Zwyg3KHWrT",
	"RcjH5LACpyHADeSN7SwQA+NKa//5vNLk0JCUDmqOfFiUYzovP+BG+bH2oO5dyyc/JeZ4XWt1xcvMW/6n",
	"eLxWV57HY/PgKPjM4lj6mJ1/9+LtOw8+2piBa/IFza4K29V/mFU5uUTpCRYbMgidfh0MssP731v+hel5",
	"C64x8WygbzpJyxMXMejOExSdXu89WAe5/EhfgHda0RJnnFdQt76rzrJHrqu+u4pfcVEGk1qANn2p0OI6",
	"h+HR90o8wL3dXpH3MnvQm2J0utOnYw8nimeYyTCrKM/RMOUzyVo9F5VbtM8hgVZ85+iGfK5jliSbKnOH",
	"LjOlyNNGV7kyjiQkuTJdY4aNJ9RkN6K7i9NjNSIayzUzBwTRDYCM5khuZggFnNq7lfKxFo0U/26AiQKk",
	"dZ80nsXB8XSnMWRJ31kFSjg8KJv6MypBOOEx6o/P+r3X4tpR7qIEOb1mPKnHml9Pi7v76D9uqCnNB4GY",
	"V35ir/QI3FetnTFQUetO57LnADoiuCWecSRlzASm+MPnWUUjhXfu3wE7+4uABEXLZ4dPpKRMXbUvpq9Z",
	"N/4RF2x3nyJg8U1KCeu8NCoxTCOvubQh7d3vlu9tgIzCrte10sZinYRkuNZRmmKcTn8v/dBka61+g7R9",
	"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",
	"+/Pt/wQAAP//zUjAO0+yAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
