// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TR3/YoDrfLu4/en2fwIAAP//E14gNs2wAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
