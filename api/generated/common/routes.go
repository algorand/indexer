// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
