// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
