// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
