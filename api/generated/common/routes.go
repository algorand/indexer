// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xe3H2/8fAAD//1aZldb6mAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
