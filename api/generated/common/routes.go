// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fW/cttIo/lWI/T1Ak/5WdpqeFk8DHDzISRo0aNIGidsD3Lj3lpZmd1lrSZWk1t7m",
	"+rtfcIaUKInSvthxcoD+lXjFt+EMh8N5/TDL1bpSEqQ1sycfZhXXfA0WNP7F81zV0maicH8VYHItKiuU",
	"nD0J35ixWsjlbD4T7teK29VsPpN8DW0b138+0/BnLTQUsydW1zCfmXwFa+4GttvKtfYj3dzMZ7woNBgz",
	"nPVnWW6ZkHlZF8Cs5tLw3H0y7ErYFbMrYZjvzIRkSgJTC2ZXncZsIaAszElY9J816G20aj/5+BLns+uM",
	"l0uluSyyhdJrbmdPZk99v5udn/0MmVYlDGF8ptYXQkKACBqAGuQwq1gBC2y04pa51Tk4Q0OrmAGu8xVb",
	"KL0DTFpEDCvIej178n5mQBagEXM5iA3+d6EB/oLMcr0EO/ttnsLdwoLOrFgnQHvpMafB1KU1DNsijEux",
	"AclcrxP2ujaWXQDjkr198Yx9/fXX3zHaRguFJ7hRqNrZY5gaLBTcQvi8D1LfvniG87/zAO7bildVKXLu",
	"4E4en6ftd/by+Rgw3UESBCmkhSVo2nhjIH1Wn7ovE9OEjrsmqO0qc2Qzjlh/4g3LlVyIZa2hcNRYG6Cz",
	"aSqQhZBLdgnbURQ203y8E3gBC6VhTyqlxndKpvH8n5RO81prkPk2W2rgeHRWXA635K3fCrNSdVmwFd8g",
	"3HyNd4Dvy1xfwvOGl7XbIpFr9bRcKsO438ECFrwuLQsTs1qWjme50TwdMmFYpdVGFFDMHRu/Wol8xXJu",
	"aAhsx65EWbrtrw0UY9uchm4HmTed3LqO2g8E6PPdjBauHTsB13gQhuB/f+2Pe1EI9xMvmbCwNszU+Ypx",
	"41e1UqU77GbOIk7GSpXzkhXccmaschxiobS/uol9zH3/VhphOSKwYBfbfktZdEbf3cftD1xXpXKQLXhp",
	"IL1fAfp4kxDK+JLkZTnzrNdJDH7KrPmBV5XJEOLMWG4hblNVroVUEhI3afMD15pv3d/Gbp24gDxi1mIn",
	"y0tlILNqhyQRhAPcsOjuj3fsILmCna2A4eTuA8lUSNnSsZuy3DLrEeAIggUpYs7Egm1Vza7w6JTiEvt7",
	"aBxNr5lDPqKsI/I4uXGMuAebkSDtC6VK4BJJ28uQmcPf+G1WBrqm5u7iwgmK5qKbswJKQCBbIsRfjdVq",
	"i8A7UpgzVTmkq9oOD4cs/LD0uX9WkHBGxdUYkh1Al2It7BDc1/xarOs1k/X6ArRDeLj5rGIabK0lIlsD",
	"yxFnF52TX/ElGAbuYhQka+M8jnFJZZkGnq/GuRKtaQcjWvPrTKtaFnuIlJYpHV/ZpoJcLAQUrBllbC3t",
	"NLvWI+Rh62kF3Wg5YZDR5TSz7FiOhOsEWt3xdF8QQRFWT9gv/u7Ar1ZdgmyuGGKWwCoNG6Fq03QaWSNO",
	"Pf2Yk8pCVmlYiOvhIt/57XAcgtr4C27tpatcScuFhMLdfbhoZYG4zeiaogkPFSEvuIFv/zEmP7VfNVzC",
	"Nsl0+wRA4DRv1pX7Qn2noWhm2HGo96RDumNj+pukvb3oDhtlxDYSMpL76plKWj/Q6b+HhiCem16n2a00",
	"BTRGuN7GtqI308d7lBixzGjEwSkRyzN3Fy9Eiff0H+5wBMzWxt1LXdyGm9uIpeS21vDkXH7p/mIZe2e5",
	"LLgu3C9r+ul1XVrxTizdTyX99EotRf5OLMc2Jaw1qTnAbmv6x42X1hTY6wbc1BThc2qGiruGl7DV4Obg",
	"+QL/uV4gIfGF/otkL7wSbbUYW0DqtfxKqcu6ijc072iPLrbs5fMxYsEhp/gh8g5TKWkAqfYpCRJv/W/u",
	"J8fyQCJHj2SB0z+MwpdIO3alVQXaCoi1de6//6VhMXsy+/9OW+3eKXUzp37C9vFnx64yOsDcehZGrMsz",
	"NRIG1lVt6WpPcYfmOL9v1tafs0WLuvgDcksb1F3GA1hXdvvQLdiv3dzdbpmOVL/nvvUl84+4j3S5Z3hJ",
	"D0f+xfjXU8WXQiLgc3a1AsnW/NJxBS6VXYFmDhdgbLjmif3Rzd+oGb2s4AXuk1nqxCRwam6N1BZrr5y4",
	"+w7F3btAce/tdQCuU0v6G/MN5gcbe5cksLwj3E/qX8/P3/OqEsX1+flvnReXkAVcp/HxUZFdqmVWcMuP",
	"o9Hlc9c1QaCfMw11ddt3RUB3SzwHYOF+b9S72q47PmxH8di/OWviVNyeqRoD9l+85DK/k+v0wg+1N4Zf",
	"CylwET+QqutvNAc0N1t5Fyj2u3snB5nU1nsf4b+RmzrDjTHg1qi9K5Tuhch7fhHilHexSZ+K8P+m+Lul",
	"+H+VKr88CpdTqMJRd8z8vdZK3wEVBfm9B/V8tgZj+BLS+vF4J0PDfbYuLBjRDg4E1CL+ALy0q2cr+Aib",
	"GY29Y0vPWoXZHWzsRz1WkW5vF/wRVDsE8u6wB56EaBrzue/e58OUOlu+Py/v4LTP0ffHsTkMyTdBRxwr",
	"gROeW97LUkgyGAglHaa4d0QiE865PJfPYSEkWmSfnEvHh04vuBG5Oa0NaP8IOFkq9oT5IZ9zy8/lbN6/",
	"CMfsKehr4ldT1RelyNklbFNYICeYtMqlXKrz89+YVZaXkb05co3xVr5WYTwkOZogc5Shapt5l7JMwxXX",
	"RWLpprEx4sjkozM165z5sckU6l3W/PjpYzDw8xjROJU9fZNJuMMI2fVXcfj9SVlvPORXjOiL1QYM+33N",
	"q/dC2t9Ydl4/evQ1sKdV1Sotf2+da9yi0WxxpxpQBBzxmcG11TxDd4Ak+BZ4hdhfATP1Gj1LypJht64P",
	"j1ZLzdfes6DvHTSBAFrHfndZBCEC94563cwjYXCIQfcJUYht2ArKoX/RofiKXlFHo2vHS2zCdfP8/D16",
	"ZQbMNH5CSy6kCbeCEUvpDoF3eLsAljspAIoT9nLBkKvNO92927XnmA3rEIZ81NiZgxEN4CznEn3XqgK9",
	"hYRkXG77JjcD1gY751u4hO1ZZD8/0A7rnW34jiuxqN1wzbXYYphdccPWCm2wOUhbbr3/ToI004uphbTk",
	"SNDxBhthGnhqIjctd3BiFjLi6BZ5LfGqYstSXXhO05Dok4ZGQ59xpvLGLcDcAUNJPpy6jnPpjeA6sRF0",
	"EMd8/Q4H1I13q2M4Cd7RJLcQ2qBvGHB/R/D4iBxBed5xbbiUf68ApTKl0YGrS1ImHOkU0Td+KfNZxbUV",
	"uaj206LT6G86fdwgu6725GWuFv07e3ClJq8QapxdcJO+vsF9cRRYG3JqdDAGRhdmImkZIThh6ITij+pF",
	"iX6OjYc84ZhrdMAMYJPH+NjS0ucCtGxlqrCM7o7EwtuKm+CLiQ7FgUXsJeaMEO+Z2wAkYHduIuqN5Vbh",
	"5i1hw8f2f9z/5aUsHO8A0/VLbbxbwrUydA8ObmQUCRS8YILrS/B3cf86aq/LkokFq+WlVFdOOD7Eo2U+",
	"c5JfnUaSkij5uTO3pO2gxoF8/IK/MBHa3Kp+XixKIYFlTDR7YHEPyPdb5YJcbNvz6ecA9zD4kjkadAPs",
	"PUKKuKNlV0qVNDD7ScUnVi4PWaQEgTyGh7GR2UR/Q/qFhwIeynrkTytkmhrzwBechNm5LHFh6LB/ASDJ",
	"LZcJOWfunbfhpZNWrCLhpRkk7b7+oCNqezHPPByT49PaB4IIb7GDYKJ77xhoYmExLDotyU6seFpuSaHA",
	"4H6RFNHu1YST/s6pR2SFsb16gIDfYgF9tWfjEeifvDufpsMbrWXt89bnkthImtrHKCaJl5EdG2oqGteq",
	"N/1rO6mP6LRi1OTCv68j8SzFkt2pyJU0IE2NkS1W5ao8GSgiDJSAkk3WkSSyS9im3zCADPZd6BYpKdgD",
	"sXBPioeR6KJhKYyFTvRJ4xDb+vtuMWKj4taCdhP97wf/8+T90+x/8eyvR9l3///pbx/+cfPwy8GPj2/+",
	"+c//2/3p65t/Pvyf/5qN3BqQVVqpxTh0ttILB99bpRqujB0ZduyAee8QbJSFDAXUbMPLEXcb1+iFwcfz",
	"C5RlkwJDB9mMgqfEiOoRp72EbVaIsk7Tq5/3x+du2p8afZOpLy5hi2Ih8HzFLrjNVyg3dqZ3bSamLvlO",
	"gF8RwK/4ncG732lwTd3E2pFLd47/kHPR47VT7CBBgCniGGJtdEsnGCRe9c+hJEvPeFAvHc7CNTyZ0rIO",
	"DlMRxp56MEWrGL+VaKQkLF0Hp3Eo0BsOA5SEjaKxzACifR+4qP2n+yCa5oo3L/iP/pCNoYsfs36U9GvW",
	"f7wFeMPh9wXvrtwXEXuH6GlIUhoQGB4cP9gO4opUx8OYBickB/U3nZboqUAhizKGbXiM2qC5/RATRBAf",
	"w6fq5irtTfPRCBASTwmCPUWLbKHVGk/eUCiNiFOMvMg7JNheOb1ZfYqIIb045omhyzstaMDLH2H7q2uL",
	"WHW9g2C675FpFRThDeOfLbdDze1sASnK9yPupHxyyR0je0wmQArZjm3vwBNQqmVa31AuUe5QyzbyKyaH",
	"C3BvP7iGvLZt0F9Pn9ioPO9XmuzrTtNROpHZljJbTMsPuFF+rB2oe9PwyY+JOV5VWm14mXlj1xiP12rj",
	"eTw2D7axexbH0sfs7Punr9745aNZBbjOmufMKFTYrvqPgcrJJUqPsNgQGb/ittEk9O9/b+wSpmMgu8KA",
	"6t6L2UlanriIQbfGz+j0eoPZIsjlB5q/vJ2WQJyw10LVmGtbPTtZa7sWWr7hogwK7rDa9KVCwLU28oPv",
	"lXiAW1t6I4N9dqc3xeB0p0/HDk4UzzAROb2m+H3DlI+Qbt65+LhFbTkS6JpvHd2QenLIkmS9ztyhy0wp",
	"8rQJRF4YRxKSrPeuMcPGI89kN6K7i9Nj1SIayzUzeyjdeouM5khuZvB+Hdu7C+Xdi2op/qyBiQKkdZ80",
	"nsXe8XSnMeRmOfoJlLDxUQ6Xe3wE4YSHPH98NotbAdeMcswjyL1rhpN6rHl4Gtzd5v3T6oiH8h8uYvrx",
	"EztiDJb7vNGUBipq9O5cdmzWB/hzxTMOpIwJXyx/+DyrqKXwVoAjsLM79Vh4aPmsJ2l2cdA7Kk6icqvX",
	"k8kWWv0Fae0hKl2vhtNHE1Pv9OB7v4J652bkNSR6mZWOQFWThua2S2pez7deVP/ubIwpbV66Fkmjh25M",
	"bI+NPl1PwBHGjucv8jfBB2qwhnJJB+4Z5rfrvJjSxzZ2ET2l8dtj69c81GvwqwueX6alZ7emp62XVcdu",
	"axULnZsEQ10snbDIYatp63P1VKDXwnavgfZhdqwkTNPuLQO3Ii9SVSzs+nRfpVGJYWp5xaUNGZc8Q/O9",
	"DZDlyfW6UtpYTKCWhLKAXKx5mRaJC9z9s46QVYiloFxJtYEo048fiFVKSEtUVAhTlXxLfmzt1rxcsEfz",
	"iKt5bBRiI4y4KAFbfEUtLrhBYaVVXYUuDjyQdmWw+eM9mq9qWWgo7MonoTKKNa8V1Pw07hMXYK8AJHuE",
	"7b76jj1AxxEjNvDQ7aIXQWdPvvoOsyPRH4/STB5z3k0x3QK5bmD6aTpGzxkaw12fftQ0F6aspeP8feI0",
	"Udd9zhK29FfC7rO05pIvIe2Oud6xJuqL2EQrVm9fZEF53FDYYsKm5wfLHX/KVtys0vIBLYPlar0Wdu0d",
	"CYxaO3pqM83QpGE4SgpHHL5ZV/iIXjoVS+v17lfHRNlaUlCjL9VPfA3dbZ0zbpip3ZpbfZlniCfMJ1sq",
	"mJLlNtJo4t64uVBAccIm6p0XrNJCWnwx13aR/TfLV1zz3LG/k7HlZhff/mO45H9hRioGMldufnnYwu99",
	"3zUY0Jv01usRsg+ilu/LHkgls7XjKMVDz+W7p3LUcSjtlR44ej8oYXrofeUtN0o2Sm51h9x4xKlvRXhy",
	"YsBbkmIDz0H0eDBk906ZtU6TB68dhn55+8pLGWuloav4vQiBIh15RYPVAjboIJ9GkhvzlrjQ5V5YuM3q",
	"P63ZP4ickVgWznLqIUDBnsPtcD/HYI89sZW6vASohFyeXrg+JKrTqH0hfQkSjDDjF+hy5SjHfXZXXqQR",
	"waHZBZRKLs39U3pY+IhdeQnIk14+37XqwcAhZ2SGTcc3xrVzU7wJOSZpaNf+U9xIjWf1zjDit77tuCO0",
	"u8YolOaZD3whr5+uBZbgveKoJwdZkFiH7G/FhRzxjgYoRjzfAGd8p7QV5HsC8In92Kzm+WVSBXbmvpjG",
	"f408oCNPNrN3sAVqx9+4PmdhtpT1UKzBWL6u0pc/qrOJPyCvcdvXdHFvJAO5koVhRsgcGFTKrHZFEY9E",
	"v11LnKwUhi7COCdlrjRlBURJx6pehOe+WzIZy9pdY6aVsmMLRZEoDkJWyjJe2xVI2/h3A6Zp7kNCESr4",
	"DqJrjhgpe+1unpBPkZflds6E/YLG0d6pkbM16MsSmNUA7GqlDLAS+AbajOk42heGnV2LwmA+9BKuRa6W",
	"mlcrkTOlC9An7IW3eePbjDr5+R6dMB+b5/3Tz64lglcooIdbDCeBGcIMGgtLDPGcrvX+z5jI2kC5AXPC",
	"zq4ULcK08czGiUadHhe1pbieQiwWgNwDwcEnHfZrP0Rrwtzv6ALeDOthun8eYK9lhlL7yNPWkv7kWj6j",
	"RswHw3TNVr2jsaZ3dCCoEool6Dmpd3HbxRra+HUnUSptWzXSAihGxPFbIa1WRZ0DRU2/69BjtCwxWFKT",
	"LjnyO0AaCqn323UGFVDg9CeMvUSx+xEJf1J1IUTcwQY0+fC3Az0gphOty1iu0WED/Tc8qFA8TF8ZdbXU",
	"vID9rK3IBH+hHk20bxhhow4b4FfXvi/MdSSmjhySlh0ij3h398W8PMXLRgXCt2PBUy8oZ72GkuJXMN05",
	"tp0PxL0FQGaETOtkFwDI23meQ+XIOS42BOAYFYnWyCow3Dbc+A7D0ooNUGTNhIiS5bzM65K8VCfkj6uc",
	"l7pr3ClhYZUjsLgGRauoFG6uC/SSpTzhNJ92DDDqgXlGNqC3vgW96UJabnc4dM8jYRjBlpWwgfRLCzgF",
	"sv2grtiay22DCzdFu4x5FO7SrJwkKDR3E7Z/8c/NaPl0mDzVTS/SoWJkc4sYzxVooQqRMyH/AH+aG7YU",
	"KIby+ytphayxLIKGdt10TzCMyevH3Q0pQI9lFnAfui7uEq462C4iKbPrEG4svwRadoge9FfjvjjVYERR",
	"jyhYNc+7KzuMGP3hfcstnOoGteaO6LLHoZpDPnXo+rTcI5setoa7NMqnOsx3H2bFm/gZ5hl1wkfWpywJ",
	"LUdeZMqqoAcLIfvN2BvQput9GWkm4XrH2K5FZ3xK5KIVaT0OnyULzjVmdL4tseOW5oLwRTG32B+8d0di",
	"B0ey3DQLMFfC5qtsJODEtaUWFLDTe/8NpyQRAk8hLBaQ233WgJELVOZidBX02a3iOfACw0DbIBQKP+kv",
	"5cFPirmhTSTXSCNQCm3FGhzl4QFZShsK2UX8v6o9aX+j8H9ouN3jGARBxuM+rYylNp542phjzrZgcFca",
	"X9rojFTK8DJtdwqTFlDy7dSU2KA7aSPYBtMb3Tnc3WHuQiHf3bRTdDS1P2dTk7smfYCb4zk8FXH+/D4m",
	"v9/wciQ25i1UGowTGBlnZ98/feUtjGMRMvloQBe3PpLacjaa/OBmjg+eNIsgJzb87otzJbWrY45r5Lfm",
	"Pg96H+fwMJYkLNrQ4Ac5XNCPwU2fVVx483kbHjTcWR8yNgzi28fVv0VwHwgfiIWDpCD5gZvVC55bpbfD",
	"DGVO3B8J/fcWmkO2+Ktv09TplpCeBM0/PqkAKmwXtSTpvfGqQI+GwL7VYpBZgGFqgRX/5qvH/+fxN9+G",
	"Px9/822cRqD57h419DWVSCDOszd0aGEr/EwZeFioJjHE9Gg6wuIia1x2U1Vl5jOfTjDOobbTT1+YbC2W",
	"Gjl0etTxNIiRQjUR90iSQaK+mefC46JDj0g7gPdW3C6vfXeGmVME/RpVVU8d9KiEHKHqRUvzk5kVo+OB",
	"vop2RHduV3QaPpfgDA3ufqtGlmuLA8/uf6eP7iCVdOJUGLGuSnJK8HgbJDs4KBCz9Z38+K64d+3H+NE9",
	"EeFog/jdOyAeu5bd6Rym3Q5/ls/UuiphXFKpyJ2EaiqSTIcJbKLqeUEJqPK81q12uO9Y+CsvBZV1MpjE",
	"RipVYdaaygrp/oMxjaq29H/g2v2HUqp1/0dUFV1KbqgZ4gXTSISBQsjCzAmTBT1lfd/UlXVkXPReZo2h",
	"FJTgRK05aCTHHcbDx1JoZHUaGoRzva2sOsU22OTUWF3n1pBNOJqtz1Mqri2ZwXZnyO/fIY71KyNIq2lV",
	"pmEDfOzNTvku/qzBvQlQb+cas2aAzv4eeEr7u0tjm3HHndioQo6ePLek7/LpcLAK6JpX72mW31jG3tKK",
	"m+ybrgNbm2V1uA2QhkrWTeWlzUZliPPz92iMfsdLG98bbkHeGtXYWsbTVpHOftRf9/5tsWJ5CxJ0AEOR",
	"XYFYrtJAXR14rXt2O2ChLf5et7Jhr+wEGQSAF6BN1nojpl92n2KzKfGEm8K4q21cNb84Ytfms9K9yfca",
	"vzxufJmhTkROIfzNUUNvlN0DaZv7R9o0LTbpjWjBXXrcgKYYo71Z06+hx818dq9n6m1zewxvqAi+/aCI",
	"NyW6ptKP6fA1sPY2Ux+XBYvmNwz5dMIDAq8RkFZvjwn7F8vMlOoA8N6J5TvXYceWhmaDPS3VFejMzTuB",
	"4uMOaLN5B0Hju+yGpx27Z/HkZa5k1pn9fhkr3b8ZUkjWRADu2D2+7u5eFUTCQ29BPOhbIZfjWZYuYfu5",
	"8a6zyPOqF94L13bi8iBP5MZaFiWquvIWCtJAdwXnHTlo3XsP80/61NwTZ2PUD3stcq04WvraJIXAaNw2",
	"n6p/LbpP7W5MWS9HSu0ibNT5bFtB4y40TOW95lVUTJgbdgnH8Kr9L8km+xtnG8it0nFwhi+UjTkde1vT",
	"+qmsoKyQGbeazJPPinx/jW7XniFzen/yNRJQZGaIPcvc/4dbZjXA/ftIXcI2K8UCrBgJCigxKOlH2LLQ",
	"7OTO5IKxbAId8wyqLkryVmwzJDCl6csSv8SJGBjxUYz+MeEvwwqwoNeOFFfqiq3rfIVvQb6EkIoA1evo",
	"89abqDN6iM7sptTw3uym4jkNRBFvJddL0MwHoTFfaq1R16+56BWU78eZoBcCT5lOdiVIeE1RcBHvQkNX",
	"lCYhkYchLOMStqdkx8Hfj2Ak49kWRhaGORc+4pJulbohzv6xg14vOyYwKiDQSZjSLP8OTWFufV4ZdaAp",
	"bJjXZF/wEA48DrWBIZz7+wnHe5tQmbSw7WvHHW7uuPnVXuxjfh03ByKjpw3B7PwMl8p+/+p3pmEBGmNx",
	"v/wSJ/jyy7lv+vvj7mdHeF9+mTae35fll/bIj+HnTVJMt0RVzwpGF7/BVMcL8pRwl5yS6CNUlj0HbVkw",
	"DKRDkYVLBnIDpaog2Zo2OEI6JkzRsKxLTo7JQkrQnU77RMKTisleS69OxT/PrmWqbSxiYutoO1IljKLK",
	"wsfV9urVqqA8BDlG/B87YpszoB2RYotvM+ILCmxuRsShFqBvM+aZH2OPsjFLqSlBFCl8RYhzQ6GYMNyl",
	"pib2LZSTCRH8jfM9/Fnz0gcXSHTlP8Mo9vwSJFWKcZzP1wdjIE2tvdrZrRXHc0vxw6j4gjdtk2NrxmRT",
	"dRh0ThYG70Lp4xoxIwN1daJH4ZCjprOcu/bu2TmRvCXH7C2+YcjOhc5Ju55jSMZ6Pa5H7GVljF2ZMUNR",
	"6D8yfJt+vC3vnc7d0yZh6t3WlHT2wcvnDxkmKB5LFRs9vnaDHWdA329FFCw7WEs/V9Mhq1gAjPmP90Ju",
	"2AJGzA278mwvNm2KbWzV9/nbuco9Ixt/4AZzZvvmPtbhMw1n7CySvXyeFDk6ueUOzsM8ny21qtNxZkvK",
	"d9iLy8WHAQpd9Kgn96DTx998ywqxBGNP2L8x+QxdvsPqGl1sMtFW7egUB2K4sCahGclDPsQlmnPlEToI",
	"ZRI+1AWHuX8MH5P+cz5DuSSz16lwvJcDmYVVPi4Ic3FF/KbjZ3kXQXhCWs2J+WZqsUjmp/sZf299LXTg",
	"yRqGWN+DK1/CVsOxssuP2JksUZOcp9w0ue6PYzwljJVeKq8Tx+frx1l7gk7YK9ebgVwo7V7a6xqtyXCN",
	"eWq8UTeWUjF5i23L0GHeFvkXaIWKBMmUzGFwB4poszGsh+cozxsfm+bW0CSia5SVD96hNDOnRT6kd+rw",
	"qLFaWkHij9vGX6NdrNzF4xb975UoE1RQKffdxOuYM6kYFViNW1IQZpuEiNbsA/87hHS/xzxOxlmkHUkc",
	"JRSU2LjNYd1qKfIVl23FyN0Zj4c0uV+Vt0ElgMQxv8vMzBPr/LTef1KNxCNJX3/CPVAwHVCjUbvfBVd8",
	"uwZpj+R8b6g3+b9gxTQ9/QLQIy+A0HtX/blL2GZWpccGMjaRZN48tVB3Stw2gnE+8u5pgjpCrc1WdqUT",
	"5ESERY2G2ijCOOhO/ZOucVK7hG3rURWX+qFn0xGvLLoW05rxM7GG9l1CglxKBBJ7XYn0vEy/aymDA7Hs",
	"LybAaYaZpgozQhXUd5om9rb9RmQbGX8HWRmOOAWRqxtGeE846m8r6EaSdMr1dUOnUWdwwp43Ie3o3EjB",
	"nW2cO+mz+i6QlK6uyR4odNB7cR102OgleX7+vqLAmgQj8A1INnJthlKSb8LzxbIp+ptQBIVm1wvQbbuU",
	"Mia0XOi/2oZDPVBoNqwXnWhlbIUGozFMt56eFd/OgjA4m88cWO4ft2z370L/NcNCyiUWIasWQ0fP9AH2",
	"NJHhPImYyln31doRJJuT2JLWDg3oZPEaHymGFqPoVj1UPRkr1SldZ/vDM16WZ9eSZkoELhHTHXMIpnpQ",
	"PgdIw6EdG/c+wUFr5blDbJ3hee5EvKKNMY7W+YVh/azjFHk8zDuecgzdl0Mn6n83tMn1chRuVFgNxVCR",
	"M66X9ZoMCh8fvh0QjNbaEYVPijQsGONFNmILtYaCKe0Tj4iFzyozlvF4zyoQVDf9lVqKvBUN27DnEUqf",
	"u8cPVD73qJJZ3riru3vSvTCtYufk5n0+O2EvKUmBBl4Qg9XCQqoeQQd+zON2BVhnMVB01mA3qjZz4k5R",
	"p96DQcrWgD4ViQok/6kVLnhl6hGMjXElkqq6SPoEGHrmZmodfAhJOZdS2f8gPB1Y4aKbFjoOzqiqptRF",
	"CW7f/6zRCdcxbBx2REerNIilnCrqvuDhIjB9dCWvgy6X8smRYsSbwS3RiOPHMVG0vNBgVLuZF5mS5XYq",
	"rCDBXpu9mKzs3qTGMm1Aj/FQRrmh9wMxsJk3EYRI2EGUvUv4jihIcusqJL0BOlxjV99O1FKibkl8F/aH",
	"3iWZRVbOScmMEhWXDnDiTxqycH8GjiULymFct0FQ5/Ip+wu08o/VZih3IFrduE9k6bO5nSQ6NQnHzaBb",
	"f8oDE7oT8BPS4WihhPPz99d8IGXgmm4hXxxX82Injl+MJNSOcRxMZT6D9i0z5dOMExvbBnIOLWK8KHq5",
	"hWO/L2IyTW5c2m2fWRyJhV+NJPGexOZiEpsT43dSflyF1+FEbfnwmqTkKldhx6lHKlh0PPCxrbgwnHqf",
	"w984D+xFGuGFfFviCLNOkMdEHRROnqNPmxJXfnGqWd8J8yzEG9rD7zroccpF4GbBNhesx73i/k/pXlvz",
	"6k6rrOxkHtGKx30OYNTjoE2kE8rO+/GizKU4QOva4ETNYIxMSIwHgh5GT2MQv/bTp/A4rbFZqbosKLPx",
	"GnP/tE/MBHJ8OYRGLGzrVJAXBzpdxIHbJpoh3mvGXrqReXnFtyboaVvCGh8u7CrlP07oCOPkYKRcTu+N",
	"zslzHHJRCZC2cbmJ8eJofFy7mR7Ya0kd06GsRWLTKC28Lz5vC4x0LW/B8OZLJfDogp77beZlV1tAAwdN",
	"tGvzLIwdIGpQGt1nu3NCpMrNNFu6g+d50+gks/NqxUN5HPUiJkfTjHM32S+LPWKTka6RQ9prri87dyDv",
	"VCKXS0pR0Bm1I2JEiQWOKNTvLRlv2krk6Afe2BV8EEDB3nJZqDV7EbKxPPj17YuHTIOpSxuILKTLdMTn",
	"V/KZ1vCv9MJD/q5XuT+4wZNBZSmM1Qm95edb138xrOufqG7voLuriv6XxSeq6F8OKvofD+n+tfzDiRmr",
	"5P9ZEtCOl0Swrk5zT2+4OZR9+m7EP/1Mx4mHJB22kRNR4kmHz5C9vXfx30rIiqag0C0nfRhfgacVtroe",
	"pW0tLNk4hkZ2hJ0ep93xRgr3ejkLJ8ESHmIocbkJ8fb3d0srGfm661TDq4yEn0UtC9PbwraW7IT5dVL2",
	"8aJPaDNpyR0TCvaVBDpxtN2VoN3Sx6G0YdC9ctFYV4kqKP0sy63PKtZPP95uZaXVRhSpKq6lWorckAbm",
	"UIPxq9D3Zj5b16UVR47zOvQlC3b6OhRLfxXKguuCQfH4m2+++q6bbeMzYlfDTUp693iwvJKRW5F35dgG",
	"uj2YWEDlyVINWdaorU0vW9NDY1ubYyW41nnuMBMZLmQ0oj0AG/xDLraMR6SunNheWtH+NHe/rbhZtawz",
	"quaHVRY58/yq7/SHIUefplx4dCiyW/ll9I7HGONoD8nncDZ61fRFvjdLfB1xkmGxOw8iqV0dvYQ4TNzr",
	"qgQn27U8cDRTU0ANXflhzndiWBQ3Hi+969gAq/coJ4lQYk0nTLYSFyoI2lUd4Rw82J938bpSufZWGoxb",
	"Udr5ZqWT2SWmEii2yVcSeXwPwu273p72Eo7gvo1KuNXlJ8qRNEUDn0dih7Qf1rTIPJaege0Tl9fkO+vn",
	"ORuXnqO0nvtlJwm5nroP5/37D/zaxhzSTBVc0s6CD5qvOxSSH7CXRPGtHyOKrpIyz/jMfWTu9Tmmu1t0",
	"+8D8G4wJWCjKcSAtz/FtQCUDZ0/9SDNfoW62srYyT05Pr66uTsI0J7lany4xrimzqs5Xp2Egqt0ep+Lz",
	"XXwVFXfTllsrcsOevnmJcrGwJWCIRAHXCE7DPWaPTx5RBkeQvBKzJ7OvTx6dfEWnYoWkcEqpaak+GsLh",
	"CAWF35cFBqJfQpzcFitCYvpa7P740aOwDf5lGBkkT/8wxMP2s5HG0+AmdzfiAVrQHkYVaYcU9Iu8lOpK",
	"su+1VsQTTb1ec73FOGhba2nY40ePmFj4lLyU/oM7yez9jGJwZ7+5fqebx6eRZ1jvl9MPwSlDFDc7Pp/y",
	"qjJZZDLe2T7Y3SdbJeL29u+z1wy9AlmhbXq+6NfTD12j9M2ezU69B35o218k/n36IWh9byY+nfokElPd",
	"R+CjwgOnH8ixmbQI0VTpTh2O/MFe+9WhslW74zh78v5Djx/ANV9XJSArmN381pBhw0k8Od7Mm19KpS7r",
	"Kv7FANf5anbz283/CwAA//+Jva+HGdAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
