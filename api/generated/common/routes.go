// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SouVkI6qt3y1Ap31+M7/DwAA///TTGMQxeUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
