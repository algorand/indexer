// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"time"
)

// Defines values for AccountSigType.
const (
	AccountSigTypeLsig AccountSigType = "lsig"
	AccountSigTypeMsig AccountSigType = "msig"
	AccountSigTypeSig  AccountSigType = "sig"
)

// Defines values for Hashtype.
const (
	Sha256    Hashtype = "sha256"
	Sha512256 Hashtype = "sha512_256"
)

// Defines values for OnCompletion.
const (
	Clear    OnCompletion = "clear"
	Closeout OnCompletion = "closeout"
	Delete   OnCompletion = "delete"
	Noop     OnCompletion = "noop"
	Optin    OnCompletion = "optin"
	Update   OnCompletion = "update"
)

// Defines values for TransactionTxType.
const (
	TransactionTxTypeAcfg   TransactionTxType = "acfg"
	TransactionTxTypeAfrz   TransactionTxType = "afrz"
	TransactionTxTypeAppl   TransactionTxType = "appl"
	TransactionTxTypeAxfer  TransactionTxType = "axfer"
	TransactionTxTypeKeyreg TransactionTxType = "keyreg"
	TransactionTxTypePay    TransactionTxType = "pay"
	TransactionTxTypeStpf   TransactionTxType = "stpf"
)

// Defines values for AddressRole.
const (
	AddressRoleFreezeTarget AddressRole = "freeze-target"
	AddressRoleReceiver     AddressRole = "receiver"
	AddressRoleSender       AddressRole = "sender"
)

// Defines values for SigType.
const (
	SigTypeLsig SigType = "lsig"
	SigTypeMsig SigType = "msig"
	SigTypeSig  SigType = "sig"
)

// Defines values for TxType.
const (
	TxTypeAcfg   TxType = "acfg"
	TxTypeAfrz   TxType = "afrz"
	TxTypeAppl   TxType = "appl"
	TxTypeAxfer  TxType = "axfer"
	TxTypeKeyreg TxType = "keyreg"
	TxTypePay    TxType = "pay"
	TxTypeStpf   TxType = "stpf"
)

// Defines values for SearchForAccountsParamsExclude.
const (
	SearchForAccountsParamsExcludeAll            SearchForAccountsParamsExclude = "all"
	SearchForAccountsParamsExcludeAppsLocalState SearchForAccountsParamsExclude = "apps-local-state"
	SearchForAccountsParamsExcludeAssets         SearchForAccountsParamsExclude = "assets"
	SearchForAccountsParamsExcludeCreatedApps    SearchForAccountsParamsExclude = "created-apps"
	SearchForAccountsParamsExcludeCreatedAssets  SearchForAccountsParamsExclude = "created-assets"
	SearchForAccountsParamsExcludeNone           SearchForAccountsParamsExclude = "none"
)

// Defines values for LookupAccountByIDParamsExclude.
const (
	LookupAccountByIDParamsExcludeAll            LookupAccountByIDParamsExclude = "all"
	LookupAccountByIDParamsExcludeAppsLocalState LookupAccountByIDParamsExclude = "apps-local-state"
	LookupAccountByIDParamsExcludeAssets         LookupAccountByIDParamsExclude = "assets"
	LookupAccountByIDParamsExcludeCreatedApps    LookupAccountByIDParamsExclude = "created-apps"
	LookupAccountByIDParamsExcludeCreatedAssets  LookupAccountByIDParamsExclude = "created-assets"
	LookupAccountByIDParamsExcludeNone           LookupAccountByIDParamsExclude = "none"
)

// Defines values for LookupAccountTransactionsParamsTxType.
const (
	LookupAccountTransactionsParamsTxTypeAcfg   LookupAccountTransactionsParamsTxType = "acfg"
	LookupAccountTransactionsParamsTxTypeAfrz   LookupAccountTransactionsParamsTxType = "afrz"
	LookupAccountTransactionsParamsTxTypeAppl   LookupAccountTransactionsParamsTxType = "appl"
	LookupAccountTransactionsParamsTxTypeAxfer  LookupAccountTransactionsParamsTxType = "axfer"
	LookupAccountTransactionsParamsTxTypeKeyreg LookupAccountTransactionsParamsTxType = "keyreg"
	LookupAccountTransactionsParamsTxTypePay    LookupAccountTransactionsParamsTxType = "pay"
	LookupAccountTransactionsParamsTxTypeStpf   LookupAccountTransactionsParamsTxType = "stpf"
)

// Defines values for LookupAccountTransactionsParamsSigType.
const (
	LookupAccountTransactionsParamsSigTypeLsig LookupAccountTransactionsParamsSigType = "lsig"
	LookupAccountTransactionsParamsSigTypeMsig LookupAccountTransactionsParamsSigType = "msig"
	LookupAccountTransactionsParamsSigTypeSig  LookupAccountTransactionsParamsSigType = "sig"
)

// Defines values for LookupAssetTransactionsParamsTxType.
const (
	LookupAssetTransactionsParamsTxTypeAcfg   LookupAssetTransactionsParamsTxType = "acfg"
	LookupAssetTransactionsParamsTxTypeAfrz   LookupAssetTransactionsParamsTxType = "afrz"
	LookupAssetTransactionsParamsTxTypeAppl   LookupAssetTransactionsParamsTxType = "appl"
	LookupAssetTransactionsParamsTxTypeAxfer  LookupAssetTransactionsParamsTxType = "axfer"
	LookupAssetTransactionsParamsTxTypeKeyreg LookupAssetTransactionsParamsTxType = "keyreg"
	LookupAssetTransactionsParamsTxTypePay    LookupAssetTransactionsParamsTxType = "pay"
	LookupAssetTransactionsParamsTxTypeStpf   LookupAssetTransactionsParamsTxType = "stpf"
)

// Defines values for LookupAssetTransactionsParamsSigType.
const (
	LookupAssetTransactionsParamsSigTypeLsig LookupAssetTransactionsParamsSigType = "lsig"
	LookupAssetTransactionsParamsSigTypeMsig LookupAssetTransactionsParamsSigType = "msig"
	LookupAssetTransactionsParamsSigTypeSig  LookupAssetTransactionsParamsSigType = "sig"
)

// Defines values for LookupAssetTransactionsParamsAddressRole.
const (
	LookupAssetTransactionsParamsAddressRoleFreezeTarget LookupAssetTransactionsParamsAddressRole = "freeze-target"
	LookupAssetTransactionsParamsAddressRoleReceiver     LookupAssetTransactionsParamsAddressRole = "receiver"
	LookupAssetTransactionsParamsAddressRoleSender       LookupAssetTransactionsParamsAddressRole = "sender"
)

// Defines values for SearchForTransactionsParamsTxType.
const (
	Acfg   SearchForTransactionsParamsTxType = "acfg"
	Afrz   SearchForTransactionsParamsTxType = "afrz"
	Appl   SearchForTransactionsParamsTxType = "appl"
	Axfer  SearchForTransactionsParamsTxType = "axfer"
	Keyreg SearchForTransactionsParamsTxType = "keyreg"
	Pay    SearchForTransactionsParamsTxType = "pay"
	Stpf   SearchForTransactionsParamsTxType = "stpf"
)

// Defines values for SearchForTransactionsParamsSigType.
const (
	Lsig SearchForTransactionsParamsSigType = "lsig"
	Msig SearchForTransactionsParamsSigType = "msig"
	Sig  SearchForTransactionsParamsSigType = "sig"
)

// Defines values for SearchForTransactionsParamsAddressRole.
const (
	FreezeTarget SearchForTransactionsParamsAddressRole = "freeze-target"
	Receiver     SearchForTransactionsParamsAddressRole = "receiver"
	Sender       SearchForTransactionsParamsAddressRole = "sender"
)

// Account Account information at a given round.
//
// Definition:
// data/basics/userBalance.go : AccountData
type Account struct {
	// Address the account public key
	Address string `json:"address"`

	// Amount \[algo\] total number of MicroAlgos in the account
	Amount uint64 `json:"amount"`

	// AmountWithoutPendingRewards specifies the amount of MicroAlgos in the account, without the pending rewards.
	AmountWithoutPendingRewards uint64 `json:"amount-without-pending-rewards"`

	// AppsLocalState \[appl\] applications local data stored in this account.
	//
	// Note the raw object uses `map[int] -> AppLocalState` for this type.
	AppsLocalState *[]ApplicationLocalState `json:"apps-local-state,omitempty"`

	// AppsTotalExtraPages \[teap\] the sum of all extra application program pages for this account.
	AppsTotalExtraPages *uint64 `json:"apps-total-extra-pages,omitempty"`

	// AppsTotalSchema Specifies maximums on the number of each type that may be stored.
	AppsTotalSchema *ApplicationStateSchema `json:"apps-total-schema,omitempty"`

	// Assets \[asset\] assets held by this account.
	//
	// Note the raw object uses `map[int] -> AssetHolding` for this type.
	Assets *[]AssetHolding `json:"assets,omitempty"`

	// AuthAddr \[spend\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
	AuthAddr *string `json:"auth-addr,omitempty"`

	// ClosedAtRound Round during which this account was most recently closed.
	ClosedAtRound *uint64 `json:"closed-at-round,omitempty"`

	// CreatedApps \[appp\] parameters of applications created by this account including app global data.
	//
	// Note: the raw account uses `map[int] -> AppParams` for this type.
	CreatedApps *[]Application `json:"created-apps,omitempty"`

	// CreatedAssets \[apar\] parameters of assets created by this account.
	//
	// Note: the raw account uses `map[int] -> Asset` for this type.
	CreatedAssets *[]Asset `json:"created-assets,omitempty"`

	// CreatedAtRound Round during which this account first appeared in a transaction.
	CreatedAtRound *uint64 `json:"created-at-round,omitempty"`

	// Deleted Whether or not this account is currently closed.
	Deleted *bool `json:"deleted,omitempty"`

	// Participation AccountParticipation describes the parameters used by this account in consensus protocol.
	Participation *AccountParticipation `json:"participation,omitempty"`

	// PendingRewards amount of MicroAlgos of pending rewards in this account.
	PendingRewards uint64 `json:"pending-rewards"`

	// RewardBase \[ebase\] used as part of the rewards computation. Only applicable to accounts which are participating.
	RewardBase *uint64 `json:"reward-base,omitempty"`

	// Rewards \[ern\] total rewards of MicroAlgos the account has received, including pending rewards.
	Rewards uint64 `json:"rewards"`

	// Round The round for which this information is relevant.
	Round uint64 `json:"round"`

	// SigType Indicates what type of signature is used by this account, must be one of:
	// * sig
	// * msig
	// * lsig
	// * or null if unknown
	SigType *AccountSigType `json:"sig-type,omitempty"`

	// Status \[onl\] delegation status of the account's MicroAlgos
	// * Offline - indicates that the associated account is delegated.
	// *  Online  - indicates that the associated account used as part of the delegation pool.
	// *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
	Status string `json:"status"`

	// TotalAppsOptedIn The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.
	TotalAppsOptedIn uint64 `json:"total-apps-opted-in"`

	// TotalAssetsOptedIn The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.
	TotalAssetsOptedIn uint64 `json:"total-assets-opted-in"`

	// TotalBoxBytes For app-accounts only. The total number of bytes allocated for the keys and values of boxes which belong to the associated application.
	TotalBoxBytes uint64 `json:"total-box-bytes"`

	// TotalBoxes For app-accounts only. The total number of boxes which belong to the associated application.
	TotalBoxes uint64 `json:"total-boxes"`

	// TotalCreatedApps The count of all apps (AppParams objects) created by this account.
	TotalCreatedApps uint64 `json:"total-created-apps"`

	// TotalCreatedAssets The count of all assets (AssetParams objects) created by this account.
	TotalCreatedAssets uint64 `json:"total-created-assets"`
}

// AccountSigType Indicates what type of signature is used by this account, must be one of:
// * sig
// * msig
// * lsig
// * or null if unknown
type AccountSigType string

// AccountParticipation AccountParticipation describes the parameters used by this account in consensus protocol.
type AccountParticipation struct {
	// SelectionParticipationKey \[sel\] Selection public key (if any) currently registered for this round.
	SelectionParticipationKey []byte `json:"selection-participation-key"`

	// StateProofKey \[stprf\] Root of the state proof key (if any)
	StateProofKey *[]byte `json:"state-proof-key,omitempty"`

	// VoteFirstValid \[voteFst\] First round for which this participation is valid.
	VoteFirstValid uint64 `json:"vote-first-valid"`

	// VoteKeyDilution \[voteKD\] Number of subkeys in each batch of participation keys.
	VoteKeyDilution uint64 `json:"vote-key-dilution"`

	// VoteLastValid \[voteLst\] Last round for which this participation is valid.
	VoteLastValid uint64 `json:"vote-last-valid"`

	// VoteParticipationKey \[vote\] root participation public key (if any) currently registered for this round.
	VoteParticipationKey []byte `json:"vote-participation-key"`
}

// AccountStateDelta Application state delta.
type AccountStateDelta struct {
	Address string `json:"address"`

	// Delta Application state delta.
	Delta StateDelta `json:"delta"`
}

// Application Application index and its parameters
type Application struct {
	// CreatedAtRound Round when this application was created.
	CreatedAtRound *uint64 `json:"created-at-round,omitempty"`

	// Deleted Whether or not this application is currently deleted.
	Deleted *bool `json:"deleted,omitempty"`

	// DeletedAtRound Round when this application was deleted.
	DeletedAtRound *uint64 `json:"deleted-at-round,omitempty"`

	// Id \[appidx\] application index.
	Id uint64 `json:"id"`

	// Params Stores the global information associated with an application.
	Params ApplicationParams `json:"params"`
}

// ApplicationLocalState Stores local state associated with an application.
type ApplicationLocalState struct {
	// ClosedOutAtRound Round when account closed out of the application.
	ClosedOutAtRound *uint64 `json:"closed-out-at-round,omitempty"`

	// Deleted Whether or not the application local state is currently deleted from its account.
	Deleted *bool `json:"deleted,omitempty"`

	// Id The application which this local state is for.
	Id uint64 `json:"id"`

	// KeyValue Represents a key-value store for use in an application.
	KeyValue *TealKeyValueStore `json:"key-value,omitempty"`

	// OptedInAtRound Round when the account opted into the application.
	OptedInAtRound *uint64 `json:"opted-in-at-round,omitempty"`

	// Schema Specifies maximums on the number of each type that may be stored.
	Schema ApplicationStateSchema `json:"schema"`
}

// ApplicationLogData Stores the global information associated with an application.
type ApplicationLogData struct {
	// Logs \[lg\] Logs for the application being executed by the transaction.
	Logs [][]byte `json:"logs"`

	// Txid Transaction ID
	Txid string `json:"txid"`
}

// ApplicationParams Stores the global information associated with an application.
type ApplicationParams struct {
	// ApprovalProgram \[approv\] approval program.
	ApprovalProgram []byte `json:"approval-program"`

	// ClearStateProgram \[clearp\] approval program.
	ClearStateProgram []byte `json:"clear-state-program"`

	// Creator The address that created this application. This is the address where the parameters and global state for this application can be found.
	Creator *string `json:"creator,omitempty"`

	// ExtraProgramPages \[epp\] the amount of extra program pages available to this app.
	ExtraProgramPages *uint64 `json:"extra-program-pages,omitempty"`

	// GlobalState Represents a key-value store for use in an application.
	GlobalState *TealKeyValueStore `json:"global-state,omitempty"`

	// GlobalStateSchema Specifies maximums on the number of each type that may be stored.
	GlobalStateSchema *ApplicationStateSchema `json:"global-state-schema,omitempty"`

	// LocalStateSchema Specifies maximums on the number of each type that may be stored.
	LocalStateSchema *ApplicationStateSchema `json:"local-state-schema,omitempty"`
}

// ApplicationStateSchema Specifies maximums on the number of each type that may be stored.
type ApplicationStateSchema struct {
	// NumByteSlice \[nbs\] num of byte slices.
	NumByteSlice uint64 `json:"num-byte-slice"`

	// NumUint \[nui\] num of uints.
	NumUint uint64 `json:"num-uint"`
}

// Asset Specifies both the unique identifier and the parameters for an asset
type Asset struct {
	// CreatedAtRound Round during which this asset was created.
	CreatedAtRound *uint64 `json:"created-at-round,omitempty"`

	// Deleted Whether or not this asset is currently deleted.
	Deleted *bool `json:"deleted,omitempty"`

	// DestroyedAtRound Round during which this asset was destroyed.
	DestroyedAtRound *uint64 `json:"destroyed-at-round,omitempty"`

	// Index unique asset identifier
	Index uint64 `json:"index"`

	// Params AssetParams specifies the parameters for an asset.
	//
	// \[apar\] when part of an AssetConfig transaction.
	//
	// Definition:
	// data/transactions/asset.go : AssetParams
	Params AssetParams `json:"params"`
}

// AssetHolding Describes an asset held by an account.
//
// Definition:
// data/basics/userBalance.go : AssetHolding
type AssetHolding struct {
	// Amount \[a\] number of units held.
	Amount uint64 `json:"amount"`

	// AssetId Asset ID of the holding.
	AssetId uint64 `json:"asset-id"`

	// Deleted Whether or not the asset holding is currently deleted from its account.
	Deleted *bool `json:"deleted,omitempty"`

	// IsFrozen \[f\] whether or not the holding is frozen.
	IsFrozen bool `json:"is-frozen"`

	// OptedInAtRound Round during which the account opted into this asset holding.
	OptedInAtRound *uint64 `json:"opted-in-at-round,omitempty"`

	// OptedOutAtRound Round during which the account opted out of this asset holding.
	OptedOutAtRound *uint64 `json:"opted-out-at-round,omitempty"`
}

// AssetParams AssetParams specifies the parameters for an asset.
//
// \[apar\] when part of an AssetConfig transaction.
//
// Definition:
// data/transactions/asset.go : AssetParams
type AssetParams struct {
	// Clawback \[c\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.
	Clawback *string `json:"clawback,omitempty"`

	// Creator The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
	Creator string `json:"creator"`

	// Decimals \[dc\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).
	Decimals uint64 `json:"decimals"`

	// DefaultFrozen \[df\] Whether holdings of this asset are frozen by default.
	DefaultFrozen *bool `json:"default-frozen,omitempty"`

	// Freeze \[f\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.
	Freeze *string `json:"freeze,omitempty"`

	// Manager \[m\] Address of account used to manage the keys of this asset and to destroy it.
	Manager *string `json:"manager,omitempty"`

	// MetadataHash \[am\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.
	MetadataHash *[]byte `json:"metadata-hash,omitempty"`

	// Name \[an\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.
	Name *string `json:"name,omitempty"`

	// NameB64 Base64 encoded name of this asset, as supplied by the creator.
	NameB64 *[]byte `json:"name-b64,omitempty"`

	// Reserve \[r\] Address of account holding reserve (non-minted) units of this asset.
	Reserve *string `json:"reserve,omitempty"`

	// Total \[t\] The total number of units of this asset.
	Total uint64 `json:"total"`

	// UnitName \[un\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.
	UnitName *string `json:"unit-name,omitempty"`

	// UnitNameB64 Base64 encoded name of a unit of this asset, as supplied by the creator.
	UnitNameB64 *[]byte `json:"unit-name-b64,omitempty"`

	// Url \[au\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.
	Url *string `json:"url,omitempty"`

	// UrlB64 Base64 encoded URL where more information about the asset can be retrieved.
	UrlB64 *[]byte `json:"url-b64,omitempty"`
}

// Block Block information.
//
// Definition:
// data/bookkeeping/block.go : Block
type Block struct {
	// GenesisHash \[gh\] hash to which this block belongs.
	GenesisHash []byte `json:"genesis-hash"`

	// GenesisId \[gen\] ID to which this block belongs.
	GenesisId string `json:"genesis-id"`

	// ParticipationUpdates Participation account data that needs to be checked/acted on by the network.
	ParticipationUpdates *ParticipationUpdates `json:"participation-updates,omitempty"`

	// PreviousBlockHash \[prev\] Previous block hash.
	PreviousBlockHash []byte `json:"previous-block-hash"`

	// Rewards Fields relating to rewards,
	Rewards *BlockRewards `json:"rewards,omitempty"`

	// Round \[rnd\] Current round on which this block was appended to the chain.
	Round uint64 `json:"round"`

	// Seed \[seed\] Sortition seed.
	Seed []byte `json:"seed"`

	// StateProofTracking Tracks the status of state proofs.
	StateProofTracking *[]StateProofTracking `json:"state-proof-tracking,omitempty"`

	// Timestamp \[ts\] Block creation timestamp in seconds since eposh
	Timestamp uint64 `json:"timestamp"`

	// Transactions \[txns\] list of transactions corresponding to a given round.
	Transactions *[]Transaction `json:"transactions,omitempty"`

	// TransactionsRoot \[txn\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order. For the empty block, it's 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.
	TransactionsRoot []byte `json:"transactions-root"`

	// TransactionsRootSha256 \[txn256\] TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a vector commitment instead of a merkle tree, and SHA256 hash function instead of the default SHA512_256. This commitment can be used on environments where only the SHA256 function exists.
	TransactionsRootSha256 []byte `json:"transactions-root-sha256"`

	// TxnCounter \[tc\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.
	//
	// Specifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported).
	TxnCounter *uint64 `json:"txn-counter,omitempty"`

	// UpgradeState Fields relating to a protocol upgrade.
	UpgradeState *BlockUpgradeState `json:"upgrade-state,omitempty"`

	// UpgradeVote Fields relating to voting for a protocol upgrade.
	UpgradeVote *BlockUpgradeVote `json:"upgrade-vote,omitempty"`
}

// BlockRewards Fields relating to rewards,
type BlockRewards struct {
	// FeeSink \[fees\] accepts transaction fees, it can only spend to the incentive pool.
	FeeSink string `json:"fee-sink"`

	// RewardsCalculationRound \[rwcalr\] number of leftover MicroAlgos after the distribution of rewards-rate MicroAlgos for every reward unit in the next round.
	RewardsCalculationRound uint64 `json:"rewards-calculation-round"`

	// RewardsLevel \[earn\] How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis.
	RewardsLevel uint64 `json:"rewards-level"`

	// RewardsPool \[rwd\] accepts periodic injections from the fee-sink and continually redistributes them as rewards.
	RewardsPool string `json:"rewards-pool"`

	// RewardsRate \[rate\] Number of new MicroAlgos added to the participation stake from rewards at the next round.
	RewardsRate uint64 `json:"rewards-rate"`

	// RewardsResidue \[frac\] Number of leftover MicroAlgos after the distribution of RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.
	RewardsResidue uint64 `json:"rewards-residue"`
}

// BlockUpgradeState Fields relating to a protocol upgrade.
type BlockUpgradeState struct {
	// CurrentProtocol \[proto\] The current protocol version.
	CurrentProtocol string `json:"current-protocol"`

	// NextProtocol \[nextproto\] The next proposed protocol version.
	NextProtocol *string `json:"next-protocol,omitempty"`

	// NextProtocolApprovals \[nextyes\] Number of blocks which approved the protocol upgrade.
	NextProtocolApprovals *uint64 `json:"next-protocol-approvals,omitempty"`

	// NextProtocolSwitchOn \[nextswitch\] Round on which the protocol upgrade will take effect.
	NextProtocolSwitchOn *uint64 `json:"next-protocol-switch-on,omitempty"`

	// NextProtocolVoteBefore \[nextbefore\] Deadline round for this protocol upgrade (No votes will be consider after this round).
	NextProtocolVoteBefore *uint64 `json:"next-protocol-vote-before,omitempty"`
}

// BlockUpgradeVote Fields relating to voting for a protocol upgrade.
type BlockUpgradeVote struct {
	// UpgradeApprove \[upgradeyes\] Indicates a yes vote for the current proposal.
	UpgradeApprove *bool `json:"upgrade-approve,omitempty"`

	// UpgradeDelay \[upgradedelay\] Indicates the time between acceptance and execution.
	UpgradeDelay *uint64 `json:"upgrade-delay,omitempty"`

	// UpgradePropose \[upgradeprop\] Indicates a proposed upgrade.
	UpgradePropose *string `json:"upgrade-propose,omitempty"`
}

// Box Box name and its content.
type Box struct {
	// Name \[name\] box name, base64 encoded
	Name []byte `json:"name"`

	// Round The round for which this information is relevant
	Round uint64 `json:"round"`

	// Value \[value\] box value, base64 encoded.
	Value []byte `json:"value"`
}

// BoxDescriptor Box descriptor describes an app box without a value.
type BoxDescriptor struct {
	// Name Base64 encoded box name
	Name []byte `json:"name"`
}

// EvalDelta Represents a TEAL value delta.
type EvalDelta struct {
	// Action \[at\] delta action.
	Action uint64 `json:"action"`

	// Bytes \[bs\] bytes value.
	Bytes *string `json:"bytes,omitempty"`

	// Uint \[ui\] uint value.
	Uint *uint64 `json:"uint,omitempty"`
}

// EvalDeltaKeyValue Key-value pairs for StateDelta.
type EvalDeltaKeyValue struct {
	Key string `json:"key"`

	// Value Represents a TEAL value delta.
	Value EvalDelta `json:"value"`
}

// HashFactory defines model for HashFactory.
type HashFactory struct {
	// HashType \[t\]
	HashType *uint64 `json:"hash-type,omitempty"`
}

// Hashtype The type of hash function used to create the proof, must be one of:
// * sha512_256
// * sha256
type Hashtype string

// HealthCheck A health check response.
type HealthCheck struct {
	Data        *map[string]interface{} `json:"data,omitempty"`
	DbAvailable bool                    `json:"db-available"`
	Errors      *[]string               `json:"errors,omitempty"`
	IsMigrating bool                    `json:"is-migrating"`
	Message     string                  `json:"message"`
	Round       uint64                  `json:"round"`

	// Version Current version.
	Version string `json:"version"`
}

// IndexerStateProofMessage defines model for IndexerStateProofMessage.
type IndexerStateProofMessage struct {
	// BlockHeadersCommitment \[b\]
	BlockHeadersCommitment *[]byte `json:"block-headers-commitment,omitempty"`

	// FirstAttestedRound \[f\]
	FirstAttestedRound *uint64 `json:"first-attested-round,omitempty"`

	// LatestAttestedRound \[l\]
	LatestAttestedRound *uint64 `json:"latest-attested-round,omitempty"`

	// LnProvenWeight \[P\]
	LnProvenWeight *uint64 `json:"ln-proven-weight,omitempty"`

	// VotersCommitment \[v\]
	VotersCommitment *[]byte `json:"voters-commitment,omitempty"`
}

// MerkleArrayProof defines model for MerkleArrayProof.
type MerkleArrayProof struct {
	HashFactory *HashFactory `json:"hash-factory,omitempty"`

	// Path \[pth\]
	Path *[][]byte `json:"path,omitempty"`

	// TreeDepth \[td\]
	TreeDepth *uint64 `json:"tree-depth,omitempty"`
}

// MiniAssetHolding A simplified version of AssetHolding
type MiniAssetHolding struct {
	Address string `json:"address"`
	Amount  uint64 `json:"amount"`

	// Deleted Whether or not this asset holding is currently deleted from its account.
	Deleted  *bool `json:"deleted,omitempty"`
	IsFrozen bool  `json:"is-frozen"`

	// OptedInAtRound Round during which the account opted into the asset.
	OptedInAtRound *uint64 `json:"opted-in-at-round,omitempty"`

	// OptedOutAtRound Round during which the account opted out of the asset.
	OptedOutAtRound *uint64 `json:"opted-out-at-round,omitempty"`
}

// OnCompletion \[apan\] defines the what additional actions occur with the transaction.
//
// Valid types:
// * noop
// * optin
// * closeout
// * clear
// * update
// * update
// * delete
type OnCompletion string

// ParticipationUpdates Participation account data that needs to be checked/acted on by the network.
type ParticipationUpdates struct {
	// ExpiredParticipationAccounts \[partupdrmv\] a list of online accounts that needs to be converted to offline since their participation key expired.
	ExpiredParticipationAccounts *[]string `json:"expired-participation-accounts,omitempty"`
}

// StateDelta Application state delta.
type StateDelta = []EvalDeltaKeyValue

// StateProofFields \[sp\] represents a state proof.
//
// Definition:
// crypto/stateproof/structs.go : StateProof
type StateProofFields struct {
	PartProofs *MerkleArrayProof `json:"part-proofs,omitempty"`

	// PositionsToReveal \[pr\] Sequence of reveal positions.
	PositionsToReveal *[]uint64 `json:"positions-to-reveal,omitempty"`

	// Reveals \[r\] Note that this is actually stored as a map[uint64] - Reveal in the actual msgp
	Reveals *[]StateProofReveal `json:"reveals,omitempty"`

	// SaltVersion \[v\] Salt version of the merkle signature.
	SaltVersion *uint64 `json:"salt-version,omitempty"`

	// SigCommit \[c\]
	SigCommit *[]byte           `json:"sig-commit,omitempty"`
	SigProofs *MerkleArrayProof `json:"sig-proofs,omitempty"`

	// SignedWeight \[w\]
	SignedWeight *uint64 `json:"signed-weight,omitempty"`
}

// StateProofParticipant defines model for StateProofParticipant.
type StateProofParticipant struct {
	Verifier *StateProofVerifier `json:"verifier,omitempty"`

	// Weight \[w\]
	Weight *uint64 `json:"weight,omitempty"`
}

// StateProofReveal defines model for StateProofReveal.
type StateProofReveal struct {
	Participant *StateProofParticipant `json:"participant,omitempty"`

	// Position The position in the signature and participants arrays corresponding to this entry.
	Position *uint64            `json:"position,omitempty"`
	SigSlot  *StateProofSigSlot `json:"sig-slot,omitempty"`
}

// StateProofSigSlot defines model for StateProofSigSlot.
type StateProofSigSlot struct {
	// LowerSigWeight \[l\] The total weight of signatures in the lower-numbered slots.
	LowerSigWeight *uint64              `json:"lower-sig-weight,omitempty"`
	Signature      *StateProofSignature `json:"signature,omitempty"`
}

// StateProofSignature defines model for StateProofSignature.
type StateProofSignature struct {
	FalconSignature  *[]byte           `json:"falcon-signature,omitempty"`
	MerkleArrayIndex *uint64           `json:"merkle-array-index,omitempty"`
	Proof            *MerkleArrayProof `json:"proof,omitempty"`

	// VerifyingKey \[vkey\]
	VerifyingKey *[]byte `json:"verifying-key,omitempty"`
}

// StateProofTracking defines model for StateProofTracking.
type StateProofTracking struct {
	// NextRound \[n\] Next round for which we will accept a state proof transaction.
	NextRound *uint64 `json:"next-round,omitempty"`

	// OnlineTotalWeight \[t\] The total number of microalgos held by the online accounts during the StateProof round.
	OnlineTotalWeight *uint64 `json:"online-total-weight,omitempty"`

	// Type State Proof Type. Note the raw object uses map with this as key.
	Type *uint64 `json:"type,omitempty"`

	// VotersCommitment \[v\] Root of a vector commitment containing online accounts that will help sign the proof.
	VotersCommitment *[]byte `json:"voters-commitment,omitempty"`
}

// StateProofVerifier defines model for StateProofVerifier.
type StateProofVerifier struct {
	// Commitment \[cmt\] Represents the root of the vector commitment tree.
	Commitment *[]byte `json:"commitment,omitempty"`

	// KeyLifetime \[lf\] Key lifetime.
	KeyLifetime *uint64 `json:"key-lifetime,omitempty"`
}

// StateSchema Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
type StateSchema struct {
	// NumByteSlice Maximum number of TEAL byte slices that may be stored in the key/value store.
	NumByteSlice uint64 `json:"num-byte-slice"`

	// NumUint Maximum number of TEAL uints that may be stored in the key/value store.
	NumUint uint64 `json:"num-uint"`
}

// TealKeyValue Represents a key-value pair in an application store.
type TealKeyValue struct {
	Key string `json:"key"`

	// Value Represents a TEAL value.
	Value TealValue `json:"value"`
}

// TealKeyValueStore Represents a key-value store for use in an application.
type TealKeyValueStore = []TealKeyValue

// TealValue Represents a TEAL value.
type TealValue struct {
	// Bytes \[tb\] bytes value.
	Bytes string `json:"bytes"`

	// Type \[tt\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**
	Type uint64 `json:"type"`

	// Uint \[ui\] uint value.
	Uint uint64 `json:"uint"`
}

// Transaction Contains all fields common to all transactions and serves as an envelope to all transactions type. Represents both regular and inner transactions.
//
// Definition:
// data/transactions/signedtxn.go : SignedTxn
// data/transactions/transaction.go : Transaction
type Transaction struct {
	// ApplicationTransaction Fields for application transactions.
	//
	// Definition:
	// data/transactions/application.go : ApplicationCallTxnFields
	ApplicationTransaction *TransactionApplication `json:"application-transaction,omitempty"`

	// AssetConfigTransaction Fields for asset allocation, re-configuration, and destruction.
	//
	//
	// A zero value for asset-id indicates asset creation.
	// A zero value for the params indicates asset destruction.
	//
	// Definition:
	// data/transactions/asset.go : AssetConfigTxnFields
	AssetConfigTransaction *TransactionAssetConfig `json:"asset-config-transaction,omitempty"`

	// AssetFreezeTransaction Fields for an asset freeze transaction.
	//
	// Definition:
	// data/transactions/asset.go : AssetFreezeTxnFields
	AssetFreezeTransaction *TransactionAssetFreeze `json:"asset-freeze-transaction,omitempty"`

	// AssetTransferTransaction Fields for an asset transfer transaction.
	//
	// Definition:
	// data/transactions/asset.go : AssetTransferTxnFields
	AssetTransferTransaction *TransactionAssetTransfer `json:"asset-transfer-transaction,omitempty"`

	// AuthAddr \[sgnr\] this is included with signed transactions when the signing address does not equal the sender. The backend can use this to ensure that auth addr is equal to the accounts auth addr.
	AuthAddr *string `json:"auth-addr,omitempty"`

	// CloseRewards \[rc\] rewards applied to close-remainder-to account.
	CloseRewards *uint64 `json:"close-rewards,omitempty"`

	// ClosingAmount \[ca\] closing amount for transaction.
	ClosingAmount *uint64 `json:"closing-amount,omitempty"`

	// ConfirmedRound Round when the transaction was confirmed.
	ConfirmedRound *uint64 `json:"confirmed-round,omitempty"`

	// CreatedApplicationIndex Specifies an application index (ID) if an application was created with this transaction.
	CreatedApplicationIndex *uint64 `json:"created-application-index,omitempty"`

	// CreatedAssetIndex Specifies an asset index (ID) if an asset was created with this transaction.
	CreatedAssetIndex *uint64 `json:"created-asset-index,omitempty"`

	// Fee \[fee\] Transaction fee.
	Fee uint64 `json:"fee"`

	// FirstValid \[fv\] First valid round for this transaction.
	FirstValid uint64 `json:"first-valid"`

	// GenesisHash \[gh\] Hash of genesis block.
	GenesisHash *[]byte `json:"genesis-hash,omitempty"`

	// GenesisId \[gen\] genesis block ID.
	GenesisId *string `json:"genesis-id,omitempty"`

	// GlobalStateDelta Application state delta.
	GlobalStateDelta *StateDelta `json:"global-state-delta,omitempty"`

	// Group \[grp\] Base64 encoded byte array of a sha512/256 digest. When present indicates that this transaction is part of a transaction group and the value is the sha512/256 hash of the transactions in that group.
	Group *[]byte `json:"group,omitempty"`

	// Id Transaction ID
	Id *string `json:"id,omitempty"`

	// InnerTxns Inner transactions produced by application execution.
	InnerTxns *[]Transaction `json:"inner-txns,omitempty"`

	// IntraRoundOffset Offset into the round where this transaction was confirmed.
	IntraRoundOffset *uint64 `json:"intra-round-offset,omitempty"`

	// KeyregTransaction Fields for a keyreg transaction.
	//
	// Definition:
	// data/transactions/keyreg.go : KeyregTxnFields
	KeyregTransaction *TransactionKeyreg `json:"keyreg-transaction,omitempty"`

	// LastValid \[lv\] Last valid round for this transaction.
	LastValid uint64 `json:"last-valid"`

	// Lease \[lx\] Base64 encoded 32-byte array. Lease enforces mutual exclusion of transactions.  If this field is nonzero, then once the transaction is confirmed, it acquires the lease identified by the (Sender, Lease) pair of the transaction until the LastValid round passes.  While this transaction possesses the lease, no other transaction specifying this lease can be confirmed.
	Lease *[]byte `json:"lease,omitempty"`

	// LocalStateDelta \[ld\] Local state key/value changes for the application being executed by this transaction.
	LocalStateDelta *[]AccountStateDelta `json:"local-state-delta,omitempty"`

	// Logs \[lg\] Logs for the application being executed by this transaction.
	Logs *[][]byte `json:"logs,omitempty"`

	// Note \[note\] Free form data.
	Note *[]byte `json:"note,omitempty"`

	// PaymentTransaction Fields for a payment transaction.
	//
	// Definition:
	// data/transactions/payment.go : PaymentTxnFields
	PaymentTransaction *TransactionPayment `json:"payment-transaction,omitempty"`

	// ReceiverRewards \[rr\] rewards applied to receiver account.
	ReceiverRewards *uint64 `json:"receiver-rewards,omitempty"`

	// RekeyTo \[rekey\] when included in a valid transaction, the accounts auth addr will be updated with this value and future signatures must be signed with the key represented by this address.
	RekeyTo *string `json:"rekey-to,omitempty"`

	// RoundTime Time when the block this transaction is in was confirmed.
	RoundTime *uint64 `json:"round-time,omitempty"`

	// Sender \[snd\] Sender's address.
	Sender string `json:"sender"`

	// SenderRewards \[rs\] rewards applied to sender account.
	SenderRewards *uint64 `json:"sender-rewards,omitempty"`

	// Signature Validation signature associated with some data. Only one of the signatures should be provided.
	Signature *TransactionSignature `json:"signature,omitempty"`

	// StateProofTransaction Fields for a state proof transaction.
	//
	// Definition:
	// data/transactions/stateproof.go : StateProofTxnFields
	StateProofTransaction *TransactionStateProof `json:"state-proof-transaction,omitempty"`

	// TxType \[type\] Indicates what type of transaction this is. Different types have different fields.
	//
	// Valid types, and where their fields are stored:
	// * \[pay\] payment-transaction
	// * \[keyreg\] keyreg-transaction
	// * \[acfg\] asset-config-transaction
	// * \[axfer\] asset-transfer-transaction
	// * \[afrz\] asset-freeze-transaction
	// * \[appl\] application-transaction
	// * \[stpf\] state-proof-transaction
	TxType TransactionTxType `json:"tx-type"`
}

// TransactionTxType \[type\] Indicates what type of transaction this is. Different types have different fields.
//
// Valid types, and where their fields are stored:
// * \[pay\] payment-transaction
// * \[keyreg\] keyreg-transaction
// * \[acfg\] asset-config-transaction
// * \[axfer\] asset-transfer-transaction
// * \[afrz\] asset-freeze-transaction
// * \[appl\] application-transaction
// * \[stpf\] state-proof-transaction
type TransactionTxType string

// TransactionApplication Fields for application transactions.
//
// Definition:
// data/transactions/application.go : ApplicationCallTxnFields
type TransactionApplication struct {
	// Accounts \[apat\] List of accounts in addition to the sender that may be accessed from the application's approval-program and clear-state-program.
	Accounts *[]string `json:"accounts,omitempty"`

	// ApplicationArgs \[apaa\] transaction specific arguments accessed from the application's approval-program and clear-state-program.
	ApplicationArgs *[]string `json:"application-args,omitempty"`

	// ApplicationId \[apid\] ID of the application being configured or empty if creating.
	ApplicationId uint64 `json:"application-id"`

	// ApprovalProgram \[apap\] Logic executed for every application transaction, except when on-completion is set to "clear". It can read and write global state for the application, as well as account-specific local state. Approval programs may reject the transaction.
	ApprovalProgram *[]byte `json:"approval-program,omitempty"`

	// ClearStateProgram \[apsu\] Logic executed for application transactions with on-completion set to "clear". It can read and write global state for the application, as well as account-specific local state. Clear state programs cannot reject the transaction.
	ClearStateProgram *[]byte `json:"clear-state-program,omitempty"`

	// ExtraProgramPages \[epp\] specifies the additional app program len requested in pages.
	ExtraProgramPages *uint64 `json:"extra-program-pages,omitempty"`

	// ForeignApps \[apfa\] Lists the applications in addition to the application-id whose global states may be accessed by this application's approval-program and clear-state-program. The access is read-only.
	ForeignApps *[]uint64 `json:"foreign-apps,omitempty"`

	// ForeignAssets \[apas\] lists the assets whose parameters may be accessed by this application's ApprovalProgram and ClearStateProgram. The access is read-only.
	ForeignAssets *[]uint64 `json:"foreign-assets,omitempty"`

	// GlobalStateSchema Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
	GlobalStateSchema *StateSchema `json:"global-state-schema,omitempty"`

	// LocalStateSchema Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
	LocalStateSchema *StateSchema `json:"local-state-schema,omitempty"`

	// OnCompletion \[apan\] defines the what additional actions occur with the transaction.
	//
	// Valid types:
	// * noop
	// * optin
	// * closeout
	// * clear
	// * update
	// * update
	// * delete
	OnCompletion OnCompletion `json:"on-completion"`
}

// TransactionAssetConfig Fields for asset allocation, re-configuration, and destruction.
//
// A zero value for asset-id indicates asset creation.
// A zero value for the params indicates asset destruction.
//
// Definition:
// data/transactions/asset.go : AssetConfigTxnFields
type TransactionAssetConfig struct {
	// AssetId \[xaid\] ID of the asset being configured or empty if creating.
	AssetId *uint64 `json:"asset-id,omitempty"`

	// Params AssetParams specifies the parameters for an asset.
	//
	// \[apar\] when part of an AssetConfig transaction.
	//
	// Definition:
	// data/transactions/asset.go : AssetParams
	Params *AssetParams `json:"params,omitempty"`
}

// TransactionAssetFreeze Fields for an asset freeze transaction.
//
// Definition:
// data/transactions/asset.go : AssetFreezeTxnFields
type TransactionAssetFreeze struct {
	// Address \[fadd\] Address of the account whose asset is being frozen or thawed.
	Address string `json:"address"`

	// AssetId \[faid\] ID of the asset being frozen or thawed.
	AssetId uint64 `json:"asset-id"`

	// NewFreezeStatus \[afrz\] The new freeze status.
	NewFreezeStatus bool `json:"new-freeze-status"`
}

// TransactionAssetTransfer Fields for an asset transfer transaction.
//
// Definition:
// data/transactions/asset.go : AssetTransferTxnFields
type TransactionAssetTransfer struct {
	// Amount \[aamt\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account's Assets map.
	Amount uint64 `json:"amount"`

	// AssetId \[xaid\] ID of the asset being transferred.
	AssetId uint64 `json:"asset-id"`

	// CloseAmount Number of assets transferred to the close-to account as part of the transaction.
	CloseAmount *uint64 `json:"close-amount,omitempty"`

	// CloseTo \[aclose\] Indicates that the asset should be removed from the account's Assets map, and specifies where the remaining asset holdings should be transferred.  It's always valid to transfer remaining asset holdings to the creator account.
	CloseTo *string `json:"close-to,omitempty"`

	// Receiver \[arcv\] Recipient address of the transfer.
	Receiver string `json:"receiver"`

	// Sender \[asnd\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams.
	Sender *string `json:"sender,omitempty"`
}

// TransactionKeyreg Fields for a keyreg transaction.
//
// Definition:
// data/transactions/keyreg.go : KeyregTxnFields
type TransactionKeyreg struct {
	// NonParticipation \[nonpart\] Mark the account as participating or non-participating.
	NonParticipation *bool `json:"non-participation,omitempty"`

	// SelectionParticipationKey \[selkey\] Public key used with the Verified Random Function (VRF) result during committee selection.
	SelectionParticipationKey *[]byte `json:"selection-participation-key,omitempty"`

	// StateProofKey \[sprfkey\] State proof key used in key registration transactions.
	StateProofKey *[]byte `json:"state-proof-key,omitempty"`

	// VoteFirstValid \[votefst\] First round this participation key is valid.
	VoteFirstValid *uint64 `json:"vote-first-valid,omitempty"`

	// VoteKeyDilution \[votekd\] Number of subkeys in each batch of participation keys.
	VoteKeyDilution *uint64 `json:"vote-key-dilution,omitempty"`

	// VoteLastValid \[votelst\] Last round this participation key is valid.
	VoteLastValid *uint64 `json:"vote-last-valid,omitempty"`

	// VoteParticipationKey \[votekey\] Participation public key used in key registration transactions.
	VoteParticipationKey *[]byte `json:"vote-participation-key,omitempty"`
}

// TransactionPayment Fields for a payment transaction.
//
// Definition:
// data/transactions/payment.go : PaymentTxnFields
type TransactionPayment struct {
	// Amount \[amt\] number of MicroAlgos intended to be transferred.
	Amount uint64 `json:"amount"`

	// CloseAmount Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account.
	CloseAmount *uint64 `json:"close-amount,omitempty"`

	// CloseRemainderTo \[close\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.
	CloseRemainderTo *string `json:"close-remainder-to,omitempty"`

	// Receiver \[rcv\] receiver's address.
	Receiver string `json:"receiver"`
}

// TransactionSignature Validation signature associated with some data. Only one of the signatures should be provided.
type TransactionSignature struct {
	// Logicsig \[lsig\] Programatic transaction signature.
	//
	// Definition:
	// data/transactions/logicsig.go
	Logicsig *TransactionSignatureLogicsig `json:"logicsig,omitempty"`

	// Multisig \[msig\] structure holding multiple subsignatures.
	//
	// Definition:
	// crypto/multisig.go : MultisigSig
	Multisig *TransactionSignatureMultisig `json:"multisig,omitempty"`

	// Sig \[sig\] Standard ed25519 signature.
	Sig *[]byte `json:"sig,omitempty"`
}

// TransactionSignatureLogicsig \[lsig\] Programatic transaction signature.
//
// Definition:
// data/transactions/logicsig.go
type TransactionSignatureLogicsig struct {
	// Args \[arg\] Logic arguments, base64 encoded.
	Args *[]string `json:"args,omitempty"`

	// Logic \[l\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.
	Logic []byte `json:"logic"`

	// MultisigSignature \[msig\] structure holding multiple subsignatures.
	//
	// Definition:
	// crypto/multisig.go : MultisigSig
	MultisigSignature *TransactionSignatureMultisig `json:"multisig-signature,omitempty"`

	// Signature \[sig\] ed25519 signature.
	Signature *[]byte `json:"signature,omitempty"`
}

// TransactionSignatureMultisig \[msig\] structure holding multiple subsignatures.
//
// Definition:
// crypto/multisig.go : MultisigSig
type TransactionSignatureMultisig struct {
	// Subsignature \[subsig\] holds pairs of public key and signatures.
	Subsignature *[]TransactionSignatureMultisigSubsignature `json:"subsignature,omitempty"`

	// Threshold \[thr\]
	Threshold *uint64 `json:"threshold,omitempty"`

	// Version \[v\]
	Version *uint64 `json:"version,omitempty"`
}

// TransactionSignatureMultisigSubsignature defines model for TransactionSignatureMultisigSubsignature.
type TransactionSignatureMultisigSubsignature struct {
	// PublicKey \[pk\]
	PublicKey *[]byte `json:"public-key,omitempty"`

	// Signature \[s\]
	Signature *[]byte `json:"signature,omitempty"`
}

// TransactionStateProof Fields for a state proof transaction.
//
// Definition:
// data/transactions/stateproof.go : StateProofTxnFields
type TransactionStateProof struct {
	Message *IndexerStateProofMessage `json:"message,omitempty"`

	// StateProof \[sp\] represents a state proof.
	//
	// Definition:
	// crypto/stateproof/structs.go : StateProof
	StateProof *StateProofFields `json:"state-proof,omitempty"`

	// StateProofType \[sptype\] Type of the state proof. Integer representing an entry defined in protocol/stateproof.go
	StateProofType *uint64 `json:"state-proof-type,omitempty"`
}

// AccountId defines model for account-id.
type AccountId = string

// Address defines model for address.
type Address = string

// AddressRole defines model for address-role.
type AddressRole string

// AfterTime defines model for after-time.
type AfterTime = time.Time

// ApplicationId defines model for application-id.
type ApplicationId uint64

// AssetId defines model for asset-id.
type AssetId uint64

// AuthAddr defines model for auth-addr.
type AuthAddr = string

// BeforeTime defines model for before-time.
type BeforeTime = time.Time

// BoxName defines model for box-name.
type BoxName = string

// CurrencyGreaterThan defines model for currency-greater-than.
type CurrencyGreaterThan uint64

// CurrencyLessThan defines model for currency-less-than.
type CurrencyLessThan uint64

// Exclude defines model for exclude.
type Exclude = []string

// ExcludeCloseTo defines model for exclude-close-to.
type ExcludeCloseTo = bool

// HeaderOnly defines model for header-only.
type HeaderOnly = bool

// IncludeAll defines model for include-all.
type IncludeAll = bool

// Limit defines model for limit.
type Limit uint64

// MaxRound defines model for max-round.
type MaxRound uint64

// MinRound defines model for min-round.
type MinRound uint64

// Next defines model for next.
type Next = string

// NotePrefix defines model for note-prefix.
type NotePrefix = string

// RekeyTo defines model for rekey-to.
type RekeyTo = bool

// Round defines model for round.
type Round uint64

// RoundNumber defines model for round-number.
type RoundNumber uint64

// SenderAddress defines model for sender-address.
type SenderAddress = string

// SigType defines model for sig-type.
type SigType string

// TxType defines model for tx-type.
type TxType string

// Txid defines model for txid.
type Txid = string

// AccountResponse defines model for AccountResponse.
type AccountResponse struct {
	// Account Account information at a given round.
	//
	// Definition:
	// data/basics/userBalance.go : AccountData
	Account Account `json:"account"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`
}

// AccountsResponse defines model for AccountsResponse.
type AccountsResponse struct {
	Accounts []Account `json:"accounts"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// ApplicationLocalStatesResponse defines model for ApplicationLocalStatesResponse.
type ApplicationLocalStatesResponse struct {
	AppsLocalStates []ApplicationLocalState `json:"apps-local-states"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// ApplicationLogsResponse defines model for ApplicationLogsResponse.
type ApplicationLogsResponse struct {
	// ApplicationId \[appidx\] application index.
	ApplicationId uint64 `json:"application-id"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64                `json:"current-round"`
	LogData      *[]ApplicationLogData `json:"log-data,omitempty"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// ApplicationResponse defines model for ApplicationResponse.
type ApplicationResponse struct {
	// Application Application index and its parameters
	Application *Application `json:"application,omitempty"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`
}

// ApplicationsResponse defines model for ApplicationsResponse.
type ApplicationsResponse struct {
	Applications []Application `json:"applications"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// AssetBalancesResponse defines model for AssetBalancesResponse.
type AssetBalancesResponse struct {
	Balances []MiniAssetHolding `json:"balances"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// AssetHoldingsResponse defines model for AssetHoldingsResponse.
type AssetHoldingsResponse struct {
	Assets []AssetHolding `json:"assets"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// AssetResponse defines model for AssetResponse.
type AssetResponse struct {
	// Asset Specifies both the unique identifier and the parameters for an asset
	Asset Asset `json:"asset"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`
}

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse struct {
	Assets []Asset `json:"assets"`

	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// BlockResponse Block information.
//
// Definition:
// data/bookkeeping/block.go : Block
type BlockResponse = Block

// BoxResponse Box name and its content.
type BoxResponse = Box

// BoxesResponse defines model for BoxesResponse.
type BoxesResponse struct {
	// ApplicationId \[appidx\] application index.
	ApplicationId uint64          `json:"application-id"`
	Boxes         []BoxDescriptor `json:"boxes"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken *string `json:"next-token,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message string                  `json:"message"`
}

// HealthCheckResponse A health check response.
type HealthCheckResponse = HealthCheck

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// Transaction Contains all fields common to all transactions and serves as an envelope to all transactions type. Represents both regular and inner transactions.
	//
	// Definition:
	// data/transactions/signedtxn.go : SignedTxn
	// data/transactions/transaction.go : Transaction
	Transaction Transaction `json:"transaction"`
}

// TransactionsResponse defines model for TransactionsResponse.
type TransactionsResponse struct {
	// CurrentRound Round at which the results were computed.
	CurrentRound uint64 `json:"current-round"`

	// NextToken Used for pagination, when making another request provide this token with the next parameter.
	NextToken    *string       `json:"next-token,omitempty"`
	Transactions []Transaction `json:"transactions"`
}

// SearchForAccountsParams defines parameters for SearchForAccounts.
type SearchForAccountsParams struct {
	// AssetId Asset ID
	AssetId *uint64 `form:"asset-id,omitempty" json:"asset-id,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// CurrencyGreaterThan Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyGreaterThan *uint64 `form:"currency-greater-than,omitempty" json:"currency-greater-than,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Exclude Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
	Exclude *[]SearchForAccountsParamsExclude `form:"exclude,omitempty" json:"exclude,omitempty"`

	// CurrencyLessThan Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyLessThan *uint64 `form:"currency-less-than,omitempty" json:"currency-less-than,omitempty"`

	// AuthAddr Include accounts configured to use this spending key.
	AuthAddr *string `form:"auth-addr,omitempty" json:"auth-addr,omitempty"`

	// Round Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. Using application-id or asset-id filters will return both creator and opt-in accounts. Filtering by include-all will return creator and opt-in accounts for deleted assets and accounts. Non-opt-in managers are not included in the results when asset-id is used.
	Round *uint64 `form:"round,omitempty" json:"round,omitempty"`

	// ApplicationId Application ID
	ApplicationId *uint64 `form:"application-id,omitempty" json:"application-id,omitempty"`
}

// SearchForAccountsParamsExclude defines parameters for SearchForAccounts.
type SearchForAccountsParamsExclude string

// LookupAccountByIDParams defines parameters for LookupAccountByID.
type LookupAccountByIDParams struct {
	// Round Include results for the specified round.
	Round *uint64 `form:"round,omitempty" json:"round,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Exclude Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
	Exclude *[]LookupAccountByIDParamsExclude `form:"exclude,omitempty" json:"exclude,omitempty"`
}

// LookupAccountByIDParamsExclude defines parameters for LookupAccountByID.
type LookupAccountByIDParamsExclude string

// LookupAccountAppLocalStatesParams defines parameters for LookupAccountAppLocalStates.
type LookupAccountAppLocalStatesParams struct {
	// ApplicationId Application ID
	ApplicationId *uint64 `form:"application-id,omitempty" json:"application-id,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// LookupAccountAssetsParams defines parameters for LookupAccountAssets.
type LookupAccountAssetsParams struct {
	// AssetId Asset ID
	AssetId *uint64 `form:"asset-id,omitempty" json:"asset-id,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// LookupAccountCreatedApplicationsParams defines parameters for LookupAccountCreatedApplications.
type LookupAccountCreatedApplicationsParams struct {
	// ApplicationId Application ID
	ApplicationId *uint64 `form:"application-id,omitempty" json:"application-id,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// LookupAccountCreatedAssetsParams defines parameters for LookupAccountCreatedAssets.
type LookupAccountCreatedAssetsParams struct {
	// AssetId Asset ID
	AssetId *uint64 `form:"asset-id,omitempty" json:"asset-id,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// LookupAccountTransactionsParams defines parameters for LookupAccountTransactions.
type LookupAccountTransactionsParams struct {
	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// NotePrefix Specifies a prefix which must be contained in the note field.
	NotePrefix *string                                `form:"note-prefix,omitempty" json:"note-prefix,omitempty"`
	TxType     *LookupAccountTransactionsParamsTxType `form:"tx-type,omitempty" json:"tx-type,omitempty"`

	// SigType SigType filters just results using the specified type of signature:
	// * sig - Standard
	// * msig - MultiSig
	// * lsig - LogicSig
	SigType *LookupAccountTransactionsParamsSigType `form:"sig-type,omitempty" json:"sig-type,omitempty"`

	// Txid Lookup the specific transaction by ID.
	Txid *string `form:"txid,omitempty" json:"txid,omitempty"`

	// Round Include results for the specified round.
	Round *uint64 `form:"round,omitempty" json:"round,omitempty"`

	// MinRound Include results at or after the specified min-round.
	MinRound *uint64 `form:"min-round,omitempty" json:"min-round,omitempty"`

	// MaxRound Include results at or before the specified max-round.
	MaxRound *uint64 `form:"max-round,omitempty" json:"max-round,omitempty"`

	// AssetId Asset ID
	AssetId *uint64 `form:"asset-id,omitempty" json:"asset-id,omitempty"`

	// BeforeTime Include results before the given time. Must be an RFC 3339 formatted string.
	BeforeTime *time.Time `form:"before-time,omitempty" json:"before-time,omitempty"`

	// AfterTime Include results after the given time. Must be an RFC 3339 formatted string.
	AfterTime *time.Time `form:"after-time,omitempty" json:"after-time,omitempty"`

	// CurrencyGreaterThan Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyGreaterThan *uint64 `form:"currency-greater-than,omitempty" json:"currency-greater-than,omitempty"`

	// CurrencyLessThan Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyLessThan *uint64 `form:"currency-less-than,omitempty" json:"currency-less-than,omitempty"`

	// RekeyTo Include results which include the rekey-to field.
	RekeyTo *bool `form:"rekey-to,omitempty" json:"rekey-to,omitempty"`
}

// LookupAccountTransactionsParamsTxType defines parameters for LookupAccountTransactions.
type LookupAccountTransactionsParamsTxType string

// LookupAccountTransactionsParamsSigType defines parameters for LookupAccountTransactions.
type LookupAccountTransactionsParamsSigType string

// SearchForApplicationsParams defines parameters for SearchForApplications.
type SearchForApplicationsParams struct {
	// ApplicationId Application ID
	ApplicationId *uint64 `form:"application-id,omitempty" json:"application-id,omitempty"`

	// Creator Filter just applications with the given creator address.
	Creator *string `form:"creator,omitempty" json:"creator,omitempty"`

	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// LookupApplicationByIDParams defines parameters for LookupApplicationByID.
type LookupApplicationByIDParams struct {
	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`
}

// LookupApplicationBoxByIDAndNameParams defines parameters for LookupApplicationBoxByIDAndName.
type LookupApplicationBoxByIDAndNameParams struct {
	// Name A box name in goal-arg form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.
	Name string `form:"name" json:"name"`
}

// SearchForApplicationBoxesParams defines parameters for SearchForApplicationBoxes.
type SearchForApplicationBoxesParams struct {
	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// LookupApplicationLogsByIDParams defines parameters for LookupApplicationLogsByID.
type LookupApplicationLogsByIDParams struct {
	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// Txid Lookup the specific transaction by ID.
	Txid *string `form:"txid,omitempty" json:"txid,omitempty"`

	// MinRound Include results at or after the specified min-round.
	MinRound *uint64 `form:"min-round,omitempty" json:"min-round,omitempty"`

	// MaxRound Include results at or before the specified max-round.
	MaxRound *uint64 `form:"max-round,omitempty" json:"max-round,omitempty"`

	// SenderAddress Only include transactions with this sender address.
	SenderAddress *string `form:"sender-address,omitempty" json:"sender-address,omitempty"`
}

// SearchForAssetsParams defines parameters for SearchForAssets.
type SearchForAssetsParams struct {
	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// Creator Filter just assets with the given creator address.
	Creator *string `form:"creator,omitempty" json:"creator,omitempty"`

	// Name Filter just assets with the given name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Unit Filter just assets with the given unit.
	Unit *string `form:"unit,omitempty" json:"unit,omitempty"`

	// AssetId Asset ID
	AssetId *uint64 `form:"asset-id,omitempty" json:"asset-id,omitempty"`
}

// LookupAssetByIDParams defines parameters for LookupAssetByID.
type LookupAssetByIDParams struct {
	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`
}

// LookupAssetBalancesParams defines parameters for LookupAssetBalances.
type LookupAssetBalancesParams struct {
	// IncludeAll Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
	IncludeAll *bool `form:"include-all,omitempty" json:"include-all,omitempty"`

	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// CurrencyGreaterThan Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyGreaterThan *uint64 `form:"currency-greater-than,omitempty" json:"currency-greater-than,omitempty"`

	// CurrencyLessThan Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyLessThan *uint64 `form:"currency-less-than,omitempty" json:"currency-less-than,omitempty"`
}

// LookupAssetTransactionsParams defines parameters for LookupAssetTransactions.
type LookupAssetTransactionsParams struct {
	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// NotePrefix Specifies a prefix which must be contained in the note field.
	NotePrefix *string                              `form:"note-prefix,omitempty" json:"note-prefix,omitempty"`
	TxType     *LookupAssetTransactionsParamsTxType `form:"tx-type,omitempty" json:"tx-type,omitempty"`

	// SigType SigType filters just results using the specified type of signature:
	// * sig - Standard
	// * msig - MultiSig
	// * lsig - LogicSig
	SigType *LookupAssetTransactionsParamsSigType `form:"sig-type,omitempty" json:"sig-type,omitempty"`

	// Txid Lookup the specific transaction by ID.
	Txid *string `form:"txid,omitempty" json:"txid,omitempty"`

	// Round Include results for the specified round.
	Round *uint64 `form:"round,omitempty" json:"round,omitempty"`

	// MinRound Include results at or after the specified min-round.
	MinRound *uint64 `form:"min-round,omitempty" json:"min-round,omitempty"`

	// MaxRound Include results at or before the specified max-round.
	MaxRound *uint64 `form:"max-round,omitempty" json:"max-round,omitempty"`

	// BeforeTime Include results before the given time. Must be an RFC 3339 formatted string.
	BeforeTime *time.Time `form:"before-time,omitempty" json:"before-time,omitempty"`

	// AfterTime Include results after the given time. Must be an RFC 3339 formatted string.
	AfterTime *time.Time `form:"after-time,omitempty" json:"after-time,omitempty"`

	// CurrencyGreaterThan Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyGreaterThan *uint64 `form:"currency-greater-than,omitempty" json:"currency-greater-than,omitempty"`

	// CurrencyLessThan Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyLessThan *uint64 `form:"currency-less-than,omitempty" json:"currency-less-than,omitempty"`

	// Address Only include transactions with this address in one of the transaction fields.
	Address *string `form:"address,omitempty" json:"address,omitempty"`

	// AddressRole Combine with the address parameter to define what type of address to search for.
	AddressRole *LookupAssetTransactionsParamsAddressRole `form:"address-role,omitempty" json:"address-role,omitempty"`

	// ExcludeCloseTo Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
	ExcludeCloseTo *bool `form:"exclude-close-to,omitempty" json:"exclude-close-to,omitempty"`

	// RekeyTo Include results which include the rekey-to field.
	RekeyTo *bool `form:"rekey-to,omitempty" json:"rekey-to,omitempty"`
}

// LookupAssetTransactionsParamsTxType defines parameters for LookupAssetTransactions.
type LookupAssetTransactionsParamsTxType string

// LookupAssetTransactionsParamsSigType defines parameters for LookupAssetTransactions.
type LookupAssetTransactionsParamsSigType string

// LookupAssetTransactionsParamsAddressRole defines parameters for LookupAssetTransactions.
type LookupAssetTransactionsParamsAddressRole string

// LookupBlockParams defines parameters for LookupBlock.
type LookupBlockParams struct {
	// HeaderOnly Header only flag. When this is set to true, returned block does not contain the transactions
	HeaderOnly *bool `form:"header-only,omitempty" json:"header-only,omitempty"`
}

// SearchForTransactionsParams defines parameters for SearchForTransactions.
type SearchForTransactionsParams struct {
	// Limit Maximum number of results to return. There could be additional pages even if the limit is not reached.
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Next The next page of results. Use the next token provided by the previous results.
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// NotePrefix Specifies a prefix which must be contained in the note field.
	NotePrefix *string                            `form:"note-prefix,omitempty" json:"note-prefix,omitempty"`
	TxType     *SearchForTransactionsParamsTxType `form:"tx-type,omitempty" json:"tx-type,omitempty"`

	// SigType SigType filters just results using the specified type of signature:
	// * sig - Standard
	// * msig - MultiSig
	// * lsig - LogicSig
	SigType *SearchForTransactionsParamsSigType `form:"sig-type,omitempty" json:"sig-type,omitempty"`

	// Txid Lookup the specific transaction by ID.
	Txid *string `form:"txid,omitempty" json:"txid,omitempty"`

	// Round Include results for the specified round.
	Round *uint64 `form:"round,omitempty" json:"round,omitempty"`

	// MinRound Include results at or after the specified min-round.
	MinRound *uint64 `form:"min-round,omitempty" json:"min-round,omitempty"`

	// MaxRound Include results at or before the specified max-round.
	MaxRound *uint64 `form:"max-round,omitempty" json:"max-round,omitempty"`

	// AssetId Asset ID
	AssetId *uint64 `form:"asset-id,omitempty" json:"asset-id,omitempty"`

	// BeforeTime Include results before the given time. Must be an RFC 3339 formatted string.
	BeforeTime *time.Time `form:"before-time,omitempty" json:"before-time,omitempty"`

	// AfterTime Include results after the given time. Must be an RFC 3339 formatted string.
	AfterTime *time.Time `form:"after-time,omitempty" json:"after-time,omitempty"`

	// CurrencyGreaterThan Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyGreaterThan *uint64 `form:"currency-greater-than,omitempty" json:"currency-greater-than,omitempty"`

	// CurrencyLessThan Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
	CurrencyLessThan *uint64 `form:"currency-less-than,omitempty" json:"currency-less-than,omitempty"`

	// Address Only include transactions with this address in one of the transaction fields.
	Address *string `form:"address,omitempty" json:"address,omitempty"`

	// AddressRole Combine with the address parameter to define what type of address to search for.
	AddressRole *SearchForTransactionsParamsAddressRole `form:"address-role,omitempty" json:"address-role,omitempty"`

	// ExcludeCloseTo Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
	ExcludeCloseTo *bool `form:"exclude-close-to,omitempty" json:"exclude-close-to,omitempty"`

	// RekeyTo Include results which include the rekey-to field.
	RekeyTo *bool `form:"rekey-to,omitempty" json:"rekey-to,omitempty"`

	// ApplicationId Application ID
	ApplicationId *uint64 `form:"application-id,omitempty" json:"application-id,omitempty"`
}

// SearchForTransactionsParamsTxType defines parameters for SearchForTransactions.
type SearchForTransactionsParamsTxType string

// SearchForTransactionsParamsSigType defines parameters for SearchForTransactions.
type SearchForTransactionsParamsSigType string

// SearchForTransactionsParamsAddressRole defines parameters for SearchForTransactions.
type SearchForTransactionsParamsAddressRole string
