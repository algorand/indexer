// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KqD88IsbOfrFUdDtz7f/HQAA//8ob4IX2/oAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
