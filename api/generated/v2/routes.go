// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"limit":          true,
		"next":           true,
		"txid":           true,
		"min-round":      true,
		"max-round":      true,
		"sender-address": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------
	if paramValue := ctx.QueryParam("sender-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
