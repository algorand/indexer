// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplication(ctx echo.Context, applicationId uint64, params LookupApplicationParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"round":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplication converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplication(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplication(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplication, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
