// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
