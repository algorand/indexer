// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplication(ctx echo.Context, applicationId uint64, params LookupApplicationParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"round":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplication converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplication(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplication(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplication, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
