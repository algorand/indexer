// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
