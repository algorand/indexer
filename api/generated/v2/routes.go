// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransactions(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransactions(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e2/cOLIo/lWI/h1gkv1125lk5wATYHGQTTbYYDOzQZyZBW6ci8OWqrs5lkgtSdnu",
	"yfV3v2AVKVESpe62HSdzT/+VuMVnsV6sFz/PMlVWSoK0Zvb886zimpdgQeNfPMtULe1C5O6vHEymRWWF",
	"krPn4RszVgu5ns1nwv1acbuZzWeSl9C2cf3nMw3/roWGfPbc6hrmM5NtoORuYLutXGs/0s3NfMbzXIMx",
	"w1n/KYstEzIr6hyY1VwanrlPhl0Ju2F2IwzznZmQTElgasXsptOYrQQUuTkJi/53DXobrdpPPr7E+ex6",
	"wYu10lzmi5XSJbez57MXvt/Nzs9+hoVWBQz3+FKVSyEh7AiaDTWHw6xiOayw0YZb5lbn9hkaWsUMcJ1t",
	"2ErpHdukRcR7BVmXs+cfZwZkDhpPLgNxif9daYDfYWG5XoOdfZqnzm5lQS+sKBNbe+NPToOpC2sYtsU9",
	"rsUlSOZ6nbCfamPZEhiX7P3rl+zZs2c/MgKjhdwj3Oiu2tnjPTWnkHML4fM+h/r+9Uuc/8xvcN9WvKoK",
	"kXG37yT5vGi/szevxjbTHSSBkEJaWIMmwBsDaVp94b5MTBM67pqgtpuFQ5vxg/UUb1im5Eqsaw25w8ba",
	"ANGmqUDmQq7ZBWxHj7CZ5stR4BJWSsOeWEqN7xVN4/m/Kp5mtdYgs+1irYEj6Wy4HILkvQeF2ai6yNmG",
	"X+K+eYkywPdlri+d8yUvagcikWn1olgrw7iHYA4rXheWhYlZLQvHs9xoHg+ZMKzS6lLkkM8dG7/aiGzD",
	"Mm5oCGzHrkRROPDXBvIxMKd3twPNm05uXbeCB27o2wVGu68dkIBrJIRFVigDC6t2yKogfrjMWSxdWsFl",
	"DpNc7MMGGE7uPpDURthJh9BFsWUWzzVn3DDOgpyaM7FiW1WzKzycQlxgf78bB7WSOaDh4XSEqtNMxsA3",
	"AEYCeEulCuASgVeIUtghxH7i16KsSybrcgna7T2wGauYBltrObYCGnHHmZX8eqFVLfM9pK9lSsfczVSQ",
	"iZWAnDWjjK2lnWbXeoQ8bD2tThAtJwwyupxmlh3LkXCdOBSHZ+4Lq/gaojM5Yb94MsOvVl2AbKiRLbf4",
	"qdJwKVRtmk4ja8Spp/VeqSwsKg0rcT1c5JkHh0N1auN5QekFUaak5UJC7tgELlpZILIZXVM04aHSdskN",
	"/Oefx0RN+1XDBWyT3KOPALSdRr3fuC/Ud3oXzQw7SHJPPFypPv5N4t5eeIeNFkT0CXHivnqWkL5Kdfrv",
	"cZmK5zZivaCfBygl1h8cB16JArnzbw6TAhhq4xS1LiACvzZiLbmtNTw/l39yf7EFO7Nc5lzn7peSfvqp",
	"Lqw4E2v3U0E/vVVrkZ2J9Qgwm7UmbyTYraR/3HjpG4i9brabmiJ8Ts1QcdfwArYa3Bw8W+E/1yuEOl/p",
	"32ek24/NnFK/3yp1UVcxJLPOdXS5ZW9ejWEXDjnFNZDCTKWkAbwwvyAV/L3/zf3kGANI5HvRleL0N6NQ",
	"tWnHrrSqQFsB8fXf/fc/NKxmz2f/32lrLjilbubUT9hqk3aM4ROac+sJnQjckz5ox8DKqrakwaRoqEH6",
	"j83a+nO2x6KWv0FmCUDdZTyCsrLbx27Bfu3m/qCF/xcWSnMA3PySudZ8+4XhSCJwgaJsOPIvBnLkfxVf",
	"C4kbn7OrDUhW8gvHDrhUdgOaubMAY4MwJF2K5GNjt/AS1etXJ7MUxSTO1Nz5UNtTu49zbdvuPNGo6YNS",
	"w32By9wvvA6ghS7kjvSA9BBD8q404a6Jf+UFlxncxykv/VB7n/BPQgpcxN9VkXvjw/GY3TE3oLyPI74P",
	"Anbj7CRYbPSwIh+nvA8gmfuC0gEMLsDriPPNWd4Z4/9aqOziVmc5dVQ46o6Z/w68sJuXG/gC80dj71jF",
	"h/YScQ8Y/UUxMbrv7Np/tKsdik532AORJ5rGfOvQ+3bouAPy/dlf50z7THD/MzaHHfJNuDfHF+OEe8y7",
	"soUk65W7k3PLuPf2kPHnXJ7LV7ASUrjvz89lzi0/XXIjMnNaG9BeuTpZK/ac+SFfccvP5Wzelx1j7m00",
	"6PvVVPWyEBm7gG3qFMjTMBzh/PwjL9bq/PwTs8ryIrIzR/4Hbx9sL9FDlKMJFg4zVG0X3m+30HDFdZ5Y",
	"ummskzgyOUKmZp0zPzYZUb1f0I+fJgNeVWZRqIwXC2O5hfT2q6pw24+1Z4admDsyZqzSwUQqTFgNnu/P",
	"ynqzI79ihF+sNmDYf5e8+iik/cQW5/WTJ8+Avaiqt27MM7eO//YmQ0dP24o8CAfeetrBUkoCbhzPc7Gf",
	"DIlGxkHPqFfwEps05NwnBB22YRsovJH7DnCKVP5bg2nHtWHCL31+/hFdzkgPUSgFX3MhTeDGRqylQz7v",
	"zVsCy5z0hfyEvVkx5CbzTncfU+I5VUOywpADjn1we0STNcu4RMdclaOjSkjG5bZv/jNgbTC2vocL2H6I",
	"LN4Her7RP+VIlu8QRnntBmwEUnPGObvihtxuKXGUXkAtpCVzf0YuuYXD2TECrdx5RF5BteqSqx+jj3ze",
	"NYBCrarYulBLT9UNWj5v8DL0GSfgd24B5h6IN6nXBzBM0FvFdQIQRHwjILjFRt14dyK9ye3dEsksIRmN",
	"cgssq7i2IhPVfnY5mvJdp48bZJdQS4oxtepLq4EwSUovarxYcpMWXOC+OHxwPIRxdE3bwGrCTKQn4g5O",
	"GEbDecJZFujkbgJwCOJco/c9bJsCUsaWlsZS0LLVJsIyuhCJ1ZYNN8ERj/EKgWD3EvAjqPTBAQDRyWFx",
	"hEuxxibcvAVc8jH4j7vB3sjcUTKYblBC4+QKjL1PjPPG9UqBhsEZFjxgwe01mx/kwprPnHZTp49DSdRu",
	"cihgTRunxgFR/NK+M9EBuXX8c7UqhAS2YKLZrcXdUhCJygRFUrSyzM8BTvn9E3PY5gbYe4QUGkfLrpQq",
	"aGD2s4ppU64PWaQEgbcbHsZWmkkV/Q17WCOaiE+vVu9Uf4e8oyWieesRpmMc3lkax9O7PhtL3kw6rRg1",
	"WXpNOxIeKRR1rClzV1tpagwksipTxcngSmKgAFRHFh3OunDXj6RWBYiGZ6FbdF1hj8TKKTmPg35UbJmG",
	"tTAWtL+q4gobp3obM7C14FbGrQXtJvrfj/7r+ccXi//FF78/Wfz4/59++vznm8d/Gvz49OYvf/k/3Z+e",
	"3fzl8X/9R+rmdKksLFZCG7u45EXKX3t+/tE1em1QGX7tmqbZTwdUjCK9xMgVHqe9gO0iF0WdPm0/7z9e",
	"uWl/bu5tpl5ewBaFDPBsw5bcZhuUQp3pXZuJqQu+c8NvacNv+b3tdz9cck3dxFop25vjD4JVPX4yRUwJ",
	"BEwhx/DURkE6wV7w7vcKCsunI5DxNu0YpuUnU9aKATHlYewp9StaxTjnpZGSe+k6YMd3IWQO1xh9KGwU",
	"2GcGO9pXeUUrGnHTaJq7Ka45GKvV9k6zN2PcYv4R+udVJfLrnt2EIJqmbwTvIZckum0NMAAx2w+24/Qj",
	"G8kwkskqDcHOQ+gc6QsUnirjvQ3xfO+L8wRa4KWZqdqylVZlrJDd01E5Vbgza8ud470LE1I/hifn+AyG",
	"JO802gIv/gHbX11bhK/rrSor5CEg8nqIqsj8YRVBpXsSB0LmbkawFAb6EXdg4LsG6ZPYhxkCZJTo2JIP",
	"REReVVpd8mJRabXWvBwjWK0uPcFic+abP7DwS5/Vh7+9ePvOLx+NUsA1GW0nd4Xtqj/MrpwUUHqESkNI",
	"u7u/BGtOn2t4U6EwHfPi1QZ8RHak3Tu55pGLaLxReWJ+4M2Nq6AFHWg8pAla6/rB7CEe4M626sjUv7hX",
	"kh9QWBpDd3CDeIaJaO2SIv4NUz4qu9HsUZ1HawMiScm37uzIQTFkC7IuFw7xF6YQWdqEJJfG0Y6sSze8",
	"a8yw8cjFwI3omGp6rFpEY7lmZo8gjd4iozmSwAyhJmOwWyrvmKyl+HcNTOQgrfukkR56JOIoIqTO3Frp",
	"S1gsKcXmgdS+qfnvpPg5XW44qQcszdGC9y46nxtqTNvDRUwrfLG3Z7DcV43xIxx046ZyP0RG8gOctfGM",
	"A2E84Wj19OGpuZbCO81ucTq7kzeDCW1DC01T9F2cPwRMGv0eXEApufhiXCa62Q+Qhq3ww2XHYm9OCWiF",
	"UYlhannFJWWMuX50Zr63AbKXuV5XShuLWXbJIAhhFiutfoe0FWflEONqA2iYRHukjY8OtXPsHY3d5Kns",
	"q2Lvc4JB6T74DPvysjGLtqnC4ZBjYIzS85jiHH1k3QiCEbaOpB35zvCiESzMXBItv8Tk49jJOsIR4tCS",
	"Uxq/5Qh+zcNrIr9a8uwirb+6Nb1ovcQdW7hVLHQOp+TN9i0BRA7npq0wiEEV6FLYrvhpMfK2uugfi+5y",
	"yETJi7RrJEfof+ioWLlYC8qtrA1EuYV+IFYpIS1hUS5MVfAt+eFb0LxZsSfzKNXWn0YuLoURywKwxffU",
	"YskNqiqNv6Pp4rYH0m4MNn+6R/NNLXMNud0YAqxRrLkv4PW9cT4twV4BSPYE233/I3uEbjcjLuGxg6JX",
	"QGfPv/8R8zHpjycp+eETkqeYW47c7V+eu6XxGP2ONIaTzH7UNLejkhLjfHSCmqjrPrSELT3r3U1LJZd8",
	"DelwknLHmqgvniZa7XtwkTmlQKMex4RNzw+WO/602HCzSasetAyWqbIUtnQEZBUzqnT41Kbr0aRhOMqn",
	"Jl7frCt8RB9nxdLmmYf10FDmW2rX6In+mZfQBeucccNM7dbcpuV6hpgEsAYD+jI9iR454CBXfV/2SCq5",
	"KB3t5I89P+viXzJ4UlleJKe1gXf1w/amh95XJXOjLEYBW3cAyyOedGsQ1zq9T167qX55/9YLhlJp6FrL",
	"liEmsCNiNFgt4DJJsf0A0kYzacRFgHxKQaF478Fa8ed4ZWO3CqUuLgAqIdenS9eHVAgata88rEGCEWac",
	"sNcbBx732ZFipNzh0GwJhZJr8/A0GRY+4j5YA2LQm1e7Vj0YOGTPL7DpOGBcOzfFu5BtT0O79g8PjShe",
	"ZmcmwXvfdjy8xTEdClF86QMKyfvaNe/Tfp1Wz6sKZE7iBslww5Mq/s18ZgDyEf894IxnSltBPkCAr+CN",
	"t6IEY3lZpZkimrOIEpGq3UKbLk5LMpApmRtmhMyAQaXMZlf+QVp5tNcSJyuEIdYXFxfLlKYca5QAVvVi",
	"w/eNppuMgu+ucaGVsmMLRVERpy8oZRmv7QakbaJmAGuc9HficIfjxdEr3MSy2E+ODYfsdF4U2zkT9jsa",
	"B/3yKBdK0BcFMKsB2NVGGWAF8EtoC9rgaN8Z9uFa5AbL1RRwLTK11rzaiIwpnYM+Ya99hQXUzqiTn+/J",
	"CfPRxT7q58O1xO3lCkh1i/dJ2wxhWo2FNd7xnClZbAc/YxUYA8UlmBP24UrRIkybCWGcMOz0WNZ4S+Es",
	"F6sVIJ3idlCpw37th2hNWJoHCwQ1w/o9fQVqu5YL1GZGlFtLN6hr+ZIaMR9M2DVb90ijJE06IFQB+Rr0",
	"vHWAOnptM1+cDqG0bS+SK6AYO8fZhLRa5XUGlG9x1sHHaFlisKSmREsUWI04FCojtesMl8DAU91FAS9d",
	"T+geKFV3h3h2cAmaLd0tqx3oETGdaF3Gco1Bu4Dh5LRVyB+nmXNdrTXPYT9vCzLBX6hHkycQRrhUhw3w",
	"q2vfV5s6uklH4qeldBTn5qRMzMtTvGxU9Xo/Fnz6mgo+aSgoKhALJGHb+UCxWgEsjJBpq8wKAHk7zzKo",
	"HDrHtSABHKMiPRNZBSYMBNnqTlhacQkUrzihDCwyXmR1QXE5E5L+KuOF7lqOC1hZ5RAsLhHWmiqEm2uJ",
	"cUFUm4jm044BRj0cRTk03foWpMWHUkCOOHTPKziMAF4UcAlpxR04BQL/XV25S+62OQs3RbuMOdELkkqz",
	"ctJV0N1Fp/2Lv2BEyydi8lg3vUh3FCPAzeNzrkALlYuMCfkbeGpu2FLAGGTfmZJWyBprimlo101ygmFM",
	"cz9ueYgBeiwnyX3oBvVJuOqcdh7pc90QOGP5BdCyQ/S1F437nqkGI/J6xMSiedZd2WHI6In3Pbdwqpuj",
	"NfeElz0O1RD5FNH1cbmHNr3TGkJplE91mO8+zIo38bbMM+pE0JFPdgwtR+4+yqpgHwhJR83Yl6BNN4wm",
	"MqXA9Y6xXYvO+JQCqlWFoUyHz7IIznUzOt+W2HGLc0H5opwF7A/eu5uA4Eh+bLMAcyVstlmMhNi6ttTC",
	"reF9/6Y1nJJUCKRCWK0gs/usAWM1qbTe6Cros1vFK+A5Bte3YbcUcNtfyqOfFXNDm0ivkUagFtqqNTjK",
	"4wPqxjQYsgv5f1V74v6lwv+h62YPMgiKjD/7tJGK2njkaXM2ONuCQag0ldsiGqmU4UXa8hwmzaHg26kp",
	"sUF30kaxDcZ3kjncyTAnUOAasnokui2a2tPZ1OSuSX/DDXkOqSKuRtY/yb9prXSc695zxkkGrgUL9cTo",
	"VqPwe0ifbdISuwfovkURwu2cJRjD15CudxjjYmiYQsG/XfJiJIz5PVQajNN0GWcf/vbirXeOjAUzZ6Ox",
	"99z6xBrLmfcaJs/O3dTSvI2ib/C7L/qatIyORdxQwI37POh9O6/tWF2ECKAhgGu4oH+EMFFWceE9f20k",
	"9xCyPrp/mG+xT6hpe8D9TfiYeRwktZO4WsYQo9kGP1M+b4PXB6BvvlzwSy4KviwgVVUSvd+lWGvkfOkW",
	"4yQQmQR3cOrOOnqTtjOE8VKAGhRgSkDLiLIqyHXk5b2TznEvdlB6QBs8c2iwUhxfkarkOZ29NR2R8E/5",
	"UpVVAeOcoCJPE1UqJmaPmYE8z4VnhsE6oLKs1q3ZqB9z8CsvBJXNNJgdKJWq3L8Y4+H+EyJ26P/AtfsP",
	"ZYt3/5dDAaiwhlRCN9TMR4vM2tCfEMs4c1ImJx3X902lGt4yRWQve+eQyySsnpNRlB3ujidTkJW2jQxl",
	"StOXNX6JA1AZLQT9nib8ZVgOFnTp1K2Nu8vW2QZjLvkaQggmOnPR1tebqDN6iEvphvN6l5apeEYDka+/",
	"4HoNmnn3O/NFvxoffslFr3hv3++Ity+e4ry7AkOHJadRTkbhoYn407CMC9iekhjA32/hehyPMh1ZGMaa",
	"fsEl3SlkNY563oGvFx0JSqUfOsHazfLvUZK69XlaO1CSDuO5990e7gPJoTYw3Of+/pEYtglW0e5tXzVw",
	"CNxx7c0u99He0hnkrjuqjwSQUGMhofg/lPJH+/Rj+HmTp94tzNUv749MyTBeFKH+fqbKUkm0b7hrcce5",
	"JHOGwREGC/JLBvISClVBsjUCaY+4PCPWEnJ7LcmxfoZ/friWqbax+MXW0fZShZiiB1ZuV6GsVwWE4iPp",
	"8ZPbjthGMLYjhnd3bj/iawqzakbEoVag7zLmBz/GHkV41lIHA1MIDAwRU+58B7pTE5FYh/JmWOS9zf3H",
	"mL5QJaB1F9KjRc0cucjRaZic45a1dRZT1TI0WlMbQ62Pl8HIT+rqBH3uwK6mq4W49kKuFxPx5xkGoPuG",
	"oeQWmkCSm4wHd+ilS8j3yuLrPp6FkeGh/8jwbQmg9v2idPpB9KiBHKaeskdvXj1mmPg9loIbPfy1e9tx",
	"TZ79VkQBmYO19DNCDlnFCmDMS9Vz7LMVjIiRXfULVpdt6QJs1bcs7lzlnpFKf+cGaxH45t6j+o2GJ3UW",
	"6WvuD4eKM9gOzm+fz9Za1eloljVlNv4VX8ZgIDNFr4hYYKjiUIyF2fAfvn96+vSH/2S5WIOxJ+xfGORO",
	"+s2wMkr3NJloK67wzgdcWJM2RYqKd6RHc278gQ4CJoR3qOMwD3/CyWToaHf4utmwl7SaE5NbqNUqmW32",
	"T/y9TU3WgfdpGEJ3D+5Hr0fcUq7+g56euJnPdhTsKC6bWh23I/ACxgpRFdcJNH32dNFi6gl763ozkCul",
	"3f2xrG3NC3piKZiNYuyhYGzblsXDOGz5O2iF12PJlLsN92WNiICNTnqeoYZrfKSJW0OTs9aEpT46QyVg",
	"Tot8TLevxDOQtbSiwF8dGH+NoFg5Bu8W/a+NKBJYUCn33cTrmDOpGBVajVtSSFWbVEBr9jGtHUR6WHKK",
	"U2vztPXHYQK6099GhQXau3e24XIN7Ws5sXym+BfygUQ1iXo4ecgrGV0e278YSjXieJe+tIzTfjHyvTGh",
	"PCy4K74tQdpbMoV31Jt8+vTG2bQSqkeU0NB7V6G6sQeb3NjuY5N55d9q8sYyYkTRHuexJctg6B6q5u17",
	"db4sZqs+EXI5KbWqMS4sCqULxjK6EbZG1wvYMh0MAHENLNLcb6Hok8RIPw/5QZTQqsakS6SksNhLWvhX",
	"VpOXJgoKJm723cR2mmGmscKMYEW4M03hRHMKB6DtWdOn+yjT0HSyraDr4uzU4evG9OG18IS9amIt0bhO",
	"UUdtAKZ/4rdngqdMqiaxTej4UUEyMqKV/vz8Y0Ue3wTh+gYk5l2bocD3TXi2Wjf1dBNWgdDsegW6bZe6",
	"mYeWK/1723BoFAjNhiWQO5xnfh/vXaVpyB/zAidIxO/MuneXOVVf6ZS5at4dbnGuRZ8dJqzJWlE+TAHN",
	"9pGw6ugp++SJRpZNyhZtf3jJi+LDtaSZEs7n9omolNOJyq/5APSGazrW6v1OIULMU2xsIudZ5jSSPCo8",
	"1C7rO8P6JS8o7G1Y9KIjmA/kmomy1Q3+cb0e3TfaMYZak8gY1+u6JKvul9/fjh2MVs4Suc99CVmcA00o",
	"eg1ZaR/1LlY+pWEsl3/PMkC8Ih1tLbJW42pj7kYwfe50dah86quSi6xxiTrZhc+jKnZOrsTz2Ql7QxGy",
	"GnhOTFQLC6mCNJ39Y9rYFRQFGoT9c/DN6UYVq04cFXUK/hjEbA1YXTxhuvujljjilalHTmyMK/k4nM4h",
	"fYUTeulm8iM1h5RxKZX9A53TSmkQazlVn3zFAyM2fXAl2XGXS/jMmBjwZsClGxX1dkyMDOk4GBU+5vlC",
	"yWKb4m5xFlSPvTWwmCxS3uRFmTYt0/hdRqUB9ttiIPN30Q4RsfCG9+5+93eLalR3LkHVG6BDtbv6diJT",
	"Jp6Do6SM7tC7NKPIrTSpGVGeeuE2TvxBwyLIr8AxZE4p7HUb6HIuX7DfQSt/gWuGwifM29BFSun1qXwn",
	"iU5NvQkz6Naf8sB6HrT5Ce1stATP+fnHaz6Q8rimO8j321VT2nnGr0fqKcRnHDwYvoDCHQul0IwTgB17",
	"7ub8/OOK53kv4T4OfiEm05TFIGj7whKILPxqpIbD5GmuJk9zYvxOvPdVuIFNlGsPNzaKrL8KEKceqbDk",
	"8eC2tvTOcOp9iL/x1u6FGuEWelfkCLNOoMdEhS1e4p3oRfMOg1+catZ3wjwL8f7P8LsOto1iFbhZcJkE",
	"p16vXj49DchKXt1r/a6dzCNa8URRr1FHcJtF4QVzGC9KEMcBWo9zvyr/tK9gZ7UvP3r6BPFrP3aexwUe",
	"2ld3NJSY+NGvnds5HF8Np/HStmWKyLmOvvC4EpaJZohhzdgbNzIvrvjWBNtli1jjwwWoUpmJhN0szgwj",
	"g2saNjpDJ857yEQl8CGhLhdscHzc4jfykBNZDh3ToZQVcdkYDXzdMN7Wl+o6aoKfxlfK4ZGAnnsw86J7",
	"W6eBg3XWtXkZxg47ao40kmd7PMyQqDvWgHQHz/OetElm5013h/I46kVMjqYZ526yXwV+xE8hXSN3aD9x",
	"fdGRgdx0n3ChinKdUTsqRhR5fotXHbx1/11beB8jcBpb+6+gydn2nstclex1LQkLHv36/vVj/6hhQLKQ",
	"K+2Qz6/kG37wYTV88CHx7IEDyX099XCRf6WnHorBUw+33+n+jzwE3Bp74iGEXZM/Zy2M1QkT7cO/7TDF",
	"ZoJvbprPeDfCoYzGdyNO42e6nSJFetTIY5C2KSfTE5F3Ukc6D0RxS++cGl+qrFVLuiFxbdFA2US2xXF9",
	"u0LmuuON1Bj3GglOgrWtEq8NGf9eVeDC0duAVOSfih0WkZqwqmVueiCkvYpp592kluCVhNBm0g84Jj73",
	"lZlnsZevuxL0ovmw9eZdrH5leyxAR6Xm8G0yeharX6WlBaV/ijaRT1iotcgM2SoOdTe+DX1v5rOyLqy4",
	"5Tg/hb7k/0xLTIEevjPLZc51ziB/+sMP3//YbvcbY1dDICXjPvy2vDmOW5F1Nb5md3swsXCUJ2s1ZFmj",
	"XiG9bo3kjRdojiUz26ikw5w5uJD0fqPNhuiC5ZbxCNWVU3ALK9qf5u63DTeblnV2nwjlkjPPr/rRVJih",
	"8HVeNoiIYnEnr36PPMYYR0sk3wJtxOyR8GFflvhTxEmGVUH9FslA6fAlpG0hrKsCnG7X8sAh3WR6W1l1",
	"Go6GRH6Y80wMC5PH46Whjg2wnKBymgil8TplstW48CrdruoWhcwG8DmL15WqcrbRYNyK0qEgG31+/imt",
	"bFJGalq7THe6OfBsz3ow7UKc4Daq4VYXtIiHpeUdOPDwS7pJvtAu5EqF1/V5hnojVSOdvfCmpZmvGTrb",
	"WFuZ56enV1dXJ8HudJKp8nSNQfsLq+pscxoGGrz+HsbzhcgcFy62VmSGvXj3BnUmYQugVz/hGu1bDWbN",
	"np48oQrsIHklZs9nz06enHxPENsgEpxSRvns+eeb+ez08ulpHNSxTr5mAVxnG7oI+LYnmLcLdLt5kzeN",
	"Xiv9IgznHQT0gtnzj2PPAjiSdX//uwa9nYXiubHBpHVbDcljd0YmXegNRQ/aWlPkZmLGQpTCHjhdW2+G",
	"ryGa7YT9YiAq6qYuMACelMUQ5htqkjWdRhbmhkitq0XYYTIh7dkrqhhaxmWwMK8x5QOdAzKKWTzpFEzy",
	"Jklf+doXJMm2rJYFvj8uI++YabaGtbSoEk3GPQR8rkkImPQvMqQ2GiZZ+BUu3AoPPJHprRe+iPw3um83",
	"xW02/YaiWNuQq8if5yvH435NeMT4ArZji2nz4MZRbmcg1fTnseUHUg1u1LYOOBXYwrKbFWgcUmZoyTVY",
	"IjMYf4jdBE9+LgxfFoDlkfBm13EDj9JbUxXwgBOIKw2M87S+A3xihk9Y5BurfSBnfvrkSRA/3loTjXb6",
	"myG9oh1wPHDvkKj15MvpvubSZOZdUy6TDO50rmhAoQfAx52S13aB7HI48i8hk7LiayG9Kx9tICW/QFOH",
	"pPwFpyODsYE6fXAz8uDGDOy5tseYPUwRrVjrAuBTUl3orvwRetQfk27B3Y3x48ygwJx9uumJ4dPPIYhJ",
	"5DejMvmtUhd1FT2S3Fb5HohmautP9K9bRM9J0dyYjAK1IzI7DSLC5WaRsxhQVtdwkKjal/ZvT6tfhJIO",
	"oJ8vSC9pHL03FC0QcXag6Gm/MvU++Nq3h08gbFwnehfiHrW/XgKwm2Ulrj1uBQdnpnqlWiTWnguF0ZKr",
	"QEcJDnawXkAmrzG1oPn6OTlxiJuPJ72H4P8U2MT6w7ZycCgwHPA3B62AP3VryG8YU0jvaG6wmHphxJot",
	"Gnuq+6Wkn/COfibW7qeCfkLrINlGUns3Yj2+eYPdSvrHjbfXJj0dRhvpGkaXW59WnD6LtNbyNbn7zim5",
	"ZUpHBWDbqUvhS66OTd80uJclULXM/hr49Y41hAaHKqRf5Hrd31m0J3pPwIrSXag8o+GSvX/9kj179uxH",
	"/2yPhdyrFWMbpiEpdS1eXMMwcm6bz/uwn/evX+ICzhqT016tdh5qg1H3tXMc8dvb+NGY8D/LmPA1tX/a",
	"tU/K9bow5fJOqydNxm9i9jYy9X5vAv9D7sHDp2fu/lTMSBXnIOc6E97b5SXKgdnL1B23H7d2d1tNW7zv",
	"20Z0tH6v7/9+30OT/axl3SJqR4tZL93nC1rNoklOP3eJZ7f1rFviMWmEaJukLWcp4dgn4Z0C8osZq7rZ",
	"5Aeg8MMZrb6QqapJCNzJ57HllEOThjqanvbQ516j7YRMJyHNMvAPuiY1SQdtDGBSi22ewLzX2d3oo7vl",
	"vYvXPcxXS3ohNzWf+3bYfPdyp79nDtPQ2X6C0jU/ishGRAbW8oWEIw5/+jkgxm6B6BPLdjuTXMP9BWKc",
	"/PK1RKHxtfP2Qs8H9NnglHfCgPnsz0/+fBBoJmved95Yubm52S1mIww79XXhd3qCsO5cv1LM1UZhrF/8",
	"4vgkBobJjsL52zTGH22H/6/bDr9Rdh+zob00k8HrMkclJRTib5nsl7yrxULkkJCCTp2huALApO5yjCo4",
	"RhUcowqOUQXHqIKj///o/z/6/4/+//Y5AVlsWxf8oIpjnAzuFhqlSHeepaf6xWOo3lSFeqAUg5eqXAoJ",
	"rRYcdtAmDVjl30vsFm8ODbEWU/Aa7NjXQqtiRL6G2sBNRvt8Fsogc+303H3kbWc3YYGYzx/NH5c2PGhv",
	"9Ep3oQw+exUVmJYOzkWxZdY/GsOdMhh2MmdixbaqZldILIW4wP74pAIFc5RU9LObq4EVi+pRq7zvvmiK",
	"NE1GeNznhfQYrHIMVvlawSr0nvzpZyrjTxfPndb75umi1K0XH0HfddMlNKDp0oFf8YIe1r4zdX60uVvC",
	"ei9jQ+Qwns5daNzGRwvD0cJwtDAcLQxHC8Mxb+FotzjaLY52i6Pd4mi3ONotxuwWX9PW8EcrZ3G0Znx7",
	"1oz57Id7vNFPRqH14xw71Ro/O21/d6QjcxejYlA6PmU6mb7JJ4wk/r6xf17cH4g6bvcA6CF4920FPz4g",
	"WreGKax8ri8DinXLysE1L6sCsKLczKGO798UpMtUWSLpN7/4kaNfPAndfLr5vwEAAP//nLfJ7ELrAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
