// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/apps-local-state)
	LookupAccountAppLocalStates(ctx echo.Context, accountId string, params LookupAccountAppLocalStatesParams) error

	// (GET /v2/accounts/{account-id}/assets)
	LookupAccountAssets(ctx echo.Context, accountId string, params LookupAccountAssetsParams) error

	// (GET /v2/accounts/{account-id}/created-applications)
	LookupAccountCreatedApplications(ctx echo.Context, accountId string, params LookupAccountCreatedApplicationsParams) error

	// (GET /v2/accounts/{account-id}/created-assets)
	LookupAccountCreatedAssets(ctx echo.Context, accountId string, params LookupAccountCreatedAssetsParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"exclude":               true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
		"exclude":     true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountAppLocalStates converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAppLocalStates(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAppLocalStatesParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAppLocalStates(ctx, accountId, params)
	return err
}

// LookupAccountAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAssets(ctx, accountId, params)
	return err
}

// LookupAccountCreatedApplications converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedApplications(ctx, accountId, params)
	return err
}

// LookupAccountCreatedAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedAssets(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"creator":        true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"limit":          true,
		"next":           true,
		"txid":           true,
		"min-round":      true,
		"max-round":      true,
		"sender-address": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------
	if paramValue := ctx.QueryParam("sender-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/apps-local-state", wrapper.LookupAccountAppLocalStates, m...)
	router.GET("/v2/accounts/:account-id/assets", wrapper.LookupAccountAssets, m...)
	router.GET("/v2/accounts/:account-id/created-applications", wrapper.LookupAccountCreatedApplications, m...)
	router.GET("/v2/accounts/:account-id/created-assets", wrapper.LookupAccountCreatedAssets, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
