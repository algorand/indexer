// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransactions(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransactions(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/1SyTl6K9gAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
