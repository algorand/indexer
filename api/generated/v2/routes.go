// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransactions(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransactions(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7AAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
