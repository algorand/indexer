// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
