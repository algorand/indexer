// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"round":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"limit":    true,
		"next":     true,
		"creator":  true,
		"name":     true,
		"unit":     true,
		"asset-id": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//vNEhi1e5AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
