// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchForAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/2/cNvLov0Ls+wBN+nbtJL0e0ACHD9LkE1xwSS+I3R7w4jwcLc3uspZIHUl5ve3z",
	"//4wQ1KiJEq7dlzHbfenxCt+GQ6H833IX2eZKislQVoze/7rrOKal2BB0188y1Qt7ULk+FcOJtOiskLJ",
	"2fPwjRmrhVzN5jOBv1bcrmfzmeQltG2w/3ym4T+10JDPnltdw3xmsjWUHAe22wpbNyNdLVZq4Yd44YZ4",
	"82p2PfGB57kGY4ZQ/lMWWyZkVtQ5MKu5NDzDT4ZthF0zuxaG+c5MSKYkMLVkdt1pzJYCitwchUX+pwa9",
	"jVbpJ59eEi9WSnOZL5ZKl9zOns8+vH75zTfffMdOXKPrfVv5+RZaFTBc8UtVngsJYX3QLK/ZWmYVy2FJ",
	"jdbcMoQVVx0aWsUMcJ2t2VLpHYt2QMQrB1mXs+cfZwZkDpr2PQNxSf9daoBfYGG5XoGdfZr30HSNi1ta",
	"0AsrysTS3vh91GDqwhpGbWmNK3EJkmGvI/auNpadA+OSfXj9khHyHDYt5J5cR1fVzh6vqdmMnFsIn3/T",
	"LTYG0sfuBX5hb16NLSB0TBCjkBZWtA+dc4Q9Eser/fkclkrDnnviGt/ppsTzf9FdyWqtQWbbxUoDJ0JZ",
	"czlEyQePCrNWdZGzNb+kdfOS+KXvy7Cv4z+XvKgRRSLT6kWxUoZxj8EclrwuLAsTs1oWeEJxNL/RTBhW",
	"aXUpcsjnyMI2a5GtWcaNG4LasY0oCkR/bSAfQ3N6dRN0dB2jBOG6FT5oQQ8XGe26dmACruggLLJCGVhY",
	"tYMzB2bLZc5iXtqyaXMzPs1O18BocvzgJBbhTiJBF8WWWdrXnHHDOAtcec7Ekm1VzTa0OYW4oP5+NYi1",
	"kiHSaHM6IgSl+Bj6BshIIO9cqQK4JOQVohR2iLF3/EqUdclkXZ6DxrUHNmMV02BrLccgcCPu2LOSXy20",
	"qmW+h6yxTOmYu5kKMrEUkLNmlDFY2ml2wSPkzeBpJWAEThhkFJxmlh3gSLhKbArSGX5hFV9BtCdH7Ed/",
	"zOirVRcgm9PIzrf0qdJwKVRtmk4jMNLU4woVQacsLCoNS3E1BPLEowNJ3bXxvKD0gihT0nIhIUc2QUAr",
	"C+7YjMIUTTgN2p57uFT9vZvct732jBot3IFJsGL86o9TWmXv9N9DaY/nNmK1cD8PtkOsTpF7LUVBnO1n",
	"3IWAhtoIueohIvA6I1aS21rD8zP5Nf7FFuzEcplzneMvpfvpXV1YcSJW+FPhfnqrViI7EasRZDawJnVX",
	"6la6f3C8tK5qr5Iq2lulLuoqXlDWsSbOt+zNq7FNdmPe1JR40ZggsQ53ehX0upv2sFfNRo4AOYq7imPD",
	"C9hqQGh5tqR/rpZET3ypf0khEykXTKWkAbLivHX3wf+GP+GJBUkMiVdVITKO2Dz+2SjSOVpIKq0q0FZA",
	"bMPif/9Lw3L2fPa/jlub99h1M8d+wlbNs2Oc2J0hbj1DwW0OlLwBjZylrGrrVIvUAW1O1McGtv6cLYLU",
	"+c+QWYegLhiPoKzs9jEC7GE3d4ct+r+wUJob4M2DzLXm298Yj042LUjGDEf+0UBOzLXiKyFp4XO2WYNk",
	"Jb9AXsOlsmvQDPcCjA1Syik5TnA15rMXdV7xOZqlGEFiT81nbyrqqt/zgssM7mJnz/1Qe+/sOyEFAfF3",
	"VeTeAjpsMW5xg8q72OK7OLQ4zs6DSo3ul73RlHeBJHNXWLoBYwv4OtB8s5efTfHfFyq7uNVeTm0Vjbpj",
	"5tPI93sHxPQnIYL5LPaZ7312ImQPT1CPsLqY7E14I/K6DuporEEmPKg+cCGkU4ZRJeeWce+vdCbYmTyT",
	"r2AppMDvz89kzi0/PudGZOa4NqC9ZD5aKfac+SFfccvP5GzeZzxjwQlySXloqvq8EBm7gG1qF5yvbDjC",
	"2dlHVO3Pzj4xqywvIk9J5EHzFm6rbQ5Jzk2wQMpQtV1UIFHkLzRsuM4ToJvGvqaRnStvatY582M7N4Ab",
	"n/nx08egZdjDReMnXLVrw9ZQeBeDMGFG2sMf0Kqn48c3zNEQqw0Y9u+SVx+FtJ/Y4qx+8uQbYLGu829v",
	"m+OR2VbOzbW30JjSl5wLbjG1tIprXFnkB1TLsE7ff3Spz5u1BrqaWuxnrTK1vIprKzJRcbecvSyH950+",
	"OMgu2ktSm1r2icoRYISkJJG5xotzbiC5HYBfcD9q41ynuMYQIwwzOXZOKzhiFHL0suS8IG9qsAm8OOCa",
	"3Lxh2S7yMQZamkpAy/bQBzC6GIm5y5qb4PElx3hW1ISqvc7hiIw7RQSQnEMqCoJOmA5jFThvAZd8DP/G",
	"clun16hkgWvMoYCVG801Dtj3i/vKRKs+k1+zfy6XhZDAFkzIHAU6cSluQwhAZcL5wYMgMGEOQMb/NcMt",
	"xAH2HiFFGxHYlVKFG5j9oGKCl6ubAClBkGTnYWylmVTR35CW4EmP3Jtm1k5sofG34YS0rB6rmTceVBcr",
	"D3654IwLHrjZ/KbetI622XinvOTbKaGGfKM9QPPWdeqobahWNE6U930WllQeOq2Ya3LuhWHEuFMIRLaU",
	"ofYpTU3RKqsyVRwNtAYDBZAWtOhw1QVqCKnTYoBOy0noFmkU7JFYMi63j33szBZbpmEljAXttUmCsPE+",
	"N17C860FhIxbCxon+r+P/vv5xxeL/8MXvzxZfPe/jz/9+pfrx18Pfnx2/be//b/uT99c/+3xf/9XikAv",
	"lYXFUmhjF5e8SHlUz84+YqPXhmT+a2yaZj0dVDEXThQjWjZNewHbRS6KOr3bft5/vMJpf2hUK1OfX8CW",
	"BAzwbM3Ouc3WJIE602ObiakLvnPBb92C3/I7W+9+tIRNcWKtlO3N8Tuhqh4/mTpMCQJMEcdw10ZRmmQv",
	"wUczFqc6V94oq6X4Tw1M5CAtftIUI+5xFsRuCHwPWIeQOSRiYn5gFwRvh08SC021nyL43jXto9wB0Yw0",
	"ipOgLQ/AfdVw1bDQRs3HHyLN9waGWjzjwE6bMLLwNLS2VS2FNzomLJfJ9J2gJawdLIlhRtNxyAZQieDe",
	"i5AXgAI9WApO9GDvI3ZK2pnpZIVt1uAD2j3qajuyjEsU+Es8yHOXsVAYlRimlhsuXYoB9nNo8r0NONmH",
	"vTYKOXjGTVpjEWax1OoXSHPkJe7FZg2kC5EKZGNU4gJd72jsONego2c02kWbNxXwG8MxSr3vm3OS2Gf3",
	"kXVt5ZFDTIQcmX/k0gn6JJeOcl8quRSrOJg4Qv+xE+XYjd/Sv4e5T/5ZwTfnPLtIIj1DmAKBIUSx5msV",
	"C53DLnglvaU99mbJyFEzb9uiTosCBnQpbNcb1hLDKLmfRuT3uyf5HDJR8iJtCOWEfcq7aFhQLlbC5cHU",
	"BqI8ED8Qq5SQ1lFRLkxV8K0LsreoebNkT+ZRWpTfjVxcCiPOC6AWT10LNIJpbY3tFbrg8kDataHmz/Zo",
	"vq5lriG3a+MQaxRDs/m0yf5qLIxzsBsAyZ5Qu6ffsUdkuRpxCY8Ri6VLD5o9f/od5c64P56kOLJPHpvi",
	"Kzkxln95xpKmYzLd3Rgoh/yoKUYTkl3HWdjEaXJd9zlL1NJzvd1nqeSSr1J5IWdnH8sdMLm+tJuk/Pbw",
	"InOXrmasVlsmbHp+sBz502LNzTotaB0YLFNlKWyJB8gqZlSJ9NSmh7hJw3Au982plw1c4SMZshUlrCEh",
	"tj7++zd0nCxPrZqcOT/wErponTNumKkR5jaFyjPEJII1GNCX6Un0yAYHuen7skdSyUWJZyd/7PlZl/6S",
	"TgZleZGc1gbe1XdQTw8dq0HD7JVaSPvXv+DEOMpiFLF1B7E84km3RnGt0+vkNU7144e3XjCUSkM3xnAe",
	"vN8dEaPBagGXyRPbD5U0mkkjLgLmUwqKC4sNYKWfY8jGdGilLi4AKiFXx+fYx6kQbtS+8rACCUaY8YO9",
	"WiN68DMexciEpaHZORRKrsz9n8kA+IgVvgKioDevdkE9GDhkOi6o6ThisB1O8T5kRrqhsf39YyNyOe8M",
	"uH7wbcc9xMh0ZI6Le+k8BN6JoeQQlRtukDmDzJ24oWO45kKOuI0B8hE3GNCMJ0pb4ZzGAF/AqWVFCcby",
	"skozRYMwupNIpxoBbbqglmQgUzI3zAiZAYNKmXUSEf347HCqK0mTFcI41hcXQWVKu7Q7kgBW9aKg+waE",
	"JuO9XRgXWik7BiiJijhQr5RlvLZrkLbxkQPlo/dXgrTDNWlCTuF2LIu9QzYc0jB5UWznTNiv3Djk3iK5",
	"UIK+KIBZDcA2a2WAFcAvoS0+oNG+Muz0SuSGSgsKuBKZWmlerUXGlM5BH7HXPqOXtDPXyc/35Ij5WKT3",
	"8Z9eSVpersCpbvE63TKDL97gienVpJk5U7LYDn6mjH0DxSWYI3a6UQ4I08b8DQrDTo/zmqwUznKxXAKd",
	"U1oOKXXUr/0QwURlFFTM0Qzr1/QFTtuVXJA2M6LcWmdBXcmXrhHz8Tjbsal6R6N0mnQgqALyFWhUuVXp",
	"0C5KaHM8UIdQ2raG5BJcIAU5m5BWq7zOwGUWnHToMQJLDEBq0umjBGKioVDF0sIZjMDAU9FQIKPribMD",
	"pequkPYOLkGzc7Sy2oEeOaYTwWUs1xR3BjxhfqmQP04z57paaZ7DwlhuYS9Z8qPrcUIdohEu1c0G+Anb",
	"99Wmjm7SkfhpKR2Fi1DKxLw8xctGVa8PY/Hb1644R0PhYoBUzEJt5wPFagmwMEKmvTJLAOLtPMugQnKO",
	"a1YBkFE5PZNYhUHpGmQr7rC04hJcdHJCGVhkvMjqwrm3JyT9JuOF7vpJC1hahQQWl3O1rgqBc52Te93V",
	"kbj5NDLAqAeeKCTTrW/htPhQtoGHo5FWo0H0RQGXkFbcgbtY+t/VBo3cbbMXOEULxtydFzoqDeROV6Eg",
	"kNvtH72BEYHvDpOnumkgcStGkJvH+1yBFioXGRPyZ/CnuWFLgWKIfWdKWiFrqv/S0MLt5ASjtIB+6H9I",
	"Adqf4yFc3AWK2tiYhE1nt/NIn+tGkozlF+DADgkMXjTuu6cajMjrEReL5lkXspsRoz+8H7iFY91srbkj",
	"uuxxqOaQTx26Pi33yKa3W0MsjfKpDvPdh1nxJmzNPKMehq9DWl9oOWL7KKuCf8D3aMe+BG28n2boSoGr",
	"HWNji874LtlRq0oZyG8xy4JXlVaXY05abLt17LiluaB8ubQf6g8+lpfA4EgmaAOA2QibrRcjkWps61og",
	"DB/6ltZwSqdC0CmE5RIyuw8MFPJ0ZZCjULjPCMUr4Dml0rTRaxe37oPy6AfFcGgT6TXSCNJCW7WGRnm8",
	"x4EaUN8u4v9J7Un7l4r+R6GbPY5BUGT83qedVK6NJ542MYezLRjCSlMpGJ2RShlepD3PYdIcCr6dmpIa",
	"dCdtFNvgfHcyh6MMQ4ECV5DVtntgEqqfP2dTk2OT/oKb4zk8FXHdXX8n/0drpeOs7l4wTjLAFiyUmDmr",
	"RtF3XjByEzeln90NxG+JIs/5rARj+ApGCkAjWgwNUyQ4qLEZws6MKKvCub09r0LOEvdiUynHE7nEw+3r",
	"RF53xU6HOVrTAdPYS5Aojqd6XMN4UYTqdbRI0NxR9GPX3Jc5I3e1oXJ2yUBeQqEqSLam7NY9IqVo3UJu",
	"r6RzdZ7Qn6dXMtU2DsJS62h5qSRwCjBnFMBd2C4m9nStRCHgNskgXKly+xFfuzhVMyINtQT9OWOe+jEo",
	"gEt3AEwls2rS1Bol0PviKarsupZcyBwhUtPJvNheyNViIpMjo1QO3zAkrhN7jfYzPThiXpeQTxd9kKnd",
	"v0Bow5Gaff+R4ePU8MVICk9U1h5yYqgle/Tm1WNG+VjhkgveZou3Vx3tXOQSYMzS7Dnn0M4YGWNHKt/y",
	"ss3io1Z97WAnlHtGG/7ODaXl+ebeK/JAQwwdIH2B+HAoreq0R3mlSZh+zw389S8MZKbcrQsWGPlhnZ/T",
	"rPm3T58dP/v2rywXKzD2iP2LEk00+GSFXi5ydzeYaHOceecDAdYkqrkwvndmRXOu/YYMnJbCO7VomPvf",
	"odTOxKRO1y0Ne0mruWMGC7VcJvP7/km/MyG9CawDj9AwxO4eXMLV1d+SNf/DFeVfz2c7ck+Lyybt9HYH",
	"tICxeoriKkGm3zxbtJR6xN5ibwZyqXQGhpW1rXnhrqQJ6k9MPS4hwvlcUXFwuRDyF9CK0lEkU6i99nmy",
	"iJBNjjKekXJjvLcXYWiyJJvQ8KMTutds7oB8zCoudOrKuFpaUdCviMafIixWyKAR6H+tRZGggkrhdxPD",
	"MWdSMVfWF7d0YY02scfB7OPKHUK65zwHNeIukj6vGFUOytcg1fv+Aaz4tkTz8HbH6L3r7TxR7halafVG",
	"j6g3ofeOCiViMOnb107RUms0Dic6Ukxb7MVc/JV9ybCqi+M64v+quTMxKaTcMNMoMSMocX2nEdLEoG6w",
	"ZydNn9GKmLOzj/iha5J2imO6MRhKLDxir5rYGDbzUZU2YOavjkTjwzEBauUy35pERKHjC7uMVRpyKqw5",
	"O/tYOQs9QbK+gRMJ2GYoHHwTni1XTbVkwggJza6WoNt2KUMgtFzqX9qGCRtk/ln3waSTfvytMwsaOeFC",
	"nXVVTxLrHVE3by+lbGnIz73DYI1trzE3EfmEXDZcUajM12Zr8Aivtf8Ft54S5eo2hfdMvmAosLzq1AxF",
	"l9q1DhKXOOQTBo4SnZqsVjPo1p/yhlnDbvGnV9KtdsTAHVEorrjIfR5NJyPUxRMDfiBnSvvYuVj6dY5V",
	"R96uQmHnHr8eydqM9zjYWD5N8zPTsd2ME4gdKx9HU4rneS+tLy77dKkMTfKtw7ZPXyVi4ZuRTNHJ3VxO",
	"7ubE+B2v8ibwjYkS0MBnnP9+EzDueuyT39/6qNoE/+HU+xz+xqWxF2kE3vm5xBFmnSCPiaoVXlL25Yum",
	"YNoDpxr4jphnId4TEn7XQRwXy8DNglEY3A69Glx3TwsreXXTmpid/CECatzvA6NenzYc46vow3hRppm/",
	"p7I5Ob1i3t3OodFbP0n84te+n53HyaD+blTKBy0pSNTEc1Mo9pnzjTeoLWlwzjLybbmSqZBD3s4Qo5Ox",
	"NzgyLzZ866sHY/IYHy4gzqWkJhS2OIrsL4BO4kZnZGx+gExUAjUm3uVlDaWOq5ojV0Q4lRVZhwtviUsI",
	"+mVeU6oYb2tRugZlsCd9Vj2PxOzco5kXXVvMDRxKF7DNyzB2WFGzpZFU2uPmnUSNUoPSHZzLW/yTLMur",
	"jTflVK6XY1VumnEeJfuFlyPWocRGuGnvuL7oSDJuujcmuMKvzqgdRSGKht2ikPoCSOd+39a6UhVEk0P3",
	"E2jnFPjAZa5K9rqWjgoe/fTh9WN/1U8gspBXhcTnIXnANdbLYY11otIYUXJX1dUX+Reqri4G1dW3X+n+",
	"ddWBtsaqqonShJvYlVNrnx4cc6j7L6eeYjPBIzLNZ7wJe1NG47s5TuNnup065LShkSuSbJN63hORn6Vx",
	"dO5j4dbd/mV8WVOreXRDXG2BoWwiVS7vebdzZDheOgwWNBKahOpgEveQGH89TPPWR6NDUP/cF0YWkZqw",
	"rGVueih0axXTXqNJLcErCaHNpANqTHzuKzNPYvdSFxLy4PjsteailOiyFhIQVKzmytLoKqDoTZEoe7pF",
	"Zbgie5h7UKiVyIzzONzUz/U29L2ez8q6sOKW47wLfZ3jLS0xBXmXwr3MDPJn33779Lt2uQ+MXQ2RlIxU",
	"+GW912qleclt7xrndnV7MLGwlUcrNWRZejVi/WoCgKBkXK9qZH1mTuW1bfSkU6UxcvtPW4tBgKTXGy2W",
	"uUwIumshInWFCm5hRfvTHH9bc7NuWWdUIk2l65x5ftWP+pz+z4u3SP044f1rROFQLD7Lndw7HmOMoz0k",
	"D+FsxOzR0cO+LPFdxEmGFcR+ic7NiPQSSksJ11UBqNu1PHB4bjK9raw6DlvjRH6Y093l3rskKRovjXVq",
	"QKWHCjWRigt3oV6kcZEp3UJ1i6KnAX5OYrhSFVFrDQYhSoch1vrs7FNa2XQZYGntMt3p+oZ7e9LDaRfj",
	"Dm+jGm514YC437O8gwbuH6Tr5L2lQi5VuHOWZ6Q3hutdfLBj5uuLZ2trK/P8+Hiz2RyFSMhRpsrjFSUH",
	"Layqs/VxGGhwJ2oYzxctIRcutlZkhr14/4Z0JmELcNfAwRVo9ow9mUXUNXt69ARHVRVIXonZ89k3R0+O",
	"njqsrYkQjuOr4lfJu42ax2maCxBxaqQm0qHe5E2j10q/aO9Njx+h+/jlH8C651dpHuh7K3/iV67+lA9a",
	"3fbxGqqBrUATu5UZuUoN1av2npAq+RaBzoXh5wVQrQKZTp1oqfmMx3A+9d4UefbkyeFljN/9yxiITo4G",
	"08eZe/1s9gl/a8TR8a/tq6PXo7LJv9HDh3eBD0WUa+u38/stiZ5JEfWQnka9/zeofpNj98d9viei54II",
	"bYqej/vXPexD3H3H8QR1x5cv7KLygxr0xR+au6/XueZ/ivfc/njvuH2BBwgfwLuVD+Epz4dntf6JHmr+",
	"074bfrDR/9w2+gMyPO7WCjg8t/Ugn9tKGy7N20Y7vcLUcsonHB6dOxgiO7XV16SKO03c57k2hOfEXJOr",
	"2aZOJLlQc8vonc6Oo4+ulvcE5x3MV0t3CXFqPvx2s/nuXX+7Yy/K4e3LL/z25ajbksY+/jVQ0G6XpU+/",
	"3+2wpAeEk+7KlFoQJxfv/eb7b0Clf8x3bKeFZbT9x/E7zVN0QMXB/k7X6H05RYkO8dXsk+TRvmR8ELE7",
	"hcAXcJ8cLLg/ugX3QHnx4bn4B/Zc/P4S5CYxos4tLJ33iKbExiFMdAgTHcJEhzDRIUx0x2GiQ5DmEKQ5",
	"qPh/7CANFYUJT+0d/au9pzEU0AgZl491rvd39wqNkXrD7m8mWO6IpF+q8lxIaFXmsJ42+5Mei1tSo/iK",
	"peZBR8VMEyjYscqFVsWIQA/X/TS1f+FZvoXlGvXifQR8ZzUBQKp8jOaP35K80drc3eeFMnR1bXQNlER0",
	"F8WWWX+NJ0flMaxkzsSSbVXNNnR0CnFB/emSPLJboKR3cnpJt3S3Qz3qiPfdF811FgkCiu5aebDW6yFe",
	"+PuJF7o78o9/dffcOTNxpxe8uco1ZaM2T9RN2aWOBtx06Uh5DND9EvPO525uhei9/AJReHY6b7QJ0h6c",
	"AQdnwMEZcHAGHJwBh5zRgzvi4I44uCMO7oiDO+Lgjrh3d8TBhfBHdyHMZ9+6Pe1+p8e9RlLs6AJIfRnM",
	"0e7tGnDFy6oAuljj8iklXfoRmps5vAWNxzBYDW7s60/X/z8AAP//gkQSPj2xAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
