// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchForAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
