// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchForAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
