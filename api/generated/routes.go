// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64) error

	// (GET /assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "tx-id" -------------
	if paramValue := ctx.QueryParam("tx-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-id", ctx.QueryParams(), &params.TxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-id: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/accounts", wrapper.SearchForAccounts)
	router.GET("/accounts/:account-id", wrapper.LookupAccountByID)
	router.GET("/accounts/:account-id/transactions", wrapper.LookupAccountTransactions)
	router.GET("/assets", wrapper.SearchForAssets)
	router.GET("/assets/:asset-id", wrapper.LookupAssetByID)
	router.GET("/assets/:asset-id/balances", wrapper.LookupAssetBalances)
	router.GET("/assets/:asset-id/transactions", wrapper.LookupAssetTransactions)
	router.GET("/blocks/:round-number", wrapper.LookupBlock)
	router.GET("/transactions", wrapper.SearchForTransactions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8fr/AwAA//+sBrjWrbEAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
